var e=Object.defineProperty;import{E as t,C as i,S as s}from"./engine-Dl-Z51O5.js";import{R as n}from"./renderer-CR3FKh3K.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const i of e)if("childList"===i.type)for(const e of i.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();class o{constructor(){this.listeners=new Map,this.eventQueue=[],this.isProcessing=!1,this.wildcardListeners=[]}on(e,t,i=null,s=50){if(e.includes("*")){const n={pattern:e,callback:t,context:i,priority:s};return this.wildcardListeners.push(n),this.wildcardListeners.sort((e,t)=>e.priority-t.priority),()=>{const e=this.wildcardListeners.indexOf(n);-1!==e&&this.wildcardListeners.splice(e,1)}}this.listeners.has(e)||this.listeners.set(e,[]);const n={callback:t,context:i,priority:s},o=this.listeners.get(e);return o.push(n),o.sort((e,t)=>e.priority-t.priority),()=>{const t=this.listeners.get(e);if(t){const e=t.indexOf(n);-1!==e&&t.splice(e,1)}}}off(e,t){const i=this.listeners.get(e);if(!i)return;const s=i.findIndex(e=>e.callback===t);-1!==s&&i.splice(s,1)}once(e,t,i=null,s=50){const n=this.on(e,e=>{n(),t.call(i,e)},i,s);return n}emit(e,t={}){const i=this.listeners.get(e);if(i)for(let n=0;n<i.length;n++){const o=i[n];try{o.callback.call(o.context,t)}catch(s){console.error(`Error in event handler for ${e}:`,s)}}for(let n=0;n<this.wildcardListeners.length;n++){const i=this.wildcardListeners[n];if(this.matchesPattern(e,i.pattern))try{i.callback.call(i.context,{eventType:e,...t})}catch(s){console.error(`Error in wildcard handler for ${i.pattern}:`,s)}}}enqueue(e,t={}){this.eventQueue.push({eventType:e,data:t})}processQueue(){if(this.isProcessing)return;this.isProcessing=!0;const e=[...this.eventQueue];this.eventQueue=[];for(let t=0;t<e.length;t++){const i=e[t];this.emit(i.eventType,i.data)}this.isProcessing=!1}matchesPattern(e,t){const i=t.split(":"),s=e.split(":");if(i.length!==s.length)return!1;for(let n=0;n<i.length;n++)if("*"!==i[n]&&i[n]!==s[n])return!1;return!0}clear(e=null){e?this.listeners.delete(e):(this.listeners.clear(),this.wildcardListeners=[],this.eventQueue=[])}getListenerCount(e){const t=this.listeners.get(e);return t?t.length:0}getEventTypes(){return Array.from(this.listeners.keys())}getTotalListenerCount(){let e=this.wildcardListeners.length;for(const t of this.listeners.values())e+=t.length;return e}getQueuedEventCount(){return this.eventQueue.length}}class a{constructor(){this.audioContext=null,this.masterGain=null,this.sounds=new Map,this.music=new Map,this.initialized=!1}async init(){this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.masterGain=this.audioContext.createGain(),this.masterGain.connect(this.audioContext.destination),this.initialized=!0}playSFX(e,t=1){this.initialized}playMusic(e){this.initialized}setMasterVolume(e){this.masterGain&&(this.masterGain.gain.value=Math.max(0,Math.min(1,e)))}pause(){this.audioContext&&this.audioContext.suspend()}resume(){this.audioContext&&this.audioContext.resume()}}class r{constructor(){this.assets=new Map,this.loading=new Map,this.manifest=null}async loadManifest(e){const t=await fetch(e);this.manifest=await t.json()}async loadAsset(e){if(this.assets.has(e)){const t=this.assets.get(e);return t.refCount++,t.data}if(this.loading.has(e))return this.loading.get(e);const t=this._loadAssetData(e);this.loading.set(e,t);const i=await t;return this.loading.delete(e),this.assets.set(e,{data:i,refCount:1}),i}async _loadAssetData(e){return null}unloadAsset(e){const t=this.assets.get(e);t&&(t.refCount--,t.refCount<=0&&this.assets.delete(e))}getAsset(e){const t=this.assets.get(e);return t?t.data:null}}const c=class e{constructor(t="Global",i=e.LogLevel.INFO){this.context=t,this.level=i,this.logs=[],this.maxLogs=100}setLevel(e){this.level=e}getTimestamp(){const e=new Date;return`${String(e.getHours()).padStart(2,"0")}:${String(e.getMinutes()).padStart(2,"0")}:${String(e.getSeconds()).padStart(2,"0")}.${String(e.getMilliseconds()).padStart(3,"0")}`}format(e,t){return`[${this.getTimestamp()}] [${e}] [${this.context}] ${t}`}store(e,t){this.logs.push({timestamp:Date.now(),level:e,context:this.context,message:t}),this.logs.length>this.maxLogs&&this.logs.shift()}debug(...t){if(this.level<=e.LogLevel.DEBUG){const e=t.join(" ");console.log(this.format("DEBUG",e)),this.store("DEBUG",e)}}info(...t){if(this.level<=e.LogLevel.INFO){const e=t.join(" ");console.log(this.format("INFO",e)),this.store("INFO",e)}}warn(...t){if(this.level<=e.LogLevel.WARN){const e=t.join(" ");console.warn(this.format("WARN",e)),this.store("WARN",e)}}error(...t){if(this.level<=e.LogLevel.ERROR){const e=t.join(" ");console.error(this.format("ERROR",e)),this.store("ERROR",e)}}getLogs(){return this.logs}clearLogs(){this.logs=[]}exportLogs(){return JSON.stringify(this.logs,null,2)}};var l;((t,i,s)=>{i in t?e(t,i,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[i]=s})(c,"symbol"!=typeof(l="LogLevel")?l+"":l,{DEBUG:0,INFO:1,WARN:2,ERROR:3,NONE:4});let h=c;class d{constructor(e){this.canvas=e,this.logger=new h("Engine",h.LogLevel.INFO),this.running=!1,this.lastTime=0,this.deltaTime=0,this.fps=60,this.frameCount=0,this.fpsUpdateTime=0,this.eventBus=new o,this.entityManager=new t,this.componentRegistry=new i(this.entityManager),this.systemManager=new s(this.entityManager,this.componentRegistry,this.eventBus),this.renderer=new n(e),this.audioManager=new a,this.assetManager=new r,this.logger.info("Engine initialized")}async init(){this.logger.info("Initializing engine..."),await this.audioManager.init(),this.systemManager.init(),this.logger.info("Engine ready")}registerSystem(e,t){this.systemManager.registerSystem(e,t),this.logger.debug(`Registered system: ${t}`)}start(){this.running?this.logger.warn("Engine already running"):(this.running=!0,this.lastTime=performance.now(),this.logger.info("Engine started"),requestAnimationFrame(e=>this.gameLoop(e)))}stop(){this.running=!1,this.logger.info("Engine stopped")}gameLoop(e){this.running&&(this.deltaTime=(e-this.lastTime)/1e3,this.lastTime=e,this.frameCount++,e-this.fpsUpdateTime>=1e3&&(this.fps=this.frameCount,this.frameCount=0,this.fpsUpdateTime=e),this.systemManager.update(this.deltaTime),this.renderer.render(this.componentRegistry),this.eventBus.processQueue(),requestAnimationFrame(e=>this.gameLoop(e)))}getEntityManager(){return this.entityManager}getComponentRegistry(){return this.componentRegistry}getSystemManager(){return this.systemManager}getEventBus(){return this.eventBus}getRenderer(){return this.renderer}getAudioManager(){return this.audioManager}getAssetManager(){return this.assetManager}getFPS(){return this.fps}getDeltaTime(){return this.deltaTime}cleanup(){this.logger.info("Cleaning up engine..."),this.stop(),this.systemManager.cleanup(),this.eventBus.clear(),this.logger.info("Engine cleaned up")}}const u={player:{moveSpeed:200,acceleration:1200,friction:.85,observationRadius:96,detectiveVisionDuration:5e3,detectiveVisionCooldown:1e4},faction:{cascadeMultiplier:.5,attitudeThresholds:{allied:{fame:80,infamy:0},friendly:{fame:40,infamy:0},neutral:{fame:0,infamy:0},hostile:{fame:0,infamy:30}}},knowledge:{gateCheckInterval:500},camera:{followSpeed:.1,lookAheadDistance:100,deadzone:32}};function m(e){return{police:{allied:{fame:75,infamy:0},friendly:{fame:35,infamy:5},neutral:{fame:0,infamy:0},hostile:{fame:0,infamy:25}},criminals:{allied:{fame:80,infamy:20},friendly:{fame:40,infamy:0},neutral:{fame:0,infamy:0},hostile:{fame:0,infamy:40}}}[e]||u.faction.attitudeThresholds}class g{constructor(e,t,i){this.components=e,this.events=t,this.input=i,this.requiredComponents=["PlayerController","Transform"]}init(){this.events.subscribe("game:pause",()=>{this.paused=!0}),this.events.subscribe("game:resume",()=>{this.paused=!1}),this.paused=!1}update(e,t){if(this.paused)return;const i=t.filter(e=>e.hasTag&&e.hasTag("player"));if(0===i.length)return;const s=i[0],n=this.components.getComponent(s.id,"PlayerController"),o=this.components.getComponent(s.id,"Transform");if(!n||!o)return;const a=this.input.getMovementVector();if(0!==a.x||0!==a.y){const t=n.acceleration*e;n.velocityX+=a.x*t,n.velocityY+=a.y*t,this.events.emit("player:moving",{direction:{x:a.x,y:a.y},position:{x:o.x,y:o.y}})}n.velocityX*=n.friction,n.velocityY*=n.friction;const r=Math.sqrt(n.velocityX*n.velocityX+n.velocityY*n.velocityY);if(r>n.moveSpeed){const e=n.moveSpeed/r;n.velocityX*=e,n.velocityY*=e}Math.abs(n.velocityX)<.1&&(n.velocityX=0),Math.abs(n.velocityY)<.1&&(n.velocityY=0);const c=o.x,l=o.y;o.x+=n.velocityX*e,o.y+=n.velocityY*e;Math.sqrt((o.x-c)**2+(o.y-l)**2)>1&&this.events.emit("player:moved",{from:{x:c,y:l},to:{x:o.x,y:o.y},velocity:{x:n.velocityX,y:n.velocityY}}),this.updateControllerInput(n)}updateControllerInput(e){e.input.moveLeft=this.input.isPressed("moveLeft"),e.input.moveRight=this.input.isPressed("moveRight"),e.input.moveUp=this.input.isPressed("moveUp"),e.input.moveDown=this.input.isPressed("moveDown"),e.input.interact=this.input.isPressed("interact"),e.input.deductionBoard=this.input.isPressed("deductionBoard"),e.input.inventory=this.input.isPressed("inventory"),e.input.pause=this.input.isPressed("pause")}cleanup(){this.events.unsubscribe("game:pause"),this.events.unsubscribe("game:resume")}}class y{constructor(e,t){this.components=e,this.events=t,this.requiredComponents=["Transform"],this.playerKnowledge=new Set,this.playerAbilities=new Set,this.playerCasesSolved=new Set,this.collectedEvidence=new Map,this.discoveredClues=new Map,this.activeCase=null,this.detectiveVisionActive=!1,this.detectiveVisionTimer=0,this.detectiveVisionCooldown=0}init(){this.playerAbilities.add("basic_observation"),console.log("[InvestigationSystem] Initialized")}update(e,t){this.updateDetectiveVision(e);const i=t.find(e=>e.hasTag&&e.hasTag("player"));if(!i)return;const s=this.components.getComponent(i.id,"Transform");s&&(this.scanForEvidence(s,t),this.checkInteractionZones(i,s,t))}updateDetectiveVision(e){this.detectiveVisionActive&&(this.detectiveVisionTimer-=e,this.detectiveVisionTimer<=0&&this.deactivateDetectiveVision()),this.detectiveVisionCooldown>0&&(this.detectiveVisionCooldown-=e)}scanForEvidence(e,t){const i=u.player.observationRadius,s=i*i;for(const n of t){const t=this.components.getComponent(n.id,"Evidence");if(!t||t.collected)continue;const i=this.components.getComponent(n.id,"Transform");if(!i)continue;const o=i.x-e.x,a=i.y-e.y,r=o*o+a*a;if(r<=s){(!t.hidden||this.detectiveVisionActive)&&this.events.emit("evidence:detected",{entityId:n.id,evidenceId:t.id,distance:Math.sqrt(r),position:{x:i.x,y:i.y}})}}}checkInteractionZones(e,t,i){const s=this.components.getComponent(e.id,"PlayerController");if(!s)return;const n=s.input.interact;for(const o of i){const e=this.components.getComponent(o.id,"InteractionZone");if(!e||!e.active)continue;const i=this.components.getComponent(o.id,"Transform");i&&(e.isInRange(t,i)&&"evidence"===e.type&&(n||!e.requiresInput?this.collectEvidence(o.id,e.data.evidenceId):this.events.emit("ui:show_prompt",{text:e.prompt,position:{x:i.x,y:i.y}})))}}collectEvidence(e,t){const i=this.components.getComponent(e,"Evidence");i&&!i.collected&&(i.canCollect(this.playerAbilities)?(i.collect(),this.collectedEvidence.has(i.caseId)||this.collectedEvidence.set(i.caseId,new Set),this.collectedEvidence.get(i.caseId).add(t),this.events.emit("evidence:collected",{evidenceId:t,caseId:i.caseId,type:i.type,category:i.category,entityId:e}),this.checkClueDerivation(i),console.log(`[InvestigationSystem] Collected evidence: ${i.title}`)):this.events.emit("evidence:collection_failed",{evidenceId:t,reason:"missing_ability",required:i.requires}))}checkClueDerivation(e){for(const t of e.derivedClues)this.discoveredClues.has(t)||(this.events.emit("clue:derived",{clueId:t,evidenceId:e.id,caseId:e.caseId}),console.log(`[InvestigationSystem] New clue derived: ${t}`))}activateDetectiveVision(){this.detectiveVisionCooldown>0?this.events.emit("ability:cooldown",{ability:"detective_vision",remaining:this.detectiveVisionCooldown}):this.playerAbilities.has("detective_vision")?(this.detectiveVisionActive=!0,this.detectiveVisionTimer=u.player.detectiveVisionDuration/1e3,this.events.emit("detective_vision:activated",{duration:this.detectiveVisionTimer}),console.log("[InvestigationSystem] Detective vision activated")):this.events.emit("ability:locked",{ability:"detective_vision"})}deactivateDetectiveVision(){this.detectiveVisionActive=!1,this.detectiveVisionCooldown=u.player.detectiveVisionCooldown/1e3,this.events.emit("detective_vision:deactivated",{cooldown:this.detectiveVisionCooldown}),console.log("[InvestigationSystem] Detective vision deactivated")}unlockAbility(e){this.playerAbilities.has(e)||(this.playerAbilities.add(e),this.events.emit("ability:unlocked",{abilityId:e}),console.log(`[InvestigationSystem] Ability unlocked: ${e}`))}learnKnowledge(e){this.playerKnowledge.has(e)||(this.playerKnowledge.add(e),this.events.emit("knowledge:learned",{knowledgeId:e}),console.log(`[InvestigationSystem] Knowledge learned: ${e}`))}solveCase(e,t=1){this.playerCasesSolved.has(e)||(this.playerCasesSolved.add(e),this.events.emit("case:solved",{caseId:e,accuracy:t,evidenceCollected:this.collectedEvidence.get(e)?.size||0}),console.log(`[InvestigationSystem] Case solved: ${e} (${(100*t).toFixed(0)}% accuracy)`))}getPlayerState(){return{knowledge:this.playerKnowledge,abilities:this.playerAbilities,casesSolved:this.playerCasesSolved,factionReputation:new Map}}cleanup(){this.collectedEvidence.clear(),this.discoveredClues.clear()}}class p{constructor(e,t){this.components=e,this.events=t,this.requiredComponents=["FactionMember"],this.factionRelationships=this.initializeFactionRelationships(),this.districtControl=new Map,this.playerFactionMember=null}initializeFactionRelationships(){const e=new Map;return e.set("police",{allies:["neurosynch"],enemies:["criminals","resistance"]}),e.set("criminals",{allies:[],enemies:["police","neurosynch"]}),e.set("neurosynch",{allies:["police"],enemies:["resistance","criminals"]}),e.set("resistance",{allies:[],enemies:["police","neurosynch"]}),e.set("civilian",{allies:[],enemies:[]}),e}init(){this.events.subscribe("evidence:collected",e=>{this.onEvidenceCollected(e)}),this.events.subscribe("case:solved",e=>{this.onCaseSolved(e)}),this.districtControl.set("downtown","police"),this.districtControl.set("industrial","criminals"),this.districtControl.set("corporate_spires","neurosynch"),this.districtControl.set("archive_undercity","resistance"),console.log("[FactionReputationSystem] Initialized")}update(e,t){if(!this.playerFactionMember){const e=t.find(e=>e.hasTag&&e.hasTag("player"));e&&(this.playerFactionMember=this.components.getComponent(e.id,"FactionMember"))}this.playerFactionMember&&this.playerFactionMember.currentDisguise&&this.checkDisguiseDetection(t,e)}onEvidenceCollected(e){console.log(`[FactionReputationSystem] Evidence collected for case: ${e.caseId}`)}onCaseSolved(e){this.playerFactionMember&&this.modifyReputation("police",10,0,"Case solved")}modifyReputation(e,t,i,s=""){if(!this.playerFactionMember)return;const n=this.playerFactionMember.getReputation(e),o=this.playerFactionMember.getAttitude(e,m(e));this.playerFactionMember.modifyReputation(e,t,i);const a=this.playerFactionMember.getReputation(e),r=this.playerFactionMember.getAttitude(e,m(e));this.events.emit("reputation:changed",{factionId:e,oldFame:n.fame,newFame:a.fame,oldInfamy:n.infamy,newInfamy:a.infamy,reason:s}),o!==r&&(this.events.emit("faction:attitude_changed",{factionId:e,oldAttitude:o,newAttitude:r}),console.log(`[FactionReputationSystem] ${e} attitude: ${o} → ${r}`)),this.cascadeReputation(e,t,i),console.log(`[FactionReputationSystem] ${e} reputation: ${a.fame} fame, ${a.infamy} infamy (${s})`)}cascadeReputation(e,t,i){const s=this.factionRelationships.get(e);if(!s)return;const n=u.faction.cascadeMultiplier;for(const o of s.allies){const e=Math.floor(t*n),s=Math.floor(i*n);0===e&&0===s||(this.playerFactionMember.modifyReputation(o,e,s),console.log(`[FactionReputationSystem] Cascade to ${o} (ally): ${e>0?"+":""}${e} fame`))}for(const o of s.enemies){const e=-Math.floor(t*n),s=Math.floor(i*n);0===e&&0===s||(this.playerFactionMember.modifyReputation(o,e,s),console.log(`[FactionReputationSystem] Cascade to ${o} (enemy): ${e} fame`))}}checkDisguiseDetection(e,t){}equipDisguise(e){this.playerFactionMember&&(this.playerFactionMember.equipDisguise(e),this.events.emit("disguise:equipped",{factionId:e}),console.log(`[FactionReputationSystem] Disguise equipped: ${e}`))}removeDisguise(){if(!this.playerFactionMember)return;const e=this.playerFactionMember.currentDisguise;this.playerFactionMember.removeDisguise(),this.events.emit("disguise:removed",{factionId:e}),console.log("[FactionReputationSystem] Disguise removed")}getDistrictController(e){return this.districtControl.get(e)||"civilian"}cleanup(){this.events.unsubscribe("evidence:collected"),this.events.unsubscribe("case:solved")}}class v{constructor(e,t,i){this.components=e,this.events=t,this.investigation=i,this.requiredComponents=["KnowledgeGate"],this.gateCheckTimer=0,this.gateCheckInterval=u.knowledge.gateCheckInterval/1e3}init(){this.events.subscribe("knowledge:learned",()=>{this.checkAllGates()}),this.events.subscribe("ability:unlocked",()=>{this.checkAllGates()}),this.events.subscribe("case:solved",()=>{this.checkAllGates()}),console.log("[KnowledgeProgressionSystem] Initialized")}update(e,t){this.gateCheckTimer-=e,this.gateCheckTimer<=0&&(this.checkAllGates(t),this.gateCheckTimer=this.gateCheckInterval)}checkAllGates(e){if(!e)return;const t=this.getPlayerState();for(const i of e){const e=this.components.getComponent(i.id,"KnowledgeGate");e&&!e.unlocked&&(e.checkRequirements(t)&&this.unlockGate(i.id,e))}}unlockGate(e,t){t.unlock();const i=this.components.getComponent(e,"Transform");this.events.emit("gate:unlocked",{gateId:t.id,type:t.type,entityId:e,position:i?{x:i.x,y:i.y}:null}),console.log(`[KnowledgeProgressionSystem] Gate unlocked: ${t.id} (${t.type})`)}getPlayerState(){const e=this.investigation.getPlayerState();return e.factionReputation=new Map,e}canAccessArea(e){return!0}cleanup(){this.events.unsubscribe("knowledge:learned"),this.events.unsubscribe("ability:unlocked"),this.events.unsubscribe("case:solved")}}class f{constructor(e,t){this.components=e,this.events=t,this.activeDialogue=null,this.dialogueHistory=new Map}init(){console.log("[DialogueSystem] Initialized (stub)")}update(e,t){}startDialogue(e,t){this.activeDialogue={npcId:e,dialogueId:t,currentNode:"start",choices:[]},this.events.emit("dialogue:started",{npcId:e,dialogueId:t}),console.log(`[DialogueSystem] Started dialogue: ${t} with NPC: ${e}`)}endDialogue(){if(!this.activeDialogue)return;const{npcId:e,dialogueId:t}=this.activeDialogue;this.events.emit("dialogue:ended",{npcId:e,dialogueId:t}),this.activeDialogue=null,console.log("[DialogueSystem] Dialogue ended")}selectChoice(e){this.activeDialogue&&this.events.emit("dialogue:choice_selected",{dialogueId:this.activeDialogue.dialogueId,choice:e})}cleanup(){this.activeDialogue=null}}class w{constructor(e,t,i){this.components=e,this.events=t,this.camera=i,this.requiredComponents=["Transform","PlayerController"],this.targetX=0,this.targetY=0,this.velocityX=0,this.velocityY=0}init(){console.log("[CameraFollowSystem] Initialized")}update(e,t){const i=t.find(e=>e.hasTag&&e.hasTag("player"));if(!i)return;const s=this.components.getComponent(i.id,"Transform"),n=this.components.getComponent(i.id,"PlayerController");if(!s||!n)return;const o=u.camera.lookAheadDistance,a=Math.sqrt(n.velocityX**2+n.velocityY**2);let r=0,c=0;a>.1&&(r=n.velocityX/a*o,c=n.velocityY/a*o),this.targetX=s.x+r,this.targetY=s.y+c;const l=u.camera.deadzone,h=this.targetX-this.camera.x,d=this.targetY-this.camera.y;if(Math.sqrt(h*h+d*d)<l)return;const m=u.camera.followSpeed;this.camera.x+=(this.targetX-this.camera.x)*m,this.camera.y+=(this.targetY-this.camera.y)*m,this.camera.x=Math.round(this.camera.x),this.camera.y=Math.round(this.camera.y)}shake(e,t){this.camera&&this.camera.shake&&this.camera.shake(e,t),this.events.emit("camera:shake",{intensity:e,duration:t})}snapTo(e,t){this.camera&&(this.camera.x=e,this.camera.y=t),this.targetX=e,this.targetY=t}cleanup(){}}class C{constructor(e=0,t=0,i=0,s=1,n=1){this.x=e,this.y=t,this.rotation=i,this.scaleX=s,this.scaleY=n}setPosition(e,t){this.x=e,this.y=t}translate(e,t){this.x+=e,this.y+=t}distanceTo(e){const t=e.x-this.x,i=e.y-this.y;return Math.sqrt(t*t+i*i)}clone(){return new C(this.x,this.y,this.rotation,this.scaleX,this.scaleY)}}class b{constructor({image:e=null,width:t=32,height:i=32,layer:s="entities",zIndex:n=0,visible:o=!0,alpha:a=1,color:r="#FFFFFF"}={}){this.image=e,this.width=t,this.height=i,this.layer=s,this.zIndex=n,this.visible=o,this.alpha=a,this.color=r}show(){this.visible=!0}hide(){this.visible=!1}setAlpha(e){this.alpha=Math.max(0,Math.min(1,e))}}class S{constructor({moveSpeed:e=200,acceleration:t=1200,friction:i=.85}={}){this.input={moveLeft:!1,moveRight:!1,moveUp:!1,moveDown:!1,interact:!1,deductionBoard:!1,inventory:!1,pause:!1},this.moveSpeed=e,this.acceleration=t,this.friction=i,this.velocityX=0,this.velocityY=0}resetInput(){Object.keys(this.input).forEach(e=>{this.input[e]=!1})}isMoving(){return this.input.moveLeft||this.input.moveRight||this.input.moveUp||this.input.moveDown}}class M{constructor({type:e="AABB",width:t=32,height:i=32,radius:s=16,offsetX:n=0,offsetY:o=0,isTrigger:a=!1,isStatic:r=!1,tags:c=[]}={}){this.type=e,this.width=t,this.height=i,this.radius=s,this.offsetX=n,this.offsetY=o,this.isTrigger=a,this.isStatic=r,this.tags=c}getBounds(e){if("AABB"===this.type){const t=e.x+this.offsetX,i=e.y+this.offsetY;return{minX:t-this.width/2,minY:i-this.height/2,maxX:t+this.width/2,maxY:i+this.height/2}}if("circle"===this.type){const t=e.x+this.offsetX,i=e.y+this.offsetY;return{minX:t-this.radius,minY:i-this.radius,maxX:t+this.radius,maxY:i+this.radius}}return{minX:0,minY:0,maxX:0,maxY:0}}hasTag(e){return this.tags.includes(e)}}class I{constructor({primaryFaction:e="civilian",reputation:t={},currentDisguise:i=null,knownBy:s=new Set,relationshipModifiers:n=[]}={}){this.primaryFaction=e,this.reputation=new Map(Object.entries(t)),this.currentDisguise=i,this.knownBy=s,this.relationshipModifiers=n}getReputation(e){return this.reputation.has(e)||this.reputation.set(e,{fame:0,infamy:0}),this.reputation.get(e)}modifyReputation(e,t=0,i=0){const s=this.getReputation(e);s.fame=Math.max(0,Math.min(100,s.fame+t)),s.infamy=Math.max(0,Math.min(100,s.infamy+i))}getAttitude(e,t){const i=this.getReputation(e);return i.fame>=t.allied.fame&&i.infamy<=t.allied.infamy?"allied":i.fame>=t.friendly.fame&&i.infamy<=t.friendly.infamy?"friendly":i.infamy>=t.hostile.infamy?"hostile":"neutral"}equipDisguise(e){this.currentDisguise=e}removeDisguise(){this.currentDisguise=null}isKnownBy(e){return this.knownBy.has(e)}markKnownBy(e){this.knownBy.add(e)}}class F{constructor({id:e="",type:t="physical",category:i="generic",title:s="Evidence",description:n="A piece of evidence",caseId:o="",collected:a=!1,analyzed:r=!1,hidden:c=!1,requires:l=null,derivedClues:h=[]}={}){this.id=e,this.type=t,this.category=i,this.title=s,this.description=n,this.caseId=o,this.collected=a,this.analyzed=r,this.hidden=c,this.requires=l,this.derivedClues=h}canCollect(e){return!this.collected&&(!this.requires||e.has(this.requires))}collect(){this.collected=!0}analyze(){this.analyzed=!0}}class x{constructor({id:e="",type:t="trigger",radius:i=64,requiresInput:s=!0,prompt:n="Press E to interact",active:o=!0,oneShot:a=!1,used:r=!1,data:c={}}={}){this.id=e,this.type=t,this.radius=i,this.requiresInput=s,this.prompt=n,this.active=o,this.oneShot=a,this.used=r,this.data=c}isInRange(e,t){return e.distanceTo(t)<=this.radius}interact(){return!(!this.active||this.oneShot&&this.used)&&(this.oneShot&&(this.used=!0),!0)}activate(){this.active=!0}deactivate(){this.active=!1}reset(){this.used=!1}}function R(e,t,i){const{x:s=0,y:n=0,id:o=`evidence_${Date.now()}`,type:a="physical",category:r="generic",title:c="Evidence",description:l="A piece of evidence",caseId:h="case_tutorial",hidden:d=!1,requires:u=null,derivedClues:m=[]}=i,g=e.createEntity();e.tagEntity(g,"evidence");const y=new C(s,n,0,1,1);t.addComponent(g,"Transform",y);const p=new b({image:null,width:24,height:24,layer:"entities",zIndex:5,color:k(a),visible:!d,alpha:d?.3:1});t.addComponent(g,"Sprite",p);const v=new F({id:o,type:a,category:r,title:c,description:l,caseId:h,collected:!1,analyzed:!1,hidden:d,requires:u,derivedClues:m});t.addComponent(g,"Evidence",v);const f=new x({id:`interaction_${o}`,type:"evidence",radius:48,requiresInput:!0,prompt:`Press E to collect: ${c}`,active:!0,oneShot:!0,data:{evidenceId:o,caseId:h}});t.addComponent(g,"InteractionZone",f);const w=new M({type:"circle",radius:12,isTrigger:!0,isStatic:!0,tags:["evidence"]});return t.addComponent(g,"Collider",w),console.log(`[EvidenceEntity] Created evidence: ${c} at (${s}, ${n})`),g}function k(e){return{physical:"#FFAA00",digital:"#00FFFF",testimony:"#FF00FF",forensic:"#00FF00"}[e]||"#FFFFFF"}const E={moveUp:["KeyW","ArrowUp"],moveDown:["KeyS","ArrowDown"],moveLeft:["KeyA","ArrowLeft"],moveRight:["KeyD","ArrowRight"],interact:["KeyE"],deductionBoard:["Tab"],inventory:["KeyI"],pause:["Escape"],detectiveVision:["KeyV"],forensicAnalysis:["KeyF"],attack:["Space"],dodge:["Shift"],confirm:["Enter","Space"],cancel:["Escape"],debugToggle:["Backquote"]};class T{constructor(){this.keys=new Map,this.actions=new Map,Object.keys(E).forEach(e=>{this.actions.set(e,!1)}),this.bindEvents()}bindEvents(){window.addEventListener("keydown",e=>this.handleKeyDown(e)),window.addEventListener("keyup",e=>this.handleKeyUp(e))}handleKeyDown(e){this.isGameKey(e.code)&&e.preventDefault(),this.keys.set(e.code,!0),this.updateActions()}handleKeyUp(e){this.keys.set(e.code,!1),this.updateActions()}updateActions(){for(const[e,t]of Object.entries(E)){const i=t.some(e=>this.keys.get(e));this.actions.set(e,i)}}isPressed(e){return this.actions.get(e)||!1}isGameKey(e){return Object.values(E).flat().includes(e)}reset(){this.keys.clear(),this.actions.forEach((e,t)=>{this.actions.set(t,!1)})}getMovementVector(){let e=0,t=0;if(this.isPressed("moveLeft")&&(e-=1),this.isPressed("moveRight")&&(e+=1),this.isPressed("moveUp")&&(t-=1),this.isPressed("moveDown")&&(t+=1),0!==e&&0!==t){const i=Math.sqrt(e*e+t*t);e/=i,t/=i}return{x:e,y:t}}}class D{constructor(e){this.engine=e,this.entityManager=e.entityManager,this.componentRegistry=e.componentRegistry,this.systemManager=e.systemManager,this.eventBus=e.eventBus,this.renderer=e.renderer,this.camera=e.camera,this.inputState=new T,this.paused=!1,this.loaded=!1,this.gameSystems={playerMovement:null,investigation:null,factionReputation:null,knowledgeProgression:null,dialogue:null,cameraFollow:null}}async init(){console.log("[Game] Initializing The Memory Syndicate..."),this.registerComponentTypes(),this.initializeGameSystems(),await this.loadTestScene(),this.loaded=!0,console.log("[Game] Initialization complete")}registerComponentTypes(){console.log("[Game] Component types will be registered on first use")}initializeGameSystems(){console.log("[Game] Initializing game systems..."),this.gameSystems.investigation=new y(this.componentRegistry,this.eventBus),this.gameSystems.investigation.init(),this.gameSystems.playerMovement=new g(this.componentRegistry,this.eventBus,this.inputState),this.gameSystems.playerMovement.init(),this.gameSystems.factionReputation=new p(this.componentRegistry,this.eventBus),this.gameSystems.factionReputation.init(),this.gameSystems.knowledgeProgression=new v(this.componentRegistry,this.eventBus,this.gameSystems.investigation),this.gameSystems.knowledgeProgression.init(),this.gameSystems.dialogue=new f(this.componentRegistry,this.eventBus),this.gameSystems.dialogue.init(),this.gameSystems.cameraFollow=new w(this.componentRegistry,this.eventBus,this.camera),this.gameSystems.cameraFollow.init(),this.systemManager.registerSystem(this.gameSystems.playerMovement,10),this.systemManager.registerSystem(this.gameSystems.investigation,30),this.systemManager.registerSystem(this.gameSystems.factionReputation,25),this.systemManager.registerSystem(this.gameSystems.knowledgeProgression,35),this.systemManager.registerSystem(this.gameSystems.dialogue,40),this.systemManager.registerSystem(this.gameSystems.cameraFollow,90),console.log("[Game] Game systems initialized")}async loadTestScene(){console.log("[Game] Loading test scene..."),function(e,t,i=0,s=0){const n=e.createEntity();e.tagEntity(n,"player");const o=new C(i,s,0,1,1);t.addComponent(n,"Transform",o);const a=new b({image:null,width:32,height:48,layer:"entities",zIndex:10,color:"#00CCFF",visible:!0});t.addComponent(n,"Sprite",a);const r=new S({moveSpeed:u.player.moveSpeed,acceleration:u.player.acceleration,friction:u.player.friction});t.addComponent(n,"PlayerController",r);const c=new M({type:"AABB",width:28,height:40,offsetX:0,offsetY:4,isTrigger:!1,isStatic:!1,tags:["player","solid"]});t.addComponent(n,"Collider",c);const l=new I({primaryFaction:"civilian",reputation:{police:{fame:10,infamy:0},criminals:{fame:0,infamy:0},neurosynch:{fame:5,infamy:0},resistance:{fame:0,infamy:0}},currentDisguise:null,knownBy:new Set,relationshipModifiers:[{factionId:"police",modifier:1.1,reason:"former_officer"}]});t.addComponent(n,"FactionMember",l),console.log(`[PlayerEntity] Created player entity at (${i}, ${s})`)}(this.entityManager,this.componentRegistry,400,300),this.gameSystems.cameraFollow.snapTo(400,300);const e=[{x:300,y:200,title:"Fingerprint",type:"forensic",category:"fingerprint"},{x:500,y:250,title:"Security Log",type:"digital",category:"document"},{x:350,y:400,title:"Witness Statement",type:"testimony",category:"testimony"},{x:450,y:350,title:"Memory Fragment",type:"physical",category:"memory_chip"}];for(const t of e)R(this.entityManager,this.componentRegistry,{...t,id:`evidence_${t.title.toLowerCase().replace(/\s+/g,"_")}`,description:`A piece of evidence: ${t.title}`,caseId:"case_tutorial",derivedClues:[`clue_${t.category}`]});this.createBoundary(0,0,800,20),this.createBoundary(0,580,800,20),this.createBoundary(0,0,20,600),this.createBoundary(780,0,20,600),this.subscribeToGameEvents(),console.log("[Game] Test scene loaded")}createBoundary(e,t,i,s){const n=this.entityManager.createEntity();this.entityManager.tagEntity(n,"wall");const o=new C(e+i/2,t+s/2);this.componentRegistry.addComponent(n,"Transform",o);const a=new M({type:"AABB",width:i,height:s,isStatic:!0,isTrigger:!1,tags:["wall","solid"]});this.componentRegistry.addComponent(n,"Collider",a);const r=new b({width:i,height:s,color:"#333333",layer:"tiles",visible:!0});this.componentRegistry.addComponent(n,"Sprite",r)}subscribeToGameEvents(){this.eventBus.subscribe("evidence:collected",e=>{console.log(`[Game] Evidence collected: ${e.evidenceId}`)}),this.eventBus.subscribe("evidence:detected",e=>{}),this.eventBus.subscribe("clue:derived",e=>{console.log(`[Game] New clue: ${e.clueId} from ${e.evidenceId}`)}),this.eventBus.subscribe("reputation:changed",e=>{console.log(`[Game] Reputation changed: ${e.factionId} - ${e.newFame} fame, ${e.newInfamy} infamy`)}),this.eventBus.subscribe("gate:unlocked",e=>{console.log(`[Game] Gate unlocked: ${e.gateId}`)}),this.eventBus.subscribe("ability:unlocked",e=>{console.log(`[Game] Ability unlocked: ${e.abilityId}`)}),this.eventBus.subscribe("player:moved",e=>{})}update(e){this.loaded&&!this.paused&&this.inputState.isPressed("pause")&&this.togglePause()}togglePause(){this.paused=!this.paused,this.paused?(this.eventBus.emit("game:pause"),console.log("[Game] Paused")):(this.eventBus.emit("game:resume"),console.log("[Game] Resumed"))}cleanup(){console.log("[Game] Cleaning up..."),Object.values(this.gameSystems).forEach(e=>{e&&e.cleanup&&e.cleanup()}),this.inputState.reset(),console.log("[Game] Cleanup complete")}}window.addEventListener("DOMContentLoaded",async()=>{console.log("Starting The Memory Syndicate...");const e=document.getElementById("game-canvas");if(!e)return void console.error("Canvas element not found!");const t=new d(e);await t.init();const i=new D(t);await i.init();const s=document.getElementById("loading-screen");s&&s.classList.add("hidden");const n=document.getElementById("debug-overlay");let o=!1;window.addEventListener("keydown",e=>{"F3"===e.key&&(e.preventDefault(),o=!o,n&&n.classList.toggle("visible",o))}),setInterval(()=>{if(!o||!n)return;const e=document.getElementById("debug-fps"),i=document.getElementById("debug-entities"),s=document.getElementById("debug-memory"),a=document.getElementById("debug-frame-time");if(e&&(e.textContent=`FPS: ${t.getFPS()}`),i){const e=t.getEntityManager().getActiveEntityCount();i.textContent=`Entities: ${e}`}if(s&&performance.memory){const e=(performance.memory.usedJSHeapSize/1024/1024).toFixed(1);s.textContent=`Memory: ${e} MB`}if(a){const e=(1e3*t.getDeltaTime()).toFixed(1);a.textContent=`Frame: ${e} ms`}},500),t.start(),console.log("The Memory Syndicate started successfully!"),window.addEventListener("beforeunload",()=>{t.cleanup(),i.cleanup()})});
//# sourceMappingURL=index-D68lWoXR.js.map

{"version":3,"file":"index-ZZ-6MMsL.js","sources":["../../src/engine/events/EventBus.js","../../src/engine/GameLoop.js","../../src/engine/audio/AudioManager.js","../../src/engine/assets/AssetLoader.js","../../src/engine/assets/AssetManager.js","../../src/utils/Logger.js","../../src/engine/Engine.js","../../src/game/config/GameConfig.js","../../src/game/systems/PlayerMovementSystem.js","../../src/game/systems/InvestigationSystem.js","../../src/game/systems/FactionReputationSystem.js","../../src/game/systems/KnowledgeProgressionSystem.js","../../src/game/systems/DialogueSystem.js","../../src/game/systems/CameraFollowSystem.js","../../src/game/components/Transform.js","../../src/game/components/Sprite.js","../../src/game/components/PlayerController.js","../../src/game/components/Collider.js","../../src/game/components/FactionMember.js","../../src/game/components/Evidence.js","../../src/game/components/InteractionZone.js","../../src/game/entities/EvidenceEntity.js","../../src/game/config/Controls.js","../../src/game/Game.js","../../src/game/entities/PlayerEntity.js","../../src/main.js"],"sourcesContent":["/**\n * EventBus - central pub/sub event system for decoupled communication.\n * Enables systems to communicate without direct dependencies.\n *\n * Event naming convention: domain:action (e.g., 'entity:damaged', 'quest:completed')\n * Performance target: <0.1ms per event dispatch, <1ms per frame for 100 events.\n *\n * @class EventBus\n * @example\n * // Subscribe to event\n * eventBus.on('entity:damaged', (data) => {\n *   console.log(`Entity ${data.entityId} took ${data.damage} damage`);\n * });\n *\n * // Emit event\n * eventBus.emit('entity:damaged', { entityId: 5, damage: 10 });\n */\nexport class EventBus {\n  constructor() {\n    this.listeners = new Map(); // eventType -> Array<{callback, context, priority}>\n    this.eventQueue = []; // Deferred events processed at end of frame\n    this.isProcessing = false;\n    this.wildcardListeners = []; // Wildcard subscriptions (e.g., 'entity:*')\n  }\n\n  /**\n   * Subscribes to an event.\n   * @param {string} eventType - Event type (e.g., 'entity:damaged', 'entity:*' for wildcard)\n   * @param {Function} callback - Callback function(data)\n   * @param {object|null} context - Context for callback (this binding)\n   * @param {number} priority - Priority (lower = runs earlier, default 50)\n   * @returns {Function} Unsubscribe function\n   */\n  on(eventType, callback, context = null, priority = 50) {\n    // Handle wildcard subscriptions\n    if (eventType.includes('*')) {\n      const listener = { pattern: eventType, callback, context, priority };\n      this.wildcardListeners.push(listener);\n      this.wildcardListeners.sort((a, b) => a.priority - b.priority);\n\n      return () => {\n        const index = this.wildcardListeners.indexOf(listener);\n        if (index !== -1) {\n          this.wildcardListeners.splice(index, 1);\n        }\n      };\n    }\n\n    // Regular subscription\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n\n    const listener = { callback, context, priority };\n    const listenerArray = this.listeners.get(eventType);\n    listenerArray.push(listener);\n\n    // Sort by priority\n    listenerArray.sort((a, b) => a.priority - b.priority);\n\n    // Return unsubscribe function\n    return () => {\n      const array = this.listeners.get(eventType);\n      if (array) {\n        const index = array.indexOf(listener);\n        if (index !== -1) {\n          array.splice(index, 1);\n        }\n      }\n    };\n  }\n\n  /**\n   * Unsubscribes from an event.\n   * @param {string} eventType - Event type\n   * @param {Function} callback - Callback to remove\n   */\n  off(eventType, callback) {\n    const listeners = this.listeners.get(eventType);\n    if (!listeners) {\n      return;\n    }\n\n    const index = listeners.findIndex((l) => l.callback === callback);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Subscribes to an event for one-time execution.\n   * @param {string} eventType - Event type\n   * @param {Function} callback - Callback function\n   * @param {object|null} context - Context for callback\n   * @param {number} priority - Priority\n   * @returns {Function} Unsubscribe function\n   */\n  once(eventType, callback, context = null, priority = 50) {\n    const unsubscribe = this.on(\n      eventType,\n      (data) => {\n        unsubscribe();\n        callback.call(context, data);\n      },\n      context,\n      priority\n    );\n    return unsubscribe;\n  }\n\n  /**\n   * Emits an event immediately.\n   * @param {string} eventType - Event type\n   * @param {object} data - Event data\n   */\n  emit(eventType, data = {}) {\n    // Call regular listeners\n    const listeners = this.listeners.get(eventType);\n    if (listeners) {\n      for (let i = 0; i < listeners.length; i++) {\n        const listener = listeners[i];\n        try {\n          listener.callback.call(listener.context, data);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventType}:`, error);\n        }\n      }\n    }\n\n    // Call wildcard listeners\n    for (let i = 0; i < this.wildcardListeners.length; i++) {\n      const listener = this.wildcardListeners[i];\n      if (this.matchesPattern(eventType, listener.pattern)) {\n        try {\n          listener.callback.call(listener.context, { eventType, ...data });\n        } catch (error) {\n          console.error(`Error in wildcard handler for ${listener.pattern}:`, error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Queues an event for deferred execution (processed at end of frame).\n   * Use this to avoid mid-frame state inconsistencies.\n   *\n   * @param {string} eventType - Event type\n   * @param {object} data - Event data\n   */\n  enqueue(eventType, data = {}) {\n    this.eventQueue.push({ eventType, data });\n  }\n\n  /**\n   * Processes all queued events.\n   * Call this once at the end of each frame.\n   */\n  processQueue() {\n    if (this.isProcessing) {\n      return;\n    }\n\n    this.isProcessing = true;\n\n    // Make a copy of the queue and clear it\n    const queue = [...this.eventQueue];\n    this.eventQueue = [];\n\n    // Process all queued events\n    for (let i = 0; i < queue.length; i++) {\n      const event = queue[i];\n      this.emit(event.eventType, event.data);\n    }\n\n    this.isProcessing = false;\n  }\n\n  /**\n   * Checks if event type matches wildcard pattern.\n   * @param {string} eventType - Event type (e.g., 'entity:damaged')\n   * @param {string} pattern - Pattern (e.g., 'entity:*')\n   * @returns {boolean} True if matches\n   */\n  matchesPattern(eventType, pattern) {\n    const patternParts = pattern.split(':');\n    const eventParts = eventType.split(':');\n\n    if (patternParts.length !== eventParts.length) {\n      return false;\n    }\n\n    for (let i = 0; i < patternParts.length; i++) {\n      if (patternParts[i] === '*') {\n        continue;\n      }\n      if (patternParts[i] !== eventParts[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Removes all listeners for an event type.\n   * @param {string} eventType - Event type (optional, clears all if not provided)\n   */\n  clear(eventType = null) {\n    if (eventType) {\n      this.listeners.delete(eventType);\n    } else {\n      this.listeners.clear();\n      this.wildcardListeners = [];\n      this.eventQueue = [];\n    }\n  }\n\n  /**\n   * Gets listener count for an event type.\n   * @param {string} eventType - Event type\n   * @returns {number} Listener count\n   */\n  getListenerCount(eventType) {\n    const listeners = this.listeners.get(eventType);\n    return listeners ? listeners.length : 0;\n  }\n\n  /**\n   * Gets all registered event types.\n   * @returns {string[]} Event types\n   */\n  getEventTypes() {\n    return Array.from(this.listeners.keys());\n  }\n\n  /**\n   * Gets total listener count across all events.\n   * @returns {number} Total listener count\n   */\n  getTotalListenerCount() {\n    let count = this.wildcardListeners.length;\n    for (const listeners of this.listeners.values()) {\n      count += listeners.length;\n    }\n    return count;\n  }\n\n  /**\n   * Gets queued event count.\n   * @returns {number} Queued event count\n   */\n  getQueuedEventCount() {\n    return this.eventQueue.length;\n  }\n}\n\n// Global event bus instance\nexport const eventBus = new EventBus();\n","/**\n * GameLoop - Core game loop using requestAnimationFrame.\n * Provides fixed timestep targeting 60 FPS with delta time calculation.\n * Orchestrates system updates with pause/resume support.\n *\n * Performance target: 60 FPS (16.6ms frame budget).\n *\n * @class GameLoop\n */\nexport class GameLoop {\n  /**\n   * Creates a new game loop.\n   * @param {SystemManager} systemManager - System manager to update each frame\n   * @param {Object} [options={}] - Configuration options\n   * @param {number} [options.targetFPS=60] - Target frames per second\n   * @param {Function} [options.onFrame] - Optional callback called each frame with metrics\n   */\n  constructor(systemManager, options = {}) {\n    this.systemManager = systemManager;\n    this.targetFPS = options.targetFPS || 60;\n    this.onFrame = options.onFrame || null;\n\n    // Calculate target frame time in milliseconds\n    this.targetFrameTime = 1000 / this.targetFPS;\n\n    // Loop state\n    this.running = false;\n    this.paused = false;\n\n    // Time tracking\n    this.lastFrameTime = 0;\n    this.deltaTime = 0;\n\n    // Frame metrics\n    this.frameCount = 0;\n    this.fps = 0;\n    this.fpsFrameCount = 0;\n    this.fpsUpdateTime = 0;\n\n    // Frame timing statistics\n    this.frameTime = 0;\n    this.minFrameTime = Infinity;\n    this.maxFrameTime = 0;\n    this.totalFrameTime = 0;\n\n    // RequestAnimationFrame ID for cleanup\n    this.rafId = null;\n  }\n\n  /**\n   * Starts the game loop.\n   * Initializes timing and begins frame updates.\n   */\n  start() {\n    if (this.running) {\n      console.warn('GameLoop: Already running');\n      return;\n    }\n\n    this.running = true;\n    this.paused = false;\n    this.lastFrameTime = performance.now();\n    this.fpsUpdateTime = this.lastFrameTime;\n    this.frameCount = 0;\n    this.fpsFrameCount = 0;\n\n    // Start the loop\n    this.rafId = requestAnimationFrame((time) => this._loop(time));\n  }\n\n  /**\n   * Stops the game loop.\n   * Cancels the current frame request.\n   */\n  stop() {\n    if (!this.running) {\n      return;\n    }\n\n    this.running = false;\n    this.paused = false;\n\n    if (this.rafId !== null) {\n      cancelAnimationFrame(this.rafId);\n      this.rafId = null;\n    }\n  }\n\n  /**\n   * Pauses the game loop.\n   * Systems will not update while paused, but the loop continues running.\n   * Frame timing continues to track but delta time is not accumulated.\n   */\n  pause() {\n    if (!this.running) {\n      console.warn('GameLoop: Cannot pause - not running');\n      return;\n    }\n\n    if (this.paused) {\n      return;\n    }\n\n    this.paused = true;\n  }\n\n  /**\n   * Resumes the game loop from pause.\n   * Resets timing to prevent large delta time spike.\n   */\n  resume() {\n    if (!this.running) {\n      console.warn('GameLoop: Cannot resume - not running');\n      return;\n    }\n\n    if (!this.paused) {\n      return;\n    }\n\n    this.paused = false;\n    // Reset last frame time to prevent delta time spike\n    this.lastFrameTime = performance.now();\n  }\n\n  /**\n   * Internal loop method called by requestAnimationFrame.\n   * Calculates timing, updates systems, and tracks metrics.\n   *\n   * @private\n   * @param {number} currentTime - Current timestamp from requestAnimationFrame\n   */\n  _loop(currentTime) {\n    if (!this.running) {\n      return;\n    }\n\n    // Calculate frame time in milliseconds\n    this.frameTime = currentTime - this.lastFrameTime;\n\n    // Calculate delta time in seconds\n    this.deltaTime = this.frameTime / 1000;\n\n    // Update timing for next frame\n    this.lastFrameTime = currentTime;\n\n    // Update frame count\n    this.frameCount++;\n    this.fpsFrameCount++;\n\n    // Update frame timing statistics (only for active frames)\n    if (!this.paused) {\n      this.totalFrameTime += this.frameTime;\n      this.minFrameTime = Math.min(this.minFrameTime, this.frameTime);\n      this.maxFrameTime = Math.max(this.maxFrameTime, this.frameTime);\n    }\n\n    // Update FPS counter every second\n    if (currentTime - this.fpsUpdateTime >= 1000) {\n      this.fps = this.fpsFrameCount;\n      this.fpsFrameCount = 0;\n      this.fpsUpdateTime = currentTime;\n    }\n\n    // Update systems if not paused\n    if (!this.paused) {\n      this.systemManager.update(this.deltaTime);\n    }\n\n    // Call frame callback if provided\n    if (this.onFrame) {\n      this.onFrame({\n        frameCount: this.frameCount,\n        fps: this.fps,\n        deltaTime: this.deltaTime,\n        frameTime: this.frameTime,\n        paused: this.paused,\n      });\n    }\n\n    // Schedule next frame\n    this.rafId = requestAnimationFrame((time) => this._loop(time));\n  }\n\n  /**\n   * Gets current frames per second.\n   * @returns {number} Current FPS\n   */\n  getFPS() {\n    return this.fps;\n  }\n\n  /**\n   * Gets delta time for current frame.\n   * @returns {number} Delta time in seconds\n   */\n  getDeltaTime() {\n    return this.deltaTime;\n  }\n\n  /**\n   * Gets total number of frames since start.\n   * @returns {number} Frame count\n   */\n  getFrameCount() {\n    return this.frameCount;\n  }\n\n  /**\n   * Gets current frame time in milliseconds.\n   * @returns {number} Frame time in ms\n   */\n  getFrameTime() {\n    return this.frameTime;\n  }\n\n  /**\n   * Gets average frame time in milliseconds.\n   * @returns {number} Average frame time\n   */\n  getAverageFrameTime() {\n    if (this.frameCount === 0) {\n      return 0;\n    }\n    return this.totalFrameTime / this.frameCount;\n  }\n\n  /**\n   * Gets minimum frame time recorded.\n   * @returns {number} Minimum frame time in ms\n   */\n  getMinFrameTime() {\n    return this.minFrameTime === Infinity ? 0 : this.minFrameTime;\n  }\n\n  /**\n   * Gets maximum frame time recorded.\n   * @returns {number} Maximum frame time in ms\n   */\n  getMaxFrameTime() {\n    return this.maxFrameTime;\n  }\n\n  /**\n   * Checks if loop is running.\n   * @returns {boolean} True if running\n   */\n  isRunning() {\n    return this.running;\n  }\n\n  /**\n   * Checks if loop is paused.\n   * @returns {boolean} True if paused\n   */\n  isPaused() {\n    return this.paused;\n  }\n\n  /**\n   * Resets frame timing statistics.\n   * Useful for benchmarking specific sections.\n   */\n  resetStats() {\n    this.minFrameTime = Infinity;\n    this.maxFrameTime = 0;\n    this.totalFrameTime = 0;\n    this.frameCount = 0;\n    this.fpsFrameCount = 0;\n  }\n}\n","/**\n * AudioManager - Web Audio API wrapper for music and SFX.\n * TODO: Implement adaptive music and 3D positional audio.\n */\nexport class AudioManager {\n  constructor() {\n    this.audioContext = null;\n    this.masterGain = null;\n    this.sounds = new Map();\n    this.music = new Map();\n    this.initialized = false;\n  }\n\n  async init() {\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.masterGain = this.audioContext.createGain();\n    this.masterGain.connect(this.audioContext.destination);\n    this.initialized = true;\n  }\n\n  playSFX(soundId, volume = 1.0) {\n    if (!this.initialized) {\n      return;\n    }\n    // TODO: Implement SFX playback with object pool\n  }\n\n  playMusic(trackId) {\n    if (!this.initialized) {\n      return;\n    }\n    // TODO: Implement music playback with looping\n  }\n\n  setMasterVolume(volume) {\n    if (this.masterGain) {\n      this.masterGain.gain.value = Math.max(0, Math.min(1, volume));\n    }\n  }\n\n  pause() {\n    if (this.audioContext) {\n      this.audioContext.suspend();\n    }\n  }\n\n  resume() {\n    if (this.audioContext) {\n      this.audioContext.resume();\n    }\n  }\n}\n","/**\n * AssetLoader - Promise-based asset loading with retry logic.\n * Handles loading of images, JSON, and audio files with automatic retries.\n *\n * Performance targets:\n * - Max 3 retry attempts on failure\n * - Progress tracking for batch operations\n * - Graceful error handling with descriptive messages\n *\n * @class AssetLoader\n * @example\n * const loader = new AssetLoader();\n *\n * // Load single image\n * const image = await loader.loadImage('assets/player.png');\n *\n * // Load with progress tracking\n * loader.on('progress', (data) => console.log(`${data.loaded}/${data.total}`));\n * const assets = await loader.loadBatch([...]);\n */\nexport class AssetLoader {\n  /**\n   * Creates a new AssetLoader.\n   * @param {object} options - Configuration options\n   * @param {number} options.maxRetries - Maximum retry attempts (default: 3)\n   * @param {number} options.retryDelay - Delay between retries in ms (default: 1000)\n   * @param {number} options.timeout - Load timeout in ms (default: 30000)\n   */\n  constructor(options = {}) {\n    this.maxRetries = options.maxRetries ?? 3;\n    this.retryDelay = options.retryDelay ?? 1000;\n    this.timeout = options.timeout ?? 30000;\n    this.progressCallbacks = [];\n    this.loadedCount = 0;\n    this.totalCount = 0;\n  }\n\n  /**\n   * Registers a progress callback.\n   * @param {Function} callback - Progress callback(loaded, total, percentage)\n   * @returns {Function} Unsubscribe function\n   */\n  onProgress(callback) {\n    this.progressCallbacks.push(callback);\n    return () => {\n      const index = this.progressCallbacks.indexOf(callback);\n      if (index !== -1) {\n        this.progressCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * Emits progress update to all callbacks.\n   * @private\n   */\n  _emitProgress() {\n    const percentage = this.totalCount > 0\n      ? (this.loadedCount / this.totalCount) * 100\n      : 0;\n\n    for (let i = 0; i < this.progressCallbacks.length; i++) {\n      try {\n        this.progressCallbacks[i](this.loadedCount, this.totalCount, percentage);\n      } catch (error) {\n        console.error('Error in progress callback:', error);\n      }\n    }\n  }\n\n  /**\n   * Loads an image asset.\n   * @param {string} url - Image URL\n   * @param {number} retryCount - Current retry attempt (internal)\n   * @returns {Promise<HTMLImageElement>} Loaded image\n   * @throws {Error} If loading fails after max retries\n   */\n  async loadImage(url, retryCount = 0) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      let timedOut = false;\n\n      // Set up timeout\n      const timeoutId = setTimeout(() => {\n        timedOut = true;\n        reject(new Error(`Image load timeout: ${url}`));\n      }, this.timeout);\n\n      img.onload = () => {\n        clearTimeout(timeoutId);\n        if (!timedOut) {\n          resolve(img);\n        }\n      };\n\n      img.onerror = async () => {\n        clearTimeout(timeoutId);\n        if (!timedOut) {\n          if (retryCount < this.maxRetries) {\n            console.warn(`Retry ${retryCount + 1}/${this.maxRetries} for image: ${url}`);\n            await this._delay(this.retryDelay);\n            try {\n              const retryResult = await this.loadImage(url, retryCount + 1);\n              resolve(retryResult);\n            } catch (error) {\n              reject(error);\n            }\n          } else {\n            reject(new Error(`Failed to load image after ${this.maxRetries} attempts: ${url}`));\n          }\n        }\n      };\n\n      // Start loading\n      img.src = url;\n    });\n  }\n\n  /**\n   * Loads a JSON data file.\n   * @param {string} url - JSON file URL\n   * @param {number} retryCount - Current retry attempt (internal)\n   * @returns {Promise<object>} Parsed JSON data\n   * @throws {Error} If loading or parsing fails after max retries\n   */\n  async loadJSON(url, retryCount = 0) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n\n      const response = await fetch(url, {\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data;\n\n    } catch (error) {\n      if (retryCount < this.maxRetries) {\n        console.warn(`Retry ${retryCount + 1}/${this.maxRetries} for JSON: ${url}`);\n        await this._delay(this.retryDelay);\n        return this.loadJSON(url, retryCount + 1);\n      } else {\n        throw new Error(`Failed to load JSON after ${this.maxRetries} attempts: ${url} - ${error.message}`);\n      }\n    }\n  }\n\n  /**\n   * Loads an audio file.\n   * @param {string} url - Audio file URL\n   * @param {number} retryCount - Current retry attempt (internal)\n   * @returns {Promise<HTMLAudioElement>} Loaded audio element\n   * @throws {Error} If loading fails after max retries\n   */\n  async loadAudio(url, retryCount = 0) {\n    return new Promise((resolve, reject) => {\n      const audio = new Audio();\n      let timedOut = false;\n\n      // Set up timeout\n      const timeoutId = setTimeout(() => {\n        timedOut = true;\n        reject(new Error(`Audio load timeout: ${url}`));\n      }, this.timeout);\n\n      // Use canplaythrough for better reliability\n      audio.addEventListener('canplaythrough', () => {\n        clearTimeout(timeoutId);\n        if (!timedOut) {\n          resolve(audio);\n        }\n      }, { once: true });\n\n      audio.addEventListener('error', async () => {\n        clearTimeout(timeoutId);\n        if (!timedOut) {\n          if (retryCount < this.maxRetries) {\n            console.warn(`Retry ${retryCount + 1}/${this.maxRetries} for audio: ${url}`);\n            await this._delay(this.retryDelay);\n            try {\n              const retryResult = await this.loadAudio(url, retryCount + 1);\n              resolve(retryResult);\n            } catch (error) {\n              reject(error);\n            }\n          } else {\n            reject(new Error(`Failed to load audio after ${this.maxRetries} attempts: ${url}`));\n          }\n        }\n      }, { once: true });\n\n      // Start loading\n      audio.src = url;\n      audio.load();\n    });\n  }\n\n  /**\n   * Loads multiple assets with progress tracking.\n   * @param {Array<{url: string, type: string}>} assets - Assets to load\n   * @returns {Promise<Map<string, any>>} Map of url -> loaded asset\n   */\n  async loadBatch(assets) {\n    this.loadedCount = 0;\n    this.totalCount = assets.length;\n    this._emitProgress();\n\n    const results = new Map();\n    const promises = [];\n\n    for (let i = 0; i < assets.length; i++) {\n      const asset = assets[i];\n      const promise = this._loadAssetByType(asset.url, asset.type)\n        .then((data) => {\n          results.set(asset.url, data);\n          this.loadedCount++;\n          this._emitProgress();\n          return { url: asset.url, success: true, data };\n        })\n        .catch((error) => {\n          console.error(`Failed to load asset: ${asset.url}`, error);\n          this.loadedCount++;\n          this._emitProgress();\n          return { url: asset.url, success: false, error };\n        });\n\n      promises.push(promise);\n    }\n\n    await Promise.all(promises);\n    return results;\n  }\n\n  /**\n   * Loads an asset based on its type.\n   * @private\n   * @param {string} url - Asset URL\n   * @param {string} type - Asset type ('image', 'json', 'audio')\n   * @returns {Promise<any>} Loaded asset\n   */\n  async _loadAssetByType(url, type) {\n    switch (type.toLowerCase()) {\n      case 'image':\n      case 'img':\n      case 'png':\n      case 'jpg':\n      case 'jpeg':\n      case 'gif':\n      case 'webp':\n        return this.loadImage(url);\n\n      case 'json':\n      case 'data':\n        return this.loadJSON(url);\n\n      case 'audio':\n      case 'sound':\n      case 'mp3':\n      case 'ogg':\n      case 'wav':\n      case 'webm':\n        return this.loadAudio(url);\n\n      default:\n        throw new Error(`Unknown asset type: ${type}`);\n    }\n  }\n\n  /**\n   * Delays execution for specified milliseconds.\n   * @private\n   * @param {number} ms - Milliseconds to delay\n   * @returns {Promise<void>}\n   */\n  _delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Resets progress tracking.\n   */\n  resetProgress() {\n    this.loadedCount = 0;\n    this.totalCount = 0;\n  }\n\n  /**\n   * Gets current progress.\n   * @returns {{loaded: number, total: number, percentage: number}}\n   */\n  getProgress() {\n    const percentage = this.totalCount > 0\n      ? (this.loadedCount / this.totalCount) * 100\n      : 0;\n\n    return {\n      loaded: this.loadedCount,\n      total: this.totalCount,\n      percentage\n    };\n  }\n}\n","import { AssetLoader } from './AssetLoader.js';\nimport { eventBus } from '../events/EventBus.js';\n\n/**\n * Asset priority tiers for loading optimization.\n * @enum {string}\n */\nexport const AssetPriority = {\n  CRITICAL: 'critical', // Core UI, player sprites, essential SFX (<3s)\n  DISTRICT: 'district', // District-specific assets (<1s per district)\n  OPTIONAL: 'optional'  // Particles, ambient sounds (background load)\n};\n\n/**\n * AssetManager - Manages asset lifecycle with lazy loading and reference counting.\n * Performance targets: <3s initial load, <1s per district.\n *\n * Features:\n * - Reference counting for automatic cleanup\n * - Priority-based loading queues\n * - Lazy loading on demand\n * - Asset grouping and batch preloading\n * - Progress tracking per priority tier\n * - EventBus integration for loading events\n *\n * @class AssetManager\n * @example\n * const manager = new AssetManager();\n * await manager.loadManifest('assets/manifest.json');\n *\n * // Load critical assets first\n * await manager.preloadGroup('ui', AssetPriority.CRITICAL);\n *\n * // Lazy load on demand\n * const sprite = await manager.getAsset('player-sprite');\n *\n * // Release when done\n * manager.releaseAsset('player-sprite');\n */\nexport class AssetManager {\n  /**\n   * Creates a new AssetManager.\n   * @param {object} options - Configuration options\n   * @param {AssetLoader} options.loader - Custom asset loader (optional)\n   */\n  constructor(options = {}) {\n    this.loader = options.loader || new AssetLoader();\n    this.assets = new Map(); // assetId -> { data, refCount, type, group, priority }\n    this.loading = new Map(); // assetId -> Promise\n    this.manifest = null; // Asset manifest data\n    this.groups = new Map(); // groupName -> Set<assetId>\n    this.priorityQueues = {\n      [AssetPriority.CRITICAL]: [],\n      [AssetPriority.DISTRICT]: [],\n      [AssetPriority.OPTIONAL]: []\n    };\n    this.loadingStats = {\n      [AssetPriority.CRITICAL]: { loaded: 0, total: 0 },\n      [AssetPriority.DISTRICT]: { loaded: 0, total: 0 },\n      [AssetPriority.OPTIONAL]: { loaded: 0, total: 0 }\n    };\n  }\n\n  /**\n   * Loads asset manifest file.\n   * Manifest format: { assets: [{ id, url, type, group, priority }], groups: {...} }\n   * @param {string} url - Manifest URL\n   * @returns {Promise<void>}\n   */\n  async loadManifest(url) {\n    try {\n      this.manifest = await this.loader.loadJSON(url);\n      this._buildGroups();\n      eventBus.emit('asset:manifest-loaded', { manifest: this.manifest });\n    } catch (error) {\n      console.error('Failed to load manifest:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Builds group registry from manifest.\n   * @private\n   */\n  _buildGroups() {\n    if (!this.manifest || !this.manifest.assets) {\n      return;\n    }\n\n    this.groups.clear();\n\n    for (let i = 0; i < this.manifest.assets.length; i++) {\n      const asset = this.manifest.assets[i];\n      if (asset.group) {\n        if (!this.groups.has(asset.group)) {\n          this.groups.set(asset.group, new Set());\n        }\n        this.groups.get(asset.group).add(asset.id);\n      }\n    }\n  }\n\n  /**\n   * Loads an asset by ID with reference counting.\n   * If already loaded, increments reference count.\n   * If loading, returns existing promise.\n   * Otherwise, starts new load.\n   *\n   * @param {string} assetId - Asset identifier\n   * @returns {Promise<any>} Loaded asset data\n   */\n  async loadAsset(assetId) {\n    // Already loaded - increment reference\n    if (this.assets.has(assetId)) {\n      const asset = this.assets.get(assetId);\n      asset.refCount++;\n      eventBus.emit('asset:reference-acquired', { assetId, refCount: asset.refCount });\n      return asset.data;\n    }\n\n    // Currently loading - return existing promise\n    if (this.loading.has(assetId)) {\n      return this.loading.get(assetId);\n    }\n\n    // Start new load\n    const promise = this._loadAssetData(assetId);\n    this.loading.set(assetId, promise);\n\n    try {\n      const data = await promise;\n      this.loading.delete(assetId);\n\n      const assetInfo = this._getAssetInfo(assetId);\n      this.assets.set(assetId, {\n        data,\n        refCount: 1,\n        type: assetInfo.type,\n        group: assetInfo.group,\n        priority: assetInfo.priority\n      });\n\n      eventBus.emit('asset:loaded', { assetId, type: assetInfo.type });\n      return data;\n\n    } catch (error) {\n      this.loading.delete(assetId);\n      eventBus.emit('asset:failed', { assetId, error: error.message });\n      throw error;\n    }\n  }\n\n  /**\n   * Loads asset data from disk.\n   * @private\n   * @param {string} assetId - Asset identifier\n   * @returns {Promise<any>} Asset data\n   */\n  async _loadAssetData(assetId) {\n    const assetInfo = this._getAssetInfo(assetId);\n    if (!assetInfo) {\n      throw new Error(`Asset not found in manifest: ${assetId}`);\n    }\n\n    eventBus.emit('asset:loading', { assetId, url: assetInfo.url, type: assetInfo.type });\n\n    return await this.loader._loadAssetByType(assetInfo.url, assetInfo.type);\n  }\n\n  /**\n   * Gets asset info from manifest.\n   * @private\n   * @param {string} assetId - Asset identifier\n   * @returns {object|null} Asset info\n   */\n  _getAssetInfo(assetId) {\n    if (!this.manifest || !this.manifest.assets) {\n      return null;\n    }\n\n    for (let i = 0; i < this.manifest.assets.length; i++) {\n      if (this.manifest.assets[i].id === assetId) {\n        return this.manifest.assets[i];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets a loaded asset without loading it.\n   * @param {string} assetId - Asset identifier\n   * @returns {any|null} Asset data or null if not loaded\n   */\n  getAsset(assetId) {\n    const asset = this.assets.get(assetId);\n    return asset ? asset.data : null;\n  }\n\n  /**\n   * Releases an asset reference, unloading if count reaches 0.\n   * @param {string} assetId - Asset identifier\n   */\n  releaseAsset(assetId) {\n    const asset = this.assets.get(assetId);\n    if (!asset) {\n      return;\n    }\n\n    asset.refCount--;\n    eventBus.emit('asset:reference-released', { assetId, refCount: asset.refCount });\n\n    if (asset.refCount <= 0) {\n      this._unloadAsset(assetId);\n    }\n  }\n\n  /**\n   * Unloads an asset and frees memory.\n   * @private\n   * @param {string} assetId - Asset identifier\n   */\n  _unloadAsset(assetId) {\n    const asset = this.assets.get(assetId);\n    if (!asset) {\n      return;\n    }\n\n    // Clean up asset data\n    if (asset.data) {\n      // For images, clear src to free memory\n      if (asset.data instanceof HTMLImageElement) {\n        asset.data.src = '';\n      }\n      // For audio, pause and clear\n      if (asset.data instanceof HTMLAudioElement) {\n        asset.data.pause();\n        asset.data.src = '';\n      }\n    }\n\n    this.assets.delete(assetId);\n    eventBus.emit('asset:unloaded', { assetId });\n  }\n\n  /**\n   * Preloads all assets in a group with specified priority.\n   * @param {string} groupName - Group name\n   * @param {AssetPriority} priority - Loading priority (optional)\n   * @returns {Promise<Map<string, any>>} Map of assetId -> loaded data\n   */\n  async preloadGroup(groupName, priority = null) {\n    const assetIds = this.groups.get(groupName);\n    if (!assetIds || assetIds.size === 0) {\n      console.warn(`Group not found or empty: ${groupName}`);\n      return new Map();\n    }\n\n    const assets = Array.from(assetIds).map(id => {\n      const info = this._getAssetInfo(id);\n      return {\n        id,\n        url: info.url,\n        type: info.type,\n        priority: priority || info.priority\n      };\n    });\n\n    return this.preloadAssets(assets);\n  }\n\n  /**\n   * Preloads multiple assets with priority-based loading.\n   * @param {Array<{id, url, type, priority}>} assets - Assets to preload\n   * @returns {Promise<Map<string, any>>} Map of assetId -> loaded data\n   */\n  async preloadAssets(assets) {\n    // Sort by priority\n    const critical = [];\n    const district = [];\n    const optional = [];\n\n    for (let i = 0; i < assets.length; i++) {\n      const asset = assets[i];\n      switch (asset.priority) {\n        case AssetPriority.CRITICAL:\n          critical.push(asset);\n          break;\n        case AssetPriority.DISTRICT:\n          district.push(asset);\n          break;\n        case AssetPriority.OPTIONAL:\n          optional.push(asset);\n          break;\n        default:\n          optional.push(asset);\n      }\n    }\n\n    const results = new Map();\n\n    // Load critical assets first (sequential for priority)\n    if (critical.length > 0) {\n      eventBus.emit('asset:priority-loading', {\n        priority: AssetPriority.CRITICAL,\n        count: critical.length\n      });\n      const criticalResults = await this._loadPriorityBatch(critical, AssetPriority.CRITICAL);\n      for (const [id, data] of criticalResults) {\n        results.set(id, data);\n      }\n    }\n\n    // Load district assets (parallel within tier)\n    if (district.length > 0) {\n      eventBus.emit('asset:priority-loading', {\n        priority: AssetPriority.DISTRICT,\n        count: district.length\n      });\n      const districtResults = await this._loadPriorityBatch(district, AssetPriority.DISTRICT);\n      for (const [id, data] of districtResults) {\n        results.set(id, data);\n      }\n    }\n\n    // Load optional assets in background (don't block)\n    if (optional.length > 0) {\n      eventBus.emit('asset:priority-loading', {\n        priority: AssetPriority.OPTIONAL,\n        count: optional.length\n      });\n      // Fire and forget for optional assets\n      this._loadPriorityBatch(optional, AssetPriority.OPTIONAL).catch(error => {\n        console.warn('Optional asset loading failed:', error);\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Loads a batch of assets with progress tracking.\n   * @private\n   * @param {Array<{id, url, type}>} assets - Assets to load\n   * @param {AssetPriority} priority - Priority tier\n   * @returns {Promise<Map<string, any>>} Loaded assets\n   */\n  async _loadPriorityBatch(assets, priority) {\n    this.loadingStats[priority].loaded = 0;\n    this.loadingStats[priority].total = assets.length;\n\n    const results = new Map();\n    const promises = [];\n\n    for (let i = 0; i < assets.length; i++) {\n      const asset = assets[i];\n      const promise = this.loadAsset(asset.id)\n        .then(data => {\n          results.set(asset.id, data);\n          this.loadingStats[priority].loaded++;\n          this._emitPriorityProgress(priority);\n        })\n        .catch(error => {\n          console.error(`Failed to load ${priority} asset ${asset.id}:`, error);\n          this.loadingStats[priority].loaded++;\n          this._emitPriorityProgress(priority);\n        });\n\n      promises.push(promise);\n    }\n\n    await Promise.all(promises);\n    return results;\n  }\n\n  /**\n   * Emits progress event for a priority tier.\n   * @private\n   * @param {AssetPriority} priority - Priority tier\n   */\n  _emitPriorityProgress(priority) {\n    const stats = this.loadingStats[priority];\n    const percentage = stats.total > 0 ? (stats.loaded / stats.total) * 100 : 0;\n\n    eventBus.emit('asset:progress', {\n      priority,\n      loaded: stats.loaded,\n      total: stats.total,\n      percentage\n    });\n  }\n\n  /**\n   * Unloads all assets in a group.\n   * @param {string} groupName - Group name\n   */\n  unloadGroup(groupName) {\n    const assetIds = this.groups.get(groupName);\n    if (!assetIds) {\n      return;\n    }\n\n    for (const assetId of assetIds) {\n      const asset = this.assets.get(assetId);\n      if (asset) {\n        // Force unload regardless of ref count\n        asset.refCount = 0;\n        this._unloadAsset(assetId);\n      }\n    }\n\n    eventBus.emit('asset:group-unloaded', { groupName });\n  }\n\n  /**\n   * Unloads all unused assets (ref count = 0).\n   * Useful for memory cleanup between levels.\n   */\n  unloadUnused() {\n    const toUnload = [];\n\n    for (const [assetId, asset] of this.assets) {\n      if (asset.refCount <= 0) {\n        toUnload.push(assetId);\n      }\n    }\n\n    for (let i = 0; i < toUnload.length; i++) {\n      this._unloadAsset(toUnload[i]);\n    }\n\n    eventBus.emit('asset:cleanup', { unloaded: toUnload.length });\n  }\n\n  /**\n   * Gets loading statistics for a priority tier.\n   * @param {AssetPriority} priority - Priority tier\n   * @returns {{loaded: number, total: number, percentage: number}}\n   */\n  getLoadingStats(priority) {\n    const stats = this.loadingStats[priority];\n    const percentage = stats.total > 0 ? (stats.loaded / stats.total) * 100 : 0;\n\n    return {\n      loaded: stats.loaded,\n      total: stats.total,\n      percentage\n    };\n  }\n\n  /**\n   * Gets overall asset statistics.\n   * @returns {{loaded: number, loading: number, groups: number, memory: number}}\n   */\n  getStats() {\n    return {\n      loaded: this.assets.size,\n      loading: this.loading.size,\n      groups: this.groups.size,\n      memory: this._estimateMemoryUsage()\n    };\n  }\n\n  /**\n   * Estimates memory usage in bytes (rough approximation).\n   * @private\n   * @returns {number} Estimated bytes\n   */\n  _estimateMemoryUsage() {\n    let bytes = 0;\n\n    for (const asset of this.assets.values()) {\n      if (asset.data instanceof HTMLImageElement) {\n        // Rough estimate: width * height * 4 bytes per pixel\n        bytes += asset.data.width * asset.data.height * 4;\n      } else if (typeof asset.data === 'object') {\n        // Rough estimate for JSON: stringify length * 2\n        bytes += JSON.stringify(asset.data).length * 2;\n      }\n    }\n\n    return bytes;\n  }\n\n  /**\n   * Clears all assets and resets manager state.\n   */\n  clear() {\n    // Unload all assets\n    for (const assetId of this.assets.keys()) {\n      this._unloadAsset(assetId);\n    }\n\n    this.assets.clear();\n    this.loading.clear();\n    this.groups.clear();\n    this.manifest = null;\n\n    // Reset stats\n    for (const priority in this.loadingStats) {\n      this.loadingStats[priority].loaded = 0;\n      this.loadingStats[priority].total = 0;\n    }\n\n    eventBus.emit('asset:cleared');\n  }\n}\n","/**\n * Logger - debug logging utility with log levels and formatting.\n * Provides structured logging with timestamps and context.\n *\n * @class Logger\n */\nexport class Logger {\n  static LogLevel = {\n    DEBUG: 0,\n    INFO: 1,\n    WARN: 2,\n    ERROR: 3,\n    NONE: 4,\n  };\n\n  /**\n   * Creates a new logger instance.\n   * @param {string} context - Logger context name (e.g., 'Engine', 'Renderer')\n   * @param {number} level - Minimum log level to display\n   */\n  constructor(context = 'Global', level = Logger.LogLevel.INFO) {\n    this.context = context;\n    this.level = level;\n    this.logs = []; // Store logs for debugging\n    this.maxLogs = 100; // Max stored logs\n  }\n\n  /**\n   * Sets the logging level.\n   * @param {number} level - Log level\n   */\n  setLevel(level) {\n    this.level = level;\n  }\n\n  /**\n   * Gets timestamp string.\n   * @returns {string} Formatted timestamp\n   */\n  getTimestamp() {\n    const now = new Date();\n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    const seconds = String(now.getSeconds()).padStart(2, '0');\n    const ms = String(now.getMilliseconds()).padStart(3, '0');\n    return `${hours}:${minutes}:${seconds}.${ms}`;\n  }\n\n  /**\n   * Formats log message.\n   * @param {string} level - Log level name\n   * @param {string} message - Log message\n   * @returns {string} Formatted log message\n   */\n  format(level, message) {\n    return `[${this.getTimestamp()}] [${level}] [${this.context}] ${message}`;\n  }\n\n  /**\n   * Stores log entry.\n   * @param {string} level - Log level\n   * @param {string} message - Log message\n   */\n  store(level, message) {\n    this.logs.push({\n      timestamp: Date.now(),\n      level,\n      context: this.context,\n      message,\n    });\n\n    // Trim logs if exceeds max\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n  }\n\n  /**\n   * Logs debug message.\n   * @param {...any} args - Arguments to log\n   */\n  debug(...args) {\n    if (this.level <= Logger.LogLevel.DEBUG) {\n      const message = args.join(' ');\n      console.log(this.format('DEBUG', message));\n      this.store('DEBUG', message);\n    }\n  }\n\n  /**\n   * Logs info message.\n   * @param {...any} args - Arguments to log\n   */\n  info(...args) {\n    if (this.level <= Logger.LogLevel.INFO) {\n      const message = args.join(' ');\n      console.log(this.format('INFO', message));\n      this.store('INFO', message);\n    }\n  }\n\n  /**\n   * Logs warning message.\n   * @param {...any} args - Arguments to log\n   */\n  warn(...args) {\n    if (this.level <= Logger.LogLevel.WARN) {\n      const message = args.join(' ');\n      console.warn(this.format('WARN', message));\n      this.store('WARN', message);\n    }\n  }\n\n  /**\n   * Logs error message.\n   * @param {...any} args - Arguments to log\n   */\n  error(...args) {\n    if (this.level <= Logger.LogLevel.ERROR) {\n      const message = args.join(' ');\n      console.error(this.format('ERROR', message));\n      this.store('ERROR', message);\n    }\n  }\n\n  /**\n   * Gets stored logs.\n   * @returns {Array} Log entries\n   */\n  getLogs() {\n    return this.logs;\n  }\n\n  /**\n   * Clears stored logs.\n   */\n  clearLogs() {\n    this.logs = [];\n  }\n\n  /**\n   * Exports logs as JSON string.\n   * @returns {string} JSON string of logs\n   */\n  exportLogs() {\n    return JSON.stringify(this.logs, null, 2);\n  }\n}\n\n// Global logger instance\nexport const logger = new Logger('Engine', Logger.LogLevel.INFO);\n","/**\n * Engine - main game engine coordinator.\n * Orchestrates ECS, rendering, physics, audio, and asset management.\n * Performance target: 60 FPS (16ms frame budget).\n */\nimport { EntityManager } from './ecs/EntityManager.js';\nimport { ComponentRegistry } from './ecs/ComponentRegistry.js';\nimport { SystemManager } from './ecs/SystemManager.js';\nimport { EventBus } from './events/EventBus.js';\nimport { GameLoop } from './GameLoop.js';\nimport { Renderer } from './renderer/Renderer.js';\nimport { AudioManager } from './audio/AudioManager.js';\nimport { AssetManager } from './assets/AssetManager.js';\nimport { Logger } from '../utils/Logger.js';\n\nexport class Engine {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.logger = new Logger('Engine', Logger.LogLevel.INFO);\n\n    // Initialize core systems\n    this.eventBus = new EventBus();\n    this.entityManager = new EntityManager();\n    this.componentRegistry = new ComponentRegistry(this.entityManager);\n    this.systemManager = new SystemManager(\n      this.entityManager,\n      this.componentRegistry,\n      this.eventBus\n    );\n\n    // Initialize game loop with frame callback\n    this.gameLoop = new GameLoop(this.systemManager, {\n      targetFPS: 60,\n      onFrame: (metrics) => this._onFrame(metrics),\n    });\n\n    // Initialize subsystems\n    this.renderer = new Renderer(canvas);\n    this.audioManager = new AudioManager();\n    this.assetManager = new AssetManager();\n\n    this.logger.info('Engine initialized');\n  }\n\n  async init() {\n    this.logger.info('Initializing engine...');\n\n    // Initialize audio (requires user gesture)\n    await this.audioManager.init();\n\n    // Initialize systems\n    this.systemManager.init();\n\n    this.logger.info('Engine ready');\n  }\n\n  registerSystem(system, name) {\n    this.systemManager.registerSystem(system, name);\n    this.logger.debug(`Registered system: ${name}`);\n  }\n\n  start() {\n    if (this.gameLoop.isRunning()) {\n      this.logger.warn('Engine already running');\n      return;\n    }\n\n    this.logger.info('Engine started');\n    this.gameLoop.start();\n  }\n\n  stop() {\n    this.logger.info('Engine stopped');\n    this.gameLoop.stop();\n  }\n\n  pause() {\n    this.logger.info('Engine paused');\n    this.gameLoop.pause();\n  }\n\n  resume() {\n    this.logger.info('Engine resumed');\n    this.gameLoop.resume();\n  }\n\n  /**\n   * Called each frame by GameLoop.\n   * Handles rendering and event processing.\n   * @private\n   * @param {Object} metrics - Frame timing metrics\n   */\n  _onFrame(metrics) {\n    // Render (happens even when paused)\n    this.renderer.render(this.componentRegistry);\n\n    // Process event queue\n    this.eventBus.processQueue();\n  }\n\n  getEntityManager() {\n    return this.entityManager;\n  }\n\n  getComponentRegistry() {\n    return this.componentRegistry;\n  }\n\n  getSystemManager() {\n    return this.systemManager;\n  }\n\n  getEventBus() {\n    return this.eventBus;\n  }\n\n  getRenderer() {\n    return this.renderer;\n  }\n\n  getAudioManager() {\n    return this.audioManager;\n  }\n\n  getAssetManager() {\n    return this.assetManager;\n  }\n\n  getFPS() {\n    return this.gameLoop.getFPS();\n  }\n\n  getDeltaTime() {\n    return this.gameLoop.getDeltaTime();\n  }\n\n  getGameLoop() {\n    return this.gameLoop;\n  }\n\n  isRunning() {\n    return this.gameLoop.isRunning();\n  }\n\n  isPaused() {\n    return this.gameLoop.isPaused();\n  }\n\n  cleanup() {\n    this.logger.info('Cleaning up engine...');\n    this.gameLoop.stop();\n    this.systemManager.cleanup();\n    this.eventBus.clear();\n    this.logger.info('Engine cleaned up');\n  }\n}\n","/**\n * GameConfig\n *\n * Tunable gameplay parameters for The Memory Syndicate.\n * Adjust these values to tune gameplay feel.\n */\nexport const GameConfig = {\n  player: {\n    // Movement\n    moveSpeed: 200, // pixels/second\n    acceleration: 1200, // pixels/second²\n    friction: 0.85, // deceleration multiplier (0.0-1.0)\n\n    // Investigation\n    observationRadius: 96, // evidence detection radius\n    interactionRadius: 64, // interaction zone radius\n    detectiveVisionDuration: 5000, // milliseconds\n    detectiveVisionCooldown: 10000, // milliseconds\n    detectiveVisionEnergyCost: 1, // energy per second\n\n    // Combat (future implementation)\n    maxHealth: 100,\n    baseAttackDamage: 10,\n    attackSpeed: 0.5, // seconds between attacks\n  },\n\n  investigation: {\n    // Evidence collection\n    evidenceCollectionTime: 500, // milliseconds to collect\n    forensicAnalysisTime: 2000, // milliseconds to analyze\n    clueRevealDelay: 300, // milliseconds between clue reveals\n\n    // Deduction board\n    theoryValidationTime: 1000, // milliseconds to validate theory\n    minConnectionsForTheory: 3, // minimum clue connections needed\n    accuracyThresholdForUnlock: 0.7, // 70% accuracy needed for progression\n\n    // Detective vision\n    visionHighlightColor: '#00FFFF',\n    visionPulseSpeed: 2.0, // pulses per second\n  },\n\n  faction: {\n    // Reputation\n    fameMax: 100,\n    infamyMax: 100,\n    cascadeMultiplier: 0.5, // reputation cascade to allies/enemies\n    disguiseBaseEffectiveness: 0.8, // 80% chance to fool NPCs\n    disguiseDetectionInterval: 1000, // check every second\n    recognitionMemoryDuration: 300000, // 5 minutes\n\n    // Attitude thresholds (default for most factions)\n    attitudeThresholds: {\n      allied: { fame: 80, infamy: 0 },\n      friendly: { fame: 40, infamy: 0 },\n      neutral: { fame: 0, infamy: 0 },\n      hostile: { fame: 0, infamy: 30 }\n    }\n  },\n\n  knowledge: {\n    // Progression gates\n    gateCheckInterval: 500, // check gates every 500ms\n    abilityUnlockDelay: 1000, // delay before showing unlock notification\n\n    // Knowledge categories and their progression\n    forensicSkillMax: 3,\n    technicalSkillMax: 3,\n    socialSkillMax: 3\n  },\n\n  npc: {\n    // AI behavior\n    chaseRange: 300,\n    attackRange: 50,\n    moveSpeed: 100,\n    aggroTime: 2000, // milliseconds before attacking\n    patrolSpeed: 60,\n    sightRange: 200,\n    sightAngle: Math.PI / 2, // 90 degree cone\n\n    // Dialogue\n    dialogueRange: 80,\n    dialogueTimeout: 30000 // auto-close after 30 seconds\n  },\n\n  camera: {\n    // Follow behavior\n    followSpeed: 0.1, // lerp factor (0.0-1.0), lower = smoother\n    lookAheadDistance: 100, // pixels ahead of player movement\n    deadzone: 32, // pixels player can move before camera follows\n\n    // Screen shake\n    shakeDecay: 0.8, // decay per frame\n    minShakeThreshold: 0.1 // stop shaking below this intensity\n  },\n\n  world: {\n    // Physics\n    gravity: 0, // top-down game, no gravity\n    maxVelocity: 500, // pixels/second\n\n    // Spatial partitioning\n    spatialHashCellSize: 128, // pixels per grid cell\n\n    // Performance\n    maxEntitiesPerFrame: 1000,\n    cullMargin: 100 // pixels outside viewport to still render\n  },\n\n  ui: {\n    // HUD\n    hudFadeTime: 300, // milliseconds\n    notificationDuration: 3000, // milliseconds\n    tooltipDelay: 500, // milliseconds before showing tooltip\n\n    // Menus\n    menuTransitionTime: 200, // milliseconds\n    pauseBlurAmount: 5 // pixels\n  },\n\n  audio: {\n    // Volume (0.0 to 1.0)\n    masterVolume: 0.8,\n    musicVolume: 0.7,\n    sfxVolume: 0.9,\n    ambienceVolume: 0.5,\n\n    // Adaptive music\n    layerTransitionTime: 1.5, // seconds\n    musicStates: {\n      exploration: { ambient: 1.0, tension: 0.0, combat: 0.0 },\n      investigation: { ambient: 0.6, tension: 0.4, combat: 0.0 },\n      stealth: { ambient: 0.3, tension: 0.7, combat: 0.0 },\n      combat: { ambient: 0.2, tension: 0.3, combat: 1.0 }\n    }\n  },\n\n  debug: {\n    showColliders: false,\n    showSpatialHash: false,\n    showFPS: true,\n    showEntityCount: true,\n    godMode: false\n  }\n};\n\n/**\n * Get faction-specific attitude thresholds\n * @param {string} factionId - Faction identifier\n * @returns {Object} Attitude thresholds\n */\nexport function getFactionAttitudeThresholds(factionId) {\n  // Override thresholds for specific factions\n  const overrides = {\n    police: {\n      allied: { fame: 75, infamy: 0 },\n      friendly: { fame: 35, infamy: 5 },\n      neutral: { fame: 0, infamy: 0 },\n      hostile: { fame: 0, infamy: 25 }\n    },\n    criminals: {\n      allied: { fame: 80, infamy: 20 },\n      friendly: { fame: 40, infamy: 0 },\n      neutral: { fame: 0, infamy: 0 },\n      hostile: { fame: 0, infamy: 40 }\n    }\n  };\n\n  return overrides[factionId] || GameConfig.faction.attitudeThresholds;\n}\n","/**\n * PlayerMovementSystem\n *\n * Handles player WASD input and smooth movement.\n * Applies acceleration, friction, and velocity clamping.\n *\n * Priority: 10 (early in update loop)\n * Queries: [PlayerController, Transform]\n */\n\nimport { GameConfig } from '../config/GameConfig.js';\n\nexport class PlayerMovementSystem {\n  constructor(componentRegistry, eventBus, inputState) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.input = inputState;\n    this.requiredComponents = ['PlayerController', 'Transform'];\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    // Subscribe to relevant events\n    this.events.subscribe('game:pause', () => {\n      this.paused = true;\n    });\n\n    this.events.subscribe('game:resume', () => {\n      this.paused = false;\n    });\n\n    this.paused = false;\n  }\n\n  /**\n   * Update player movement each frame\n   * @param {number} deltaTime - Time since last frame (seconds)\n   * @param {Array} entities - Entities with required components\n   */\n  update(deltaTime, entities) {\n    if (this.paused) return;\n\n    // Find player entity (should only be one)\n    const playerEntities = entities.filter(e => e.hasTag && e.hasTag('player'));\n    if (playerEntities.length === 0) return;\n\n    const entity = playerEntities[0];\n    const controller = this.components.getComponent(entity.id, 'PlayerController');\n    const transform = this.components.getComponent(entity.id, 'Transform');\n\n    if (!controller || !transform) return;\n\n    // Get movement input\n    const moveVector = this.input.getMovementVector();\n\n    // Apply acceleration based on input\n    if (moveVector.x !== 0 || moveVector.y !== 0) {\n      const accel = controller.acceleration * deltaTime;\n      controller.velocityX += moveVector.x * accel;\n      controller.velocityY += moveVector.y * accel;\n\n      // Emit movement event\n      this.events.emit('player:moving', {\n        direction: { x: moveVector.x, y: moveVector.y },\n        position: { x: transform.x, y: transform.y }\n      });\n    }\n\n    // Apply friction\n    controller.velocityX *= controller.friction;\n    controller.velocityY *= controller.friction;\n\n    // Clamp to max speed\n    const currentSpeed = Math.sqrt(\n      controller.velocityX * controller.velocityX +\n      controller.velocityY * controller.velocityY\n    );\n\n    if (currentSpeed > controller.moveSpeed) {\n      const scale = controller.moveSpeed / currentSpeed;\n      controller.velocityX *= scale;\n      controller.velocityY *= scale;\n    }\n\n    // Stop if velocity very low (prevents jittering)\n    if (Math.abs(controller.velocityX) < 0.1) controller.velocityX = 0;\n    if (Math.abs(controller.velocityY) < 0.1) controller.velocityY = 0;\n\n    // Update position\n    const oldX = transform.x;\n    const oldY = transform.y;\n\n    transform.x += controller.velocityX * deltaTime;\n    transform.y += controller.velocityY * deltaTime;\n\n    // Emit position change event if moved significantly\n    const distMoved = Math.sqrt(\n      (transform.x - oldX) ** 2 + (transform.y - oldY) ** 2\n    );\n\n    if (distMoved > 1) {\n      this.events.emit('player:moved', {\n        from: { x: oldX, y: oldY },\n        to: { x: transform.x, y: transform.y },\n        velocity: { x: controller.velocityX, y: controller.velocityY }\n      });\n    }\n\n    // Update controller input state (sync with InputState)\n    this.updateControllerInput(controller);\n  }\n\n  /**\n   * Update controller input state from InputState\n   * @param {PlayerController} controller\n   */\n  updateControllerInput(controller) {\n    controller.input.moveLeft = this.input.isPressed('moveLeft');\n    controller.input.moveRight = this.input.isPressed('moveRight');\n    controller.input.moveUp = this.input.isPressed('moveUp');\n    controller.input.moveDown = this.input.isPressed('moveDown');\n    controller.input.interact = this.input.isPressed('interact');\n    controller.input.deductionBoard = this.input.isPressed('deductionBoard');\n    controller.input.inventory = this.input.isPressed('inventory');\n    controller.input.pause = this.input.isPressed('pause');\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.events.unsubscribe('game:pause');\n    this.events.unsubscribe('game:resume');\n  }\n}\n","/**\n * InvestigationSystem\n *\n * Handles evidence collection, clue derivation, and deduction mechanics.\n * Core system for knowledge-gated progression.\n *\n * Priority: 30\n * Queries: [Transform, Evidence], [Transform, InteractionZone]\n */\n\nimport { GameConfig } from '../config/GameConfig.js';\n\nexport class InvestigationSystem {\n  constructor(componentRegistry, eventBus) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.requiredComponents = ['Transform'];\n\n    // Investigation state\n    this.playerKnowledge = new Set(); // Known knowledge IDs\n    this.playerAbilities = new Set(); // Unlocked ability IDs\n    this.playerCasesSolved = new Set(); // Solved case IDs\n    this.collectedEvidence = new Map(); // caseId -> Set<evidenceId>\n    this.discoveredClues = new Map(); // clueId -> ClueData\n    this.activeCase = null;\n\n    // Detective vision state\n    this.detectiveVisionActive = false;\n    this.detectiveVisionTimer = 0;\n    this.detectiveVisionCooldown = 0;\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    // Default starting ability\n    this.playerAbilities.add('basic_observation');\n\n    console.log('[InvestigationSystem] Initialized');\n  }\n\n  /**\n   * Update investigation mechanics\n   * @param {number} deltaTime - Time since last frame (seconds)\n   * @param {Array} entities - All entities\n   */\n  update(deltaTime, entities) {\n    // Update detective vision timer\n    this.updateDetectiveVision(deltaTime);\n\n    // Find player\n    const player = entities.find(e => e.hasTag && e.hasTag('player'));\n    if (!player) return;\n\n    const playerTransform = this.components.getComponent(player.id, 'Transform');\n    if (!playerTransform) return;\n\n    // Scan for evidence in observation radius\n    this.scanForEvidence(playerTransform, entities);\n\n    // Check for interaction zones\n    this.checkInteractionZones(player, playerTransform, entities);\n  }\n\n  /**\n   * Update detective vision state\n   * @param {number} deltaTime\n   */\n  updateDetectiveVision(deltaTime) {\n    if (this.detectiveVisionActive) {\n      this.detectiveVisionTimer -= deltaTime;\n      if (this.detectiveVisionTimer <= 0) {\n        this.deactivateDetectiveVision();\n      }\n    }\n\n    if (this.detectiveVisionCooldown > 0) {\n      this.detectiveVisionCooldown -= deltaTime;\n    }\n  }\n\n  /**\n   * Scan for evidence in player's observation radius\n   * @param {Transform} playerTransform\n   * @param {Array} entities\n   */\n  scanForEvidence(playerTransform, entities) {\n    const radius = GameConfig.player.observationRadius;\n    const radiusSq = radius * radius;\n\n    for (const entity of entities) {\n      const evidence = this.components.getComponent(entity.id, 'Evidence');\n      if (!evidence || evidence.collected) continue;\n\n      const transform = this.components.getComponent(entity.id, 'Transform');\n      if (!transform) continue;\n\n      // Check if evidence is in range\n      const dx = transform.x - playerTransform.x;\n      const dy = transform.y - playerTransform.y;\n      const distSq = dx * dx + dy * dy;\n\n      if (distSq <= radiusSq) {\n        // Check if evidence is visible (not hidden or detective vision active)\n        const isVisible = !evidence.hidden || this.detectiveVisionActive;\n\n        if (isVisible) {\n          this.events.emit('evidence:detected', {\n            entityId: entity.id,\n            evidenceId: evidence.id,\n            distance: Math.sqrt(distSq),\n            position: { x: transform.x, y: transform.y }\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Check interaction zones for evidence collection\n   * @param {Object} player - Player entity\n   * @param {Transform} playerTransform\n   * @param {Array} entities\n   */\n  checkInteractionZones(player, playerTransform, entities) {\n    const playerController = this.components.getComponent(player.id, 'PlayerController');\n    if (!playerController) return;\n\n    const interactPressed = playerController.input.interact;\n\n    for (const entity of entities) {\n      const zone = this.components.getComponent(entity.id, 'InteractionZone');\n      if (!zone || !zone.active) continue;\n\n      const transform = this.components.getComponent(entity.id, 'Transform');\n      if (!transform) continue;\n\n      // Check if in range\n      if (!zone.isInRange(playerTransform, transform)) continue;\n\n      // Handle interaction based on type\n      if (zone.type === 'evidence') {\n        if (interactPressed || !zone.requiresInput) {\n          this.collectEvidence(entity.id, zone.data.evidenceId);\n        } else {\n          // Show prompt\n          this.events.emit('ui:show_prompt', {\n            text: zone.prompt,\n            position: { x: transform.x, y: transform.y }\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Collect evidence\n   * @param {string} entityId - Evidence entity ID\n   * @param {string} evidenceId - Evidence data ID\n   */\n  collectEvidence(entityId, evidenceId) {\n    const evidence = this.components.getComponent(entityId, 'Evidence');\n    if (!evidence || evidence.collected) return;\n\n    // Check if player has required ability\n    if (!evidence.canCollect(this.playerAbilities)) {\n      this.events.emit('evidence:collection_failed', {\n        evidenceId,\n        reason: 'missing_ability',\n        required: evidence.requires\n      });\n      return;\n    }\n\n    // Collect evidence\n    evidence.collect();\n\n    // Track by case\n    if (!this.collectedEvidence.has(evidence.caseId)) {\n      this.collectedEvidence.set(evidence.caseId, new Set());\n    }\n    this.collectedEvidence.get(evidence.caseId).add(evidenceId);\n\n    // Emit collection event\n    this.events.emit('evidence:collected', {\n      evidenceId,\n      caseId: evidence.caseId,\n      type: evidence.type,\n      category: evidence.category,\n      entityId\n    });\n\n    // Check if this evidence derives any clues\n    this.checkClueDerivation(evidence);\n\n    console.log(`[InvestigationSystem] Collected evidence: ${evidence.title}`);\n  }\n\n  /**\n   * Check if collecting evidence reveals new clues\n   * @param {Evidence} evidence\n   */\n  checkClueDerivation(evidence) {\n    for (const clueId of evidence.derivedClues) {\n      if (!this.discoveredClues.has(clueId)) {\n        this.events.emit('clue:derived', {\n          clueId,\n          evidenceId: evidence.id,\n          caseId: evidence.caseId\n        });\n\n        console.log(`[InvestigationSystem] New clue derived: ${clueId}`);\n      }\n    }\n  }\n\n  /**\n   * Activate detective vision ability\n   */\n  activateDetectiveVision() {\n    if (this.detectiveVisionCooldown > 0) {\n      this.events.emit('ability:cooldown', {\n        ability: 'detective_vision',\n        remaining: this.detectiveVisionCooldown\n      });\n      return;\n    }\n\n    if (!this.playerAbilities.has('detective_vision')) {\n      this.events.emit('ability:locked', {\n        ability: 'detective_vision'\n      });\n      return;\n    }\n\n    this.detectiveVisionActive = true;\n    this.detectiveVisionTimer = GameConfig.player.detectiveVisionDuration / 1000;\n\n    this.events.emit('detective_vision:activated', {\n      duration: this.detectiveVisionTimer\n    });\n\n    console.log('[InvestigationSystem] Detective vision activated');\n  }\n\n  /**\n   * Deactivate detective vision\n   */\n  deactivateDetectiveVision() {\n    this.detectiveVisionActive = false;\n    this.detectiveVisionCooldown = GameConfig.player.detectiveVisionCooldown / 1000;\n\n    this.events.emit('detective_vision:deactivated', {\n      cooldown: this.detectiveVisionCooldown\n    });\n\n    console.log('[InvestigationSystem] Detective vision deactivated');\n  }\n\n  /**\n   * Unlock new ability\n   * @param {string} abilityId\n   */\n  unlockAbility(abilityId) {\n    if (this.playerAbilities.has(abilityId)) return;\n\n    this.playerAbilities.add(abilityId);\n\n    this.events.emit('ability:unlocked', {\n      abilityId\n    });\n\n    console.log(`[InvestigationSystem] Ability unlocked: ${abilityId}`);\n  }\n\n  /**\n   * Learn new knowledge\n   * @param {string} knowledgeId\n   */\n  learnKnowledge(knowledgeId) {\n    if (this.playerKnowledge.has(knowledgeId)) return;\n\n    this.playerKnowledge.add(knowledgeId);\n\n    this.events.emit('knowledge:learned', {\n      knowledgeId\n    });\n\n    console.log(`[InvestigationSystem] Knowledge learned: ${knowledgeId}`);\n  }\n\n  /**\n   * Mark case as solved\n   * @param {string} caseId\n   * @param {number} accuracy - Solution accuracy (0.0 to 1.0)\n   */\n  solveCase(caseId, accuracy = 1.0) {\n    if (this.playerCasesSolved.has(caseId)) return;\n\n    this.playerCasesSolved.add(caseId);\n\n    this.events.emit('case:solved', {\n      caseId,\n      accuracy,\n      evidenceCollected: this.collectedEvidence.get(caseId)?.size || 0\n    });\n\n    console.log(`[InvestigationSystem] Case solved: ${caseId} (${(accuracy * 100).toFixed(0)}% accuracy)`);\n  }\n\n  /**\n   * Get current player state for gate checking\n   * @returns {Object}\n   */\n  getPlayerState() {\n    return {\n      knowledge: this.playerKnowledge,\n      abilities: this.playerAbilities,\n      casesSolved: this.playerCasesSolved,\n      factionReputation: new Map() // Managed by FactionReputationSystem\n    };\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.collectedEvidence.clear();\n    this.discoveredClues.clear();\n  }\n}\n","/**\n * FactionReputationSystem\n *\n * Manages faction reputation, disguises, and cascading reputation changes.\n * Core system for social stealth and branching narrative paths.\n *\n * Priority: 25\n * Queries: [FactionMember]\n */\n\nimport { GameConfig, getFactionAttitudeThresholds } from '../config/GameConfig.js';\n\nexport class FactionReputationSystem {\n  constructor(componentRegistry, eventBus) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.requiredComponents = ['FactionMember'];\n\n    // Faction relationships (which factions are allies/enemies)\n    this.factionRelationships = this.initializeFactionRelationships();\n\n    // District control\n    this.districtControl = new Map();\n\n    // Player faction member (cached for performance)\n    this.playerFactionMember = null;\n  }\n\n  /**\n   * Initialize faction relationship web\n   * @returns {Map}\n   */\n  initializeFactionRelationships() {\n    const relationships = new Map();\n\n    // Police faction\n    relationships.set('police', {\n      allies: ['neurosynch'],\n      enemies: ['criminals', 'resistance']\n    });\n\n    // Criminals faction\n    relationships.set('criminals', {\n      allies: [],\n      enemies: ['police', 'neurosynch']\n    });\n\n    // NeuroSync Corporation\n    relationships.set('neurosynch', {\n      allies: ['police'],\n      enemies: ['resistance', 'criminals']\n    });\n\n    // Resistance faction\n    relationships.set('resistance', {\n      allies: [],\n      enemies: ['police', 'neurosynch']\n    });\n\n    // Civilian (neutral)\n    relationships.set('civilian', {\n      allies: [],\n      enemies: []\n    });\n\n    return relationships;\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    // Subscribe to reputation-affecting events\n    this.events.subscribe('evidence:collected', (data) => {\n      this.onEvidenceCollected(data);\n    });\n\n    this.events.subscribe('case:solved', (data) => {\n      this.onCaseSolved(data);\n    });\n\n    // Initialize district control\n    this.districtControl.set('downtown', 'police');\n    this.districtControl.set('industrial', 'criminals');\n    this.districtControl.set('corporate_spires', 'neurosynch');\n    this.districtControl.set('archive_undercity', 'resistance');\n\n    console.log('[FactionReputationSystem] Initialized');\n  }\n\n  /**\n   * Update faction system\n   * @param {number} deltaTime\n   * @param {Array} entities\n   */\n  update(deltaTime, entities) {\n    // Cache player faction member\n    if (!this.playerFactionMember) {\n      const player = entities.find(e => e.hasTag && e.hasTag('player'));\n      if (player) {\n        this.playerFactionMember = this.components.getComponent(player.id, 'FactionMember');\n      }\n    }\n\n    // Check disguise detection for player\n    if (this.playerFactionMember && this.playerFactionMember.currentDisguise) {\n      this.checkDisguiseDetection(entities, deltaTime);\n    }\n  }\n\n  /**\n   * Handle evidence collected event\n   * @param {Object} data\n   */\n  onEvidenceCollected(data) {\n    // Evidence collection can affect reputation based on case\n    // This is a hook for case-specific reputation changes\n    // For now, just log\n    console.log(`[FactionReputationSystem] Evidence collected for case: ${data.caseId}`);\n  }\n\n  /**\n   * Handle case solved event\n   * @param {Object} data\n   */\n  onCaseSolved(data) {\n    // Cases have faction impacts defined in their data\n    // For tutorial implementation, give small police reputation boost\n    if (this.playerFactionMember) {\n      this.modifyReputation('police', 10, 0, 'Case solved');\n    }\n  }\n\n  /**\n   * Modify player reputation with faction\n   * @param {string} factionId\n   * @param {number} fameDelta\n   * @param {number} infamyDelta\n   * @param {string} reason\n   */\n  modifyReputation(factionId, fameDelta, infamyDelta, reason = '') {\n    if (!this.playerFactionMember) return;\n\n    const oldRep = this.playerFactionMember.getReputation(factionId);\n    const oldAttitude = this.playerFactionMember.getAttitude(\n      factionId,\n      getFactionAttitudeThresholds(factionId)\n    );\n\n    // Modify reputation\n    this.playerFactionMember.modifyReputation(factionId, fameDelta, infamyDelta);\n\n    const newRep = this.playerFactionMember.getReputation(factionId);\n    const newAttitude = this.playerFactionMember.getAttitude(\n      factionId,\n      getFactionAttitudeThresholds(factionId)\n    );\n\n    // Emit reputation change event\n    this.events.emit('reputation:changed', {\n      factionId,\n      oldFame: oldRep.fame,\n      newFame: newRep.fame,\n      oldInfamy: oldRep.infamy,\n      newInfamy: newRep.infamy,\n      reason\n    });\n\n    // Check for attitude change\n    if (oldAttitude !== newAttitude) {\n      this.events.emit('faction:attitude_changed', {\n        factionId,\n        oldAttitude,\n        newAttitude\n      });\n\n      console.log(`[FactionReputationSystem] ${factionId} attitude: ${oldAttitude} → ${newAttitude}`);\n    }\n\n    // Cascade reputation to allies and enemies\n    this.cascadeReputation(factionId, fameDelta, infamyDelta);\n\n    console.log(`[FactionReputationSystem] ${factionId} reputation: ${newRep.fame} fame, ${newRep.infamy} infamy (${reason})`);\n  }\n\n  /**\n   * Cascade reputation change to allied and enemy factions\n   * @param {string} sourceFactionId\n   * @param {number} fameDelta\n   * @param {number} infamyDelta\n   */\n  cascadeReputation(sourceFactionId, fameDelta, infamyDelta) {\n    const relationships = this.factionRelationships.get(sourceFactionId);\n    if (!relationships) return;\n\n    const multiplier = GameConfig.faction.cascadeMultiplier;\n\n    // Allies gain proportional fame/infamy\n    for (const allyId of relationships.allies) {\n      const cascadeFame = Math.floor(fameDelta * multiplier);\n      const cascadeInfamy = Math.floor(infamyDelta * multiplier);\n\n      if (cascadeFame !== 0 || cascadeInfamy !== 0) {\n        this.playerFactionMember.modifyReputation(allyId, cascadeFame, cascadeInfamy);\n\n        console.log(`[FactionReputationSystem] Cascade to ${allyId} (ally): ${cascadeFame > 0 ? '+' : ''}${cascadeFame} fame`);\n      }\n    }\n\n    // Enemies lose fame / gain infamy\n    for (const enemyId of relationships.enemies) {\n      const cascadeFame = -Math.floor(fameDelta * multiplier);\n      const cascadeInfamy = Math.floor(infamyDelta * multiplier);\n\n      if (cascadeFame !== 0 || cascadeInfamy !== 0) {\n        this.playerFactionMember.modifyReputation(enemyId, cascadeFame, cascadeInfamy);\n\n        console.log(`[FactionReputationSystem] Cascade to ${enemyId} (enemy): ${cascadeFame} fame`);\n      }\n    }\n  }\n\n  /**\n   * Check for disguise detection\n   * @param {Array} entities\n   * @param {number} deltaTime\n   */\n  checkDisguiseDetection(entities, deltaTime) {\n    // Simplified detection for initial implementation\n    // Full implementation would check NPC sight lines and known status\n  }\n\n  /**\n   * Equip disguise\n   * @param {string} factionId\n   */\n  equipDisguise(factionId) {\n    if (!this.playerFactionMember) return;\n\n    this.playerFactionMember.equipDisguise(factionId);\n\n    this.events.emit('disguise:equipped', {\n      factionId\n    });\n\n    console.log(`[FactionReputationSystem] Disguise equipped: ${factionId}`);\n  }\n\n  /**\n   * Remove disguise\n   */\n  removeDisguise() {\n    if (!this.playerFactionMember) return;\n\n    const oldDisguise = this.playerFactionMember.currentDisguise;\n    this.playerFactionMember.removeDisguise();\n\n    this.events.emit('disguise:removed', {\n      factionId: oldDisguise\n    });\n\n    console.log('[FactionReputationSystem] Disguise removed');\n  }\n\n  /**\n   * Get district controlling faction\n   * @param {string} districtId\n   * @returns {string}\n   */\n  getDistrictController(districtId) {\n    return this.districtControl.get(districtId) || 'civilian';\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.events.unsubscribe('evidence:collected');\n    this.events.unsubscribe('case:solved');\n  }\n}\n","/**\n * KnowledgeProgressionSystem\n *\n * Manages knowledge-gated progression: evaluates gates, unlocks areas/abilities.\n * Core metroidvania progression system.\n *\n * Priority: 35\n * Queries: [KnowledgeGate, Transform]\n */\n\nimport { GameConfig } from '../config/GameConfig.js';\n\nexport class KnowledgeProgressionSystem {\n  constructor(componentRegistry, eventBus, investigationSystem) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.investigation = investigationSystem; // Access to player knowledge state\n    this.requiredComponents = ['KnowledgeGate'];\n\n    // Gate check timing (avoid checking every frame)\n    this.gateCheckTimer = 0;\n    this.gateCheckInterval = GameConfig.knowledge.gateCheckInterval / 1000; // to seconds\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    // Subscribe to progression events\n    this.events.subscribe('knowledge:learned', () => {\n      this.checkAllGates();\n    });\n\n    this.events.subscribe('ability:unlocked', () => {\n      this.checkAllGates();\n    });\n\n    this.events.subscribe('case:solved', () => {\n      this.checkAllGates();\n    });\n\n    console.log('[KnowledgeProgressionSystem] Initialized');\n  }\n\n  /**\n   * Update progression system\n   * @param {number} deltaTime\n   * @param {Array} entities\n   */\n  update(deltaTime, entities) {\n    // Periodic gate check (not every frame for performance)\n    this.gateCheckTimer -= deltaTime;\n    if (this.gateCheckTimer <= 0) {\n      this.checkAllGates(entities);\n      this.gateCheckTimer = this.gateCheckInterval;\n    }\n  }\n\n  /**\n   * Check all knowledge gates\n   * @param {Array} entities\n   */\n  checkAllGates(entities) {\n    if (!entities) return;\n\n    const playerState = this.getPlayerState();\n\n    for (const entity of entities) {\n      const gate = this.components.getComponent(entity.id, 'KnowledgeGate');\n      if (!gate || gate.unlocked) continue;\n\n      // Check if requirements are met\n      if (gate.checkRequirements(playerState)) {\n        this.unlockGate(entity.id, gate);\n      }\n    }\n  }\n\n  /**\n   * Unlock a knowledge gate\n   * @param {string} entityId\n   * @param {KnowledgeGate} gate\n   */\n  unlockGate(entityId, gate) {\n    gate.unlock();\n\n    const transform = this.components.getComponent(entityId, 'Transform');\n\n    this.events.emit('gate:unlocked', {\n      gateId: gate.id,\n      type: gate.type,\n      entityId,\n      position: transform ? { x: transform.x, y: transform.y } : null\n    });\n\n    console.log(`[KnowledgeProgressionSystem] Gate unlocked: ${gate.id} (${gate.type})`);\n  }\n\n  /**\n   * Get player state for gate checking\n   * @returns {Object}\n   */\n  getPlayerState() {\n    // Get state from InvestigationSystem\n    const baseState = this.investigation.getPlayerState();\n\n    // Add faction reputation from cached player FactionMember\n    // (This would ideally come from FactionReputationSystem)\n    baseState.factionReputation = new Map();\n\n    return baseState;\n  }\n\n  /**\n   * Check if player can access area\n   * @param {string} areaId\n   * @returns {boolean}\n   */\n  canAccessArea(areaId) {\n    // Check if any gates blocking this area are unlocked\n    // This is a simplified check; full implementation would track area gates\n    return true;\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.events.unsubscribe('knowledge:learned');\n    this.events.unsubscribe('ability:unlocked');\n    this.events.unsubscribe('case:solved');\n  }\n}\n","/**\n * DialogueSystem\n *\n * Manages NPC dialogue interactions and conversation trees.\n * Stub implementation for initial gameplay loop.\n *\n * Priority: 40\n */\n\nexport class DialogueSystem {\n  constructor(componentRegistry, eventBus) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n\n    // Active dialogue state\n    this.activeDialogue = null;\n    this.dialogueHistory = new Map(); // npcId -> conversation history\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    console.log('[DialogueSystem] Initialized (stub)');\n  }\n\n  /**\n   * Update dialogue system\n   * @param {number} deltaTime\n   * @param {Array} entities\n   */\n  update(deltaTime, entities) {\n    // Stub: Full implementation will handle dialogue UI, choices, branching\n  }\n\n  /**\n   * Start dialogue with NPC\n   * @param {string} npcId - NPC entity ID\n   * @param {string} dialogueId - Dialogue tree ID\n   */\n  startDialogue(npcId, dialogueId) {\n    this.activeDialogue = {\n      npcId,\n      dialogueId,\n      currentNode: 'start',\n      choices: []\n    };\n\n    this.events.emit('dialogue:started', {\n      npcId,\n      dialogueId\n    });\n\n    console.log(`[DialogueSystem] Started dialogue: ${dialogueId} with NPC: ${npcId}`);\n  }\n\n  /**\n   * End active dialogue\n   */\n  endDialogue() {\n    if (!this.activeDialogue) return;\n\n    const { npcId, dialogueId } = this.activeDialogue;\n\n    this.events.emit('dialogue:ended', {\n      npcId,\n      dialogueId\n    });\n\n    this.activeDialogue = null;\n\n    console.log('[DialogueSystem] Dialogue ended');\n  }\n\n  /**\n   * Select dialogue choice\n   * @param {number} choiceIndex\n   */\n  selectChoice(choiceIndex) {\n    if (!this.activeDialogue) return;\n\n    this.events.emit('dialogue:choice_selected', {\n      dialogueId: this.activeDialogue.dialogueId,\n      choice: choiceIndex\n    });\n\n    // Stub: Full implementation will navigate dialogue tree\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.activeDialogue = null;\n  }\n}\n","/**\n * CameraFollowSystem\n *\n * Smooth camera following for player with look-ahead and deadzone.\n * Integrates with engine's camera/renderer.\n *\n * Priority: 90 (late, after movement)\n * Queries: [Transform, PlayerController]\n */\n\nimport { GameConfig } from '../config/GameConfig.js';\n\nexport class CameraFollowSystem {\n  constructor(componentRegistry, eventBus, camera) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.camera = camera; // Engine camera instance\n    this.requiredComponents = ['Transform', 'PlayerController'];\n\n    // Camera state\n    this.targetX = 0;\n    this.targetY = 0;\n    this.velocityX = 0;\n    this.velocityY = 0;\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    console.log('[CameraFollowSystem] Initialized');\n  }\n\n  /**\n   * Update camera to follow player\n   * @param {number} deltaTime\n   * @param {Array} entities\n   */\n  update(deltaTime, entities) {\n    // Find player\n    const player = entities.find(e => e.hasTag && e.hasTag('player'));\n    if (!player) return;\n\n    const transform = this.components.getComponent(player.id, 'Transform');\n    const controller = this.components.getComponent(player.id, 'PlayerController');\n\n    if (!transform || !controller) return;\n\n    // Calculate target position with look-ahead\n    const lookAhead = GameConfig.camera.lookAheadDistance;\n    const velocityMagnitude = Math.sqrt(\n      controller.velocityX ** 2 + controller.velocityY ** 2\n    );\n\n    let lookAheadX = 0;\n    let lookAheadY = 0;\n\n    if (velocityMagnitude > 0.1) {\n      lookAheadX = (controller.velocityX / velocityMagnitude) * lookAhead;\n      lookAheadY = (controller.velocityY / velocityMagnitude) * lookAhead;\n    }\n\n    this.targetX = transform.x + lookAheadX;\n    this.targetY = transform.y + lookAheadY;\n\n    // Apply deadzone\n    const deadzone = GameConfig.camera.deadzone;\n    const dx = this.targetX - this.camera.x;\n    const dy = this.targetY - this.camera.y;\n    const distanceFromCenter = Math.sqrt(dx * dx + dy * dy);\n\n    if (distanceFromCenter < deadzone) {\n      // Within deadzone, don't move camera\n      return;\n    }\n\n    // Smooth follow with lerp\n    const followSpeed = GameConfig.camera.followSpeed;\n    this.camera.x += (this.targetX - this.camera.x) * followSpeed;\n    this.camera.y += (this.targetY - this.camera.y) * followSpeed;\n\n    // Round to prevent subpixel jitter\n    this.camera.x = Math.round(this.camera.x);\n    this.camera.y = Math.round(this.camera.y);\n  }\n\n  /**\n   * Trigger camera shake\n   * @param {number} intensity - Shake strength\n   * @param {number} duration - Shake duration (seconds)\n   */\n  shake(intensity, duration) {\n    if (this.camera && this.camera.shake) {\n      this.camera.shake(intensity, duration);\n    }\n\n    this.events.emit('camera:shake', {\n      intensity,\n      duration\n    });\n  }\n\n  /**\n   * Instantly snap camera to position\n   * @param {number} x\n   * @param {number} y\n   */\n  snapTo(x, y) {\n    if (this.camera) {\n      this.camera.x = x;\n      this.camera.y = y;\n    }\n\n    this.targetX = x;\n    this.targetY = y;\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    // No cleanup needed\n  }\n}\n","/**\n * Transform Component\n *\n * Core spatial component defining position, rotation, and scale.\n * Required by virtually all visible entities.\n *\n * @property {number} x - World X coordinate (pixels)\n * @property {number} y - World Y coordinate (pixels)\n * @property {number} rotation - Rotation in radians (0 to 2π)\n * @property {number} scaleX - Horizontal scale multiplier (1.0 = normal)\n * @property {number} scaleY - Vertical scale multiplier (1.0 = normal)\n */\nexport class Transform {\n  constructor(x = 0, y = 0, rotation = 0, scaleX = 1, scaleY = 1) {\n    this.x = x;\n    this.y = y;\n    this.rotation = rotation;\n    this.scaleX = scaleX;\n    this.scaleY = scaleY;\n  }\n\n  /**\n   * Set position\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   */\n  setPosition(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Translate by offset\n   * @param {number} dx - X offset\n   * @param {number} dy - Y offset\n   */\n  translate(dx, dy) {\n    this.x += dx;\n    this.y += dy;\n  }\n\n  /**\n   * Calculate distance to another transform\n   * @param {Transform} other - Target transform\n   * @returns {number} Distance in pixels\n   */\n  distanceTo(other) {\n    const dx = other.x - this.x;\n    const dy = other.y - this.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * Clone this transform\n   * @returns {Transform} New transform with same values\n   */\n  clone() {\n    return new Transform(this.x, this.y, this.rotation, this.scaleX, this.scaleY);\n  }\n}\n","/**\n * Sprite Component\n *\n * Visual representation component for rendering entities.\n *\n * @property {string|HTMLImageElement} image - Image reference or placeholder color\n * @property {number} width - Sprite width in pixels\n * @property {number} height - Sprite height in pixels\n * @property {string} layer - Render layer (background, tiles, entities, effects, ui_world, ui_screen)\n * @property {number} zIndex - Sort order within layer (higher = drawn later)\n * @property {boolean} visible - Whether sprite should be rendered\n * @property {number} alpha - Opacity (0.0 to 1.0)\n * @property {string} color - Fallback color if no image (e.g., \"#FF0000\")\n */\nexport class Sprite {\n  constructor({\n    image = null,\n    width = 32,\n    height = 32,\n    layer = 'entities',\n    zIndex = 0,\n    visible = true,\n    alpha = 1.0,\n    color = '#FFFFFF'\n  } = {}) {\n    this.image = image;\n    this.width = width;\n    this.height = height;\n    this.layer = layer;\n    this.zIndex = zIndex;\n    this.visible = visible;\n    this.alpha = alpha;\n    this.color = color;\n  }\n\n  /**\n   * Show sprite\n   */\n  show() {\n    this.visible = true;\n  }\n\n  /**\n   * Hide sprite\n   */\n  hide() {\n    this.visible = false;\n  }\n\n  /**\n   * Set opacity\n   * @param {number} alpha - Opacity (0.0 to 1.0)\n   */\n  setAlpha(alpha) {\n    this.alpha = Math.max(0, Math.min(1, alpha));\n  }\n}\n","/**\n * PlayerController Component\n *\n * Stores player input state and movement parameters.\n * Read by PlayerMovementSystem to control player entity.\n *\n * @property {Object} input - Current input state\n * @property {boolean} input.moveLeft - W key pressed\n * @property {boolean} input.moveRight - S key pressed\n * @property {boolean} input.moveUp - A key pressed\n * @property {boolean} input.moveDown - D key pressed\n * @property {boolean} input.interact - E key pressed (evidence collection)\n * @property {boolean} input.deductionBoard - Tab key pressed\n * @property {boolean} input.inventory - I key pressed\n * @property {boolean} input.pause - ESC key pressed\n * @property {number} moveSpeed - Base movement speed (pixels/second)\n * @property {number} acceleration - How fast speed changes (pixels/second²)\n * @property {number} friction - Deceleration multiplier (0.0 to 1.0)\n */\nexport class PlayerController {\n  constructor({\n    moveSpeed = 200,\n    acceleration = 1200,\n    friction = 0.85\n  } = {}) {\n    this.input = {\n      moveLeft: false,\n      moveRight: false,\n      moveUp: false,\n      moveDown: false,\n      interact: false,\n      deductionBoard: false,\n      inventory: false,\n      pause: false\n    };\n\n    this.moveSpeed = moveSpeed;\n    this.acceleration = acceleration;\n    this.friction = friction;\n\n    // Internal velocity tracking (managed by PlayerMovementSystem)\n    this.velocityX = 0;\n    this.velocityY = 0;\n  }\n\n  /**\n   * Reset all input states\n   */\n  resetInput() {\n    Object.keys(this.input).forEach(key => {\n      this.input[key] = false;\n    });\n  }\n\n  /**\n   * Check if any movement input is active\n   * @returns {boolean}\n   */\n  isMoving() {\n    return this.input.moveLeft || this.input.moveRight ||\n           this.input.moveUp || this.input.moveDown;\n  }\n}\n","/**\n * Collider Component\n *\n * Physics collision component for spatial queries and collision detection.\n * Used by physics system for collision resolution.\n *\n * @property {string} type - Collision shape type ('AABB', 'circle')\n * @property {number} width - Width for AABB colliders\n * @property {number} height - Height for AABB colliders\n * @property {number} radius - Radius for circle colliders\n * @property {number} offsetX - X offset from transform position\n * @property {number} offsetY - Y offset from transform position\n * @property {boolean} isTrigger - If true, no physics response (events only)\n * @property {boolean} isStatic - If true, collider doesn't move\n * @property {Array<string>} tags - Collision tags for filtering\n */\nexport class Collider {\n  constructor({\n    type = 'AABB',\n    width = 32,\n    height = 32,\n    radius = 16,\n    offsetX = 0,\n    offsetY = 0,\n    isTrigger = false,\n    isStatic = false,\n    tags = []\n  } = {}) {\n    this.type = type;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.isTrigger = isTrigger;\n    this.isStatic = isStatic;\n    this.tags = tags;\n  }\n\n  /**\n   * Get AABB bounds\n   * @param {Transform} transform - Entity transform\n   * @returns {Object} Bounds {minX, minY, maxX, maxY}\n   */\n  getBounds(transform) {\n    if (this.type === 'AABB') {\n      const x = transform.x + this.offsetX;\n      const y = transform.y + this.offsetY;\n      return {\n        minX: x - this.width / 2,\n        minY: y - this.height / 2,\n        maxX: x + this.width / 2,\n        maxY: y + this.height / 2\n      };\n    } else if (this.type === 'circle') {\n      const x = transform.x + this.offsetX;\n      const y = transform.y + this.offsetY;\n      return {\n        minX: x - this.radius,\n        minY: y - this.radius,\n        maxX: x + this.radius,\n        maxY: y + this.radius\n      };\n    }\n    return { minX: 0, minY: 0, maxX: 0, maxY: 0 };\n  }\n\n  /**\n   * Check if collider has tag\n   * @param {string} tag - Tag to check\n   * @returns {boolean}\n   */\n  hasTag(tag) {\n    return this.tags.includes(tag);\n  }\n}\n","/**\n * FactionMember Component\n *\n * Faction affiliation and reputation tracking.\n * Used by NPCs and player for faction relationship mechanics.\n *\n * @property {string} primaryFaction - Main faction affiliation\n * @property {Map<string, Object>} reputation - Reputation with each faction\n * @property {number} reputation[factionId].fame - Heroic reputation (0-100)\n * @property {number} reputation[factionId].infamy - Antihero reputation (0-100)\n * @property {string|null} currentDisguise - Active disguise faction (null if not disguised)\n * @property {Set<string>} knownBy - Entity IDs of NPCs who recognize player\n * @property {Array<Object>} relationshipModifiers - Temporary reputation modifiers\n */\nexport class FactionMember {\n  constructor({\n    primaryFaction = 'civilian',\n    reputation = {},\n    currentDisguise = null,\n    knownBy = new Set(),\n    relationshipModifiers = []\n  } = {}) {\n    this.primaryFaction = primaryFaction;\n    this.reputation = new Map(Object.entries(reputation));\n    this.currentDisguise = currentDisguise;\n    this.knownBy = knownBy;\n    this.relationshipModifiers = relationshipModifiers;\n  }\n\n  /**\n   * Get reputation with faction\n   * @param {string} factionId - Faction identifier\n   * @returns {Object} {fame, infamy}\n   */\n  getReputation(factionId) {\n    if (!this.reputation.has(factionId)) {\n      this.reputation.set(factionId, { fame: 0, infamy: 0 });\n    }\n    return this.reputation.get(factionId);\n  }\n\n  /**\n   * Modify reputation with faction\n   * @param {string} factionId - Faction identifier\n   * @param {number} fameDelta - Fame change\n   * @param {number} infamyDelta - Infamy change\n   */\n  modifyReputation(factionId, fameDelta = 0, infamyDelta = 0) {\n    const rep = this.getReputation(factionId);\n    rep.fame = Math.max(0, Math.min(100, rep.fame + fameDelta));\n    rep.infamy = Math.max(0, Math.min(100, rep.infamy + infamyDelta));\n  }\n\n  /**\n   * Get faction attitude based on reputation\n   * @param {string} factionId - Faction identifier\n   * @param {Object} attitudeThresholds - Faction's attitude thresholds\n   * @returns {string} 'allied', 'friendly', 'neutral', or 'hostile'\n   */\n  getAttitude(factionId, attitudeThresholds) {\n    const rep = this.getReputation(factionId);\n\n    if (rep.fame >= attitudeThresholds.allied.fame && rep.infamy <= attitudeThresholds.allied.infamy) {\n      return 'allied';\n    } else if (rep.fame >= attitudeThresholds.friendly.fame && rep.infamy <= attitudeThresholds.friendly.infamy) {\n      return 'friendly';\n    } else if (rep.infamy >= attitudeThresholds.hostile.infamy) {\n      return 'hostile';\n    }\n    return 'neutral';\n  }\n\n  /**\n   * Equip disguise\n   * @param {string} factionId - Faction to disguise as\n   */\n  equipDisguise(factionId) {\n    this.currentDisguise = factionId;\n  }\n\n  /**\n   * Remove disguise\n   */\n  removeDisguise() {\n    this.currentDisguise = null;\n  }\n\n  /**\n   * Check if entity is known by an NPC\n   * @param {string} npcId - NPC entity ID\n   * @returns {boolean}\n   */\n  isKnownBy(npcId) {\n    return this.knownBy.has(npcId);\n  }\n\n  /**\n   * Mark as known by NPC\n   * @param {string} npcId - NPC entity ID\n   */\n  markKnownBy(npcId) {\n    this.knownBy.add(npcId);\n  }\n}\n","/**\n * Evidence Component\n *\n * Investigation evidence that can be collected by player.\n * Core to knowledge-gated progression system.\n *\n * @property {string} id - Unique evidence identifier\n * @property {string} type - Evidence type ('physical', 'digital', 'testimony', 'forensic')\n * @property {string} category - Specific category (fingerprint, document, weapon, etc)\n * @property {string} title - Display name\n * @property {string} description - Evidence description\n * @property {string} caseId - Associated case ID\n * @property {boolean} collected - Whether player has collected this\n * @property {boolean} analyzed - Whether evidence has been forensically examined\n * @property {boolean} hidden - Requires detective vision to reveal\n * @property {string|null} requires - Required ability to collect (e.g., 'forensic_kit_level_1')\n * @property {Array<string>} derivedClues - Clue IDs that can be derived from this evidence\n */\nexport class Evidence {\n  constructor({\n    id = '',\n    type = 'physical',\n    category = 'generic',\n    title = 'Evidence',\n    description = 'A piece of evidence',\n    caseId = '',\n    collected = false,\n    analyzed = false,\n    hidden = false,\n    requires = null,\n    derivedClues = []\n  } = {}) {\n    this.id = id;\n    this.type = type;\n    this.category = category;\n    this.title = title;\n    this.description = description;\n    this.caseId = caseId;\n    this.collected = collected;\n    this.analyzed = analyzed;\n    this.hidden = hidden;\n    this.requires = requires;\n    this.derivedClues = derivedClues;\n  }\n\n  /**\n   * Check if player can collect this evidence\n   * @param {Set<string>} playerAbilities - Player's current abilities\n   * @returns {boolean}\n   */\n  canCollect(playerAbilities) {\n    if (this.collected) return false;\n    if (!this.requires) return true;\n    return playerAbilities.has(this.requires);\n  }\n\n  /**\n   * Mark evidence as collected\n   */\n  collect() {\n    this.collected = true;\n  }\n\n  /**\n   * Mark evidence as analyzed\n   */\n  analyze() {\n    this.analyzed = true;\n  }\n}\n","/**\n * InteractionZone Component\n *\n * Interactable area that triggers when player enters/presses interact key.\n * Used for evidence collection, NPC dialogue, area transitions.\n *\n * @property {string} id - Interaction identifier\n * @property {string} type - Interaction type ('evidence', 'dialogue', 'transition', 'trigger')\n * @property {number} radius - Interaction radius in pixels\n * @property {boolean} requiresInput - Whether interaction needs E key press or is automatic\n * @property {string} prompt - Prompt text shown to player (e.g., \"Press E to examine\")\n * @property {boolean} active - Whether zone is currently active\n * @property {boolean} oneShot - If true, can only interact once\n * @property {boolean} used - Whether one-shot interaction has been used\n * @property {Object} data - Type-specific interaction data\n */\nexport class InteractionZone {\n  constructor({\n    id = '',\n    type = 'trigger',\n    radius = 64,\n    requiresInput = true,\n    prompt = 'Press E to interact',\n    active = true,\n    oneShot = false,\n    used = false,\n    data = {}\n  } = {}) {\n    this.id = id;\n    this.type = type;\n    this.radius = radius;\n    this.requiresInput = requiresInput;\n    this.prompt = prompt;\n    this.active = active;\n    this.oneShot = oneShot;\n    this.used = used;\n    this.data = data;\n  }\n\n  /**\n   * Check if player is in range\n   * @param {Transform} playerTransform - Player transform\n   * @param {Transform} zoneTransform - Zone transform\n   * @returns {boolean}\n   */\n  isInRange(playerTransform, zoneTransform) {\n    const distance = playerTransform.distanceTo(zoneTransform);\n    return distance <= this.radius;\n  }\n\n  /**\n   * Attempt interaction\n   * @returns {boolean} True if interaction occurred\n   */\n  interact() {\n    if (!this.active || (this.oneShot && this.used)) {\n      return false;\n    }\n\n    if (this.oneShot) {\n      this.used = true;\n    }\n\n    return true;\n  }\n\n  /**\n   * Activate zone\n   */\n  activate() {\n    this.active = true;\n  }\n\n  /**\n   * Deactivate zone\n   */\n  deactivate() {\n    this.active = false;\n  }\n\n  /**\n   * Reset one-shot interaction\n   */\n  reset() {\n    this.used = false;\n  }\n}\n","/**\n * EvidenceEntity Factory\n *\n * Creates evidence entities that can be collected by player.\n * Evidence drives investigation and knowledge-gated progression.\n */\n\nimport { Transform } from '../components/Transform.js';\nimport { Sprite } from '../components/Sprite.js';\nimport { Evidence } from '../components/Evidence.js';\nimport { InteractionZone } from '../components/InteractionZone.js';\nimport { Collider } from '../components/Collider.js';\n\n/**\n * Create evidence entity\n * @param {Object} entityManager - Entity manager instance\n * @param {Object} componentRegistry - Component registry instance\n * @param {Object} evidenceData - Evidence configuration\n * @returns {string} Entity ID\n */\nexport function createEvidenceEntity(entityManager, componentRegistry, evidenceData) {\n  const {\n    x = 0,\n    y = 0,\n    id = `evidence_${Date.now()}`,\n    type = 'physical',\n    category = 'generic',\n    title = 'Evidence',\n    description = 'A piece of evidence',\n    caseId = 'case_tutorial',\n    hidden = false,\n    requires = null,\n    derivedClues = []\n  } = evidenceData;\n\n  // Create entity\n  const entityId = entityManager.createEntity();\n  entityManager.tagEntity(entityId, 'evidence');\n\n  // Add Transform component\n  const transform = new Transform(x, y, 0, 1, 1);\n  componentRegistry.addComponent(entityId, 'Transform', transform);\n\n  // Add Sprite component\n  const sprite = new Sprite({\n    image: null,\n    width: 24,\n    height: 24,\n    layer: 'entities',\n    zIndex: 5,\n    color: getEvidenceColor(type),\n    visible: !hidden, // Hidden evidence not visible until detective vision\n    alpha: hidden ? 0.3 : 1.0\n  });\n  componentRegistry.addComponent(entityId, 'Sprite', sprite);\n\n  // Add Evidence component\n  const evidence = new Evidence({\n    id,\n    type,\n    category,\n    title,\n    description,\n    caseId,\n    collected: false,\n    analyzed: false,\n    hidden,\n    requires,\n    derivedClues\n  });\n  componentRegistry.addComponent(entityId, 'Evidence', evidence);\n\n  // Add InteractionZone component\n  const interactionZone = new InteractionZone({\n    id: `interaction_${id}`,\n    type: 'evidence',\n    radius: 48,\n    requiresInput: true,\n    prompt: `Press E to collect: ${title}`,\n    active: true,\n    oneShot: true,\n    data: {\n      evidenceId: id,\n      caseId\n    }\n  });\n  componentRegistry.addComponent(entityId, 'InteractionZone', interactionZone);\n\n  // Add trigger collider for detection\n  const collider = new Collider({\n    type: 'circle',\n    radius: 12,\n    isTrigger: true,\n    isStatic: true,\n    tags: ['evidence']\n  });\n  componentRegistry.addComponent(entityId, 'Collider', collider);\n\n  console.log(`[EvidenceEntity] Created evidence: ${title} at (${x}, ${y})`);\n\n  return entityId;\n}\n\n/**\n * Get visual color based on evidence type\n * @param {string} type\n * @returns {string}\n */\nfunction getEvidenceColor(type) {\n  const colors = {\n    physical: '#FFAA00', // Orange\n    digital: '#00FFFF', // Cyan\n    testimony: '#FF00FF', // Magenta\n    forensic: '#00FF00' // Green\n  };\n  return colors[type] || '#FFFFFF';\n}\n","/**\n * Controls\n *\n * Input mapping configuration for The Memory Syndicate.\n * Maps keyboard keys to game actions.\n */\n\nexport const Controls = {\n  // Movement (WASD)\n  moveUp: ['KeyW', 'ArrowUp'],\n  moveDown: ['KeyS', 'ArrowDown'],\n  moveLeft: ['KeyA', 'ArrowLeft'],\n  moveRight: ['KeyD', 'ArrowRight'],\n\n  // Actions\n  interact: ['KeyE'], // Evidence collection, dialogue, interaction\n  deductionBoard: ['Tab'], // Open deduction board\n  inventory: ['KeyI'], // Open inventory\n  pause: ['Escape'], // Pause menu\n\n  // Detective abilities\n  detectiveVision: ['KeyV'], // Activate detective vision\n  forensicAnalysis: ['KeyF'], // Analyze evidence\n\n  // Combat (future)\n  attack: ['Space'],\n  dodge: ['Shift'],\n\n  // UI navigation\n  confirm: ['Enter', 'Space'],\n  cancel: ['Escape'],\n\n  // Debug\n  debugToggle: ['Backquote'], // Toggle debug overlay (`)\n};\n\n/**\n * Input state manager\n * Tracks which keys are currently pressed\n */\nexport class InputState {\n  constructor() {\n    this.keys = new Map();\n    this.actions = new Map();\n\n    // Initialize action states\n    Object.keys(Controls).forEach(action => {\n      this.actions.set(action, false);\n    });\n\n    // Bind keyboard events\n    this.bindEvents();\n  }\n\n  /**\n   * Bind keyboard event listeners\n   */\n  bindEvents() {\n    window.addEventListener('keydown', (e) => this.handleKeyDown(e));\n    window.addEventListener('keyup', (e) => this.handleKeyUp(e));\n  }\n\n  /**\n   * Handle key down event\n   * @param {KeyboardEvent} event\n   */\n  handleKeyDown(event) {\n    // Prevent default for game keys\n    if (this.isGameKey(event.code)) {\n      event.preventDefault();\n    }\n\n    this.keys.set(event.code, true);\n    this.updateActions();\n  }\n\n  /**\n   * Handle key up event\n   * @param {KeyboardEvent} event\n   */\n  handleKeyUp(event) {\n    this.keys.set(event.code, false);\n    this.updateActions();\n  }\n\n  /**\n   * Update action states based on key mappings\n   */\n  updateActions() {\n    for (const [action, keyCodes] of Object.entries(Controls)) {\n      const isPressed = keyCodes.some(code => this.keys.get(code));\n      this.actions.set(action, isPressed);\n    }\n  }\n\n  /**\n   * Check if action is currently pressed\n   * @param {string} action - Action name\n   * @returns {boolean}\n   */\n  isPressed(action) {\n    return this.actions.get(action) || false;\n  }\n\n  /**\n   * Check if key is a game control key\n   * @param {string} code - Key code\n   * @returns {boolean}\n   */\n  isGameKey(code) {\n    return Object.values(Controls).flat().includes(code);\n  }\n\n  /**\n   * Reset all input states\n   */\n  reset() {\n    this.keys.clear();\n    this.actions.forEach((_, action) => {\n      this.actions.set(action, false);\n    });\n  }\n\n  /**\n   * Get movement vector from input\n   * @returns {Object} {x, y} normalized direction vector\n   */\n  getMovementVector() {\n    let x = 0;\n    let y = 0;\n\n    if (this.isPressed('moveLeft')) x -= 1;\n    if (this.isPressed('moveRight')) x += 1;\n    if (this.isPressed('moveUp')) y -= 1;\n    if (this.isPressed('moveDown')) y += 1;\n\n    // Normalize diagonal movement\n    if (x !== 0 && y !== 0) {\n      const length = Math.sqrt(x * x + y * y);\n      x /= length;\n      y /= length;\n    }\n\n    return { x, y };\n  }\n}\n","/**\n * Game.js\n *\n * Main game coordinator for The Memory Syndicate.\n * Initializes engine systems, loads game-specific systems, and creates initial scene.\n *\n * This file serves as the bridge between engine core and gameplay logic.\n */\n\n// Engine imports (will be implemented by engine-dev)\n// import { EntityManager } from '../engine/ecs/EntityManager.js';\n// import { ComponentRegistry } from '../engine/ecs/ComponentRegistry.js';\n// import { SystemManager } from '../engine/ecs/SystemManager.js';\n// import { EventBus } from '../engine/EventBus.js';\n// import { Renderer } from '../engine/renderer/Renderer.js';\n// import { Camera } from '../engine/renderer/Camera.js';\n\n// Game systems\nimport { PlayerMovementSystem } from './systems/PlayerMovementSystem.js';\nimport { InvestigationSystem } from './systems/InvestigationSystem.js';\nimport { FactionReputationSystem } from './systems/FactionReputationSystem.js';\nimport { KnowledgeProgressionSystem } from './systems/KnowledgeProgressionSystem.js';\nimport { DialogueSystem } from './systems/DialogueSystem.js';\nimport { CameraFollowSystem } from './systems/CameraFollowSystem.js';\n\n// Entity factories\nimport { createPlayerEntity } from './entities/PlayerEntity.js';\nimport { createEvidenceEntity } from './entities/EvidenceEntity.js';\nimport { createNPCEntity } from './entities/NPCEntity.js';\n\n// Configuration\nimport { GameConfig } from './config/GameConfig.js';\nimport { InputState } from './config/Controls.js';\n\n// Components\nimport { Transform } from './components/Transform.js';\nimport { Collider } from './components/Collider.js';\nimport { Sprite } from './components/Sprite.js';\n\n/**\n * Game coordinator class\n */\nexport class Game {\n  constructor(engine) {\n    // Engine references (provided by engine initialization)\n    this.engine = engine;\n    this.entityManager = engine.entityManager;\n    this.componentRegistry = engine.componentRegistry;\n    this.systemManager = engine.systemManager;\n    this.eventBus = engine.eventBus;\n    this.renderer = engine.renderer;\n    this.camera = engine.camera;\n\n    // Game state\n    this.inputState = new InputState();\n    this.paused = false;\n    this.loaded = false;\n\n    // Game systems (game-specific, not engine)\n    this.gameSystems = {\n      playerMovement: null,\n      investigation: null,\n      factionReputation: null,\n      knowledgeProgression: null,\n      dialogue: null,\n      cameraFollow: null\n    };\n  }\n\n  /**\n   * Initialize game\n   */\n  async init() {\n    console.log('[Game] Initializing The Memory Syndicate...');\n\n    // Register game-specific component types\n    this.registerComponentTypes();\n\n    // Initialize game systems\n    this.initializeGameSystems();\n\n    // Load initial scene\n    await this.loadTestScene();\n\n    this.loaded = true;\n\n    console.log('[Game] Initialization complete');\n  }\n\n  /**\n   * Register game component types with engine\n   */\n  registerComponentTypes() {\n    // Component types are registered when first added\n    // This is handled by ComponentRegistry automatically\n    console.log('[Game] Component types will be registered on first use');\n  }\n\n  /**\n   * Initialize game-specific systems\n   */\n  initializeGameSystems() {\n    console.log('[Game] Initializing game systems...');\n\n    // Create investigation system (needed by other systems)\n    this.gameSystems.investigation = new InvestigationSystem(\n      this.componentRegistry,\n      this.eventBus\n    );\n    this.gameSystems.investigation.init();\n\n    // Create player movement system\n    this.gameSystems.playerMovement = new PlayerMovementSystem(\n      this.componentRegistry,\n      this.eventBus,\n      this.inputState\n    );\n    this.gameSystems.playerMovement.init();\n\n    // Create faction reputation system\n    this.gameSystems.factionReputation = new FactionReputationSystem(\n      this.componentRegistry,\n      this.eventBus\n    );\n    this.gameSystems.factionReputation.init();\n\n    // Create knowledge progression system\n    this.gameSystems.knowledgeProgression = new KnowledgeProgressionSystem(\n      this.componentRegistry,\n      this.eventBus,\n      this.gameSystems.investigation\n    );\n    this.gameSystems.knowledgeProgression.init();\n\n    // Create dialogue system\n    this.gameSystems.dialogue = new DialogueSystem(\n      this.componentRegistry,\n      this.eventBus\n    );\n    this.gameSystems.dialogue.init();\n\n    // Create camera follow system\n    this.gameSystems.cameraFollow = new CameraFollowSystem(\n      this.componentRegistry,\n      this.eventBus,\n      this.camera\n    );\n    this.gameSystems.cameraFollow.init();\n\n    // Register systems with engine SystemManager\n    // Priority order: PlayerMovement (10), Investigation (30), Faction (25), Knowledge (35), Dialogue (40), Camera (90)\n    this.systemManager.registerSystem(this.gameSystems.playerMovement, 10);\n    this.systemManager.registerSystem(this.gameSystems.investigation, 30);\n    this.systemManager.registerSystem(this.gameSystems.factionReputation, 25);\n    this.systemManager.registerSystem(this.gameSystems.knowledgeProgression, 35);\n    this.systemManager.registerSystem(this.gameSystems.dialogue, 40);\n    this.systemManager.registerSystem(this.gameSystems.cameraFollow, 90);\n\n    console.log('[Game] Game systems initialized');\n  }\n\n  /**\n   * Load test scene for initial playtesting\n   */\n  async loadTestScene() {\n    console.log('[Game] Loading test scene...');\n\n    // Create player at center\n    const playerId = createPlayerEntity(\n      this.entityManager,\n      this.componentRegistry,\n      400, // x\n      300  // y\n    );\n\n    // Snap camera to player position\n    this.gameSystems.cameraFollow.snapTo(400, 300);\n\n    // Create evidence items around player\n    const evidencePositions = [\n      { x: 300, y: 200, title: 'Fingerprint', type: 'forensic', category: 'fingerprint' },\n      { x: 500, y: 250, title: 'Security Log', type: 'digital', category: 'document' },\n      { x: 350, y: 400, title: 'Witness Statement', type: 'testimony', category: 'testimony' },\n      { x: 450, y: 350, title: 'Memory Fragment', type: 'physical', category: 'memory_chip' }\n    ];\n\n    for (const evidenceData of evidencePositions) {\n      createEvidenceEntity(\n        this.entityManager,\n        this.componentRegistry,\n        {\n          ...evidenceData,\n          id: `evidence_${evidenceData.title.toLowerCase().replace(/\\s+/g, '_')}`,\n          description: `A piece of evidence: ${evidenceData.title}`,\n          caseId: 'case_tutorial',\n          derivedClues: [`clue_${evidenceData.category}`]\n        }\n      );\n    }\n\n    // Create boundary walls (simple collision boxes)\n    this.createBoundary(0, 0, 800, 20); // Top\n    this.createBoundary(0, 580, 800, 20); // Bottom\n    this.createBoundary(0, 0, 20, 600); // Left\n    this.createBoundary(780, 0, 20, 600); // Right\n\n    // Subscribe to game events for logging\n    this.subscribeToGameEvents();\n\n    console.log('[Game] Test scene loaded');\n  }\n\n  /**\n   * Create collision boundary\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   */\n  createBoundary(x, y, width, height) {\n    const entityId = this.entityManager.createEntity();\n    this.entityManager.tagEntity(entityId, 'wall');\n\n    // Transform (center of boundary)\n    const transform = new Transform(x + width / 2, y + height / 2);\n    this.componentRegistry.addComponent(entityId, 'Transform', transform);\n\n    // Collider\n    const collider = new Collider({\n      type: 'AABB',\n      width,\n      height,\n      isStatic: true,\n      isTrigger: false,\n      tags: ['wall', 'solid']\n    });\n    this.componentRegistry.addComponent(entityId, 'Collider', collider);\n\n    // Optional sprite for visualization\n    const sprite = new Sprite({\n      width,\n      height,\n      color: '#333333',\n      layer: 'tiles',\n      visible: true\n    });\n    this.componentRegistry.addComponent(entityId, 'Sprite', sprite);\n  }\n\n  /**\n   * Subscribe to game events for logging and debugging\n   */\n  subscribeToGameEvents() {\n    // Evidence events\n    this.eventBus.subscribe('evidence:collected', (data) => {\n      console.log(`[Game] Evidence collected: ${data.evidenceId}`);\n    });\n\n    this.eventBus.subscribe('evidence:detected', (data) => {\n      // Visual feedback for detected evidence (could highlight sprite)\n    });\n\n    // Clue events\n    this.eventBus.subscribe('clue:derived', (data) => {\n      console.log(`[Game] New clue: ${data.clueId} from ${data.evidenceId}`);\n    });\n\n    // Reputation events\n    this.eventBus.subscribe('reputation:changed', (data) => {\n      console.log(`[Game] Reputation changed: ${data.factionId} - ${data.newFame} fame, ${data.newInfamy} infamy`);\n    });\n\n    // Gate events\n    this.eventBus.subscribe('gate:unlocked', (data) => {\n      console.log(`[Game] Gate unlocked: ${data.gateId}`);\n    });\n\n    // Ability events\n    this.eventBus.subscribe('ability:unlocked', (data) => {\n      console.log(`[Game] Ability unlocked: ${data.abilityId}`);\n    });\n\n    // Player movement\n    this.eventBus.subscribe('player:moved', (data) => {\n      // Could add footstep sounds here\n    });\n  }\n\n  /**\n   * Update game (called by engine each frame)\n   * @param {number} deltaTime - Time since last frame (seconds)\n   */\n  update(deltaTime) {\n    if (!this.loaded || this.paused) return;\n\n    // Game systems are updated by SystemManager automatically\n    // This method is for game-level logic only\n\n    // Check for pause input\n    if (this.inputState.isPressed('pause')) {\n      this.togglePause();\n    }\n  }\n\n  /**\n   * Toggle pause state\n   */\n  togglePause() {\n    this.paused = !this.paused;\n\n    if (this.paused) {\n      this.eventBus.emit('game:pause');\n      console.log('[Game] Paused');\n    } else {\n      this.eventBus.emit('game:resume');\n      console.log('[Game] Resumed');\n    }\n  }\n\n  /**\n   * Cleanup game\n   */\n  cleanup() {\n    console.log('[Game] Cleaning up...');\n\n    // Cleanup all game systems\n    Object.values(this.gameSystems).forEach(system => {\n      if (system && system.cleanup) {\n        system.cleanup();\n      }\n    });\n\n    // Reset input state\n    this.inputState.reset();\n\n    console.log('[Game] Cleanup complete');\n  }\n}\n\n/**\n * Initialize and start the game\n * @param {Object} engine - Engine instance\n * @returns {Game} Game instance\n */\nexport async function initGame(engine) {\n  const game = new Game(engine);\n  await game.init();\n  return game;\n}\n","/**\n * PlayerEntity Factory\n *\n * Creates the player detective entity with all required components.\n * Tags entity as 'player' for easy querying.\n */\n\nimport { Transform } from '../components/Transform.js';\nimport { Sprite } from '../components/Sprite.js';\nimport { PlayerController } from '../components/PlayerController.js';\nimport { Collider } from '../components/Collider.js';\nimport { FactionMember } from '../components/FactionMember.js';\nimport { GameConfig } from '../config/GameConfig.js';\n\n/**\n * Create player entity\n * @param {Object} entityManager - Entity manager instance\n * @param {Object} componentRegistry - Component registry instance\n * @param {number} x - Spawn X position\n * @param {number} y - Spawn Y position\n * @returns {string} Entity ID\n */\nexport function createPlayerEntity(entityManager, componentRegistry, x = 0, y = 0) {\n  // Create entity\n  const entityId = entityManager.createEntity();\n  entityManager.tagEntity(entityId, 'player');\n\n  // Add Transform component\n  const transform = new Transform(x, y, 0, 1, 1);\n  componentRegistry.addComponent(entityId, 'Transform', transform);\n\n  // Add Sprite component (placeholder visual)\n  const sprite = new Sprite({\n    image: null, // Will be replaced with actual player sprite\n    width: 32,\n    height: 48,\n    layer: 'entities',\n    zIndex: 10,\n    color: '#00CCFF', // Detective blue placeholder\n    visible: true\n  });\n  componentRegistry.addComponent(entityId, 'Sprite', sprite);\n\n  // Add PlayerController component\n  const controller = new PlayerController({\n    moveSpeed: GameConfig.player.moveSpeed,\n    acceleration: GameConfig.player.acceleration,\n    friction: GameConfig.player.friction\n  });\n  componentRegistry.addComponent(entityId, 'PlayerController', controller);\n\n  // Add Collider component\n  const collider = new Collider({\n    type: 'AABB',\n    width: 28,\n    height: 40,\n    offsetX: 0,\n    offsetY: 4, // Offset down slightly for feet\n    isTrigger: false,\n    isStatic: false,\n    tags: ['player', 'solid']\n  });\n  componentRegistry.addComponent(entityId, 'Collider', collider);\n\n  // Add FactionMember component (player starts as civilian detective)\n  const factionMember = new FactionMember({\n    primaryFaction: 'civilian',\n    reputation: {\n      police: { fame: 10, infamy: 0 }, // Former officer\n      criminals: { fame: 0, infamy: 0 },\n      neurosynch: { fame: 5, infamy: 0 },\n      resistance: { fame: 0, infamy: 0 }\n    },\n    currentDisguise: null,\n    knownBy: new Set(),\n    relationshipModifiers: [\n      { factionId: 'police', modifier: 1.1, reason: 'former_officer' }\n    ]\n  });\n  componentRegistry.addComponent(entityId, 'FactionMember', factionMember);\n\n  console.log(`[PlayerEntity] Created player entity at (${x}, ${y})`);\n\n  return entityId;\n}\n","/**\n * Main entry point for The Memory Syndicate.\n */\nimport { Engine } from './engine/Engine.js';\nimport { Game } from './game/Game.js';\n\n// Wait for DOM to load\nwindow.addEventListener('DOMContentLoaded', async () => {\n  console.log('Starting The Memory Syndicate...');\n\n  // Get canvas element\n  const canvas = document.getElementById('game-canvas');\n  if (!canvas) {\n    console.error('Canvas element not found!');\n    return;\n  }\n\n  // Create engine\n  const engine = new Engine(canvas);\n\n  // Initialize engine\n  await engine.init();\n\n  // Create game\n  const game = new Game(engine);\n  await game.init();\n\n  // Hide loading screen\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.classList.add('hidden');\n  }\n\n  // Enable debug overlay (toggle with F3)\n  const debugOverlay = document.getElementById('debug-overlay');\n  let debugEnabled = false;\n\n  window.addEventListener('keydown', (e) => {\n    if (e.key === 'F3') {\n      e.preventDefault();\n      debugEnabled = !debugEnabled;\n      if (debugOverlay) {\n        debugOverlay.classList.toggle('visible', debugEnabled);\n      }\n    }\n  });\n\n  // Update debug overlay\n  setInterval(() => {\n    if (!debugEnabled || !debugOverlay) {\n      return;\n    }\n\n    const fpsElement = document.getElementById('debug-fps');\n    const entitiesElement = document.getElementById('debug-entities');\n    const memoryElement = document.getElementById('debug-memory');\n    const frameTimeElement = document.getElementById('debug-frame-time');\n\n    if (fpsElement) {\n      fpsElement.textContent = `FPS: ${engine.getFPS()}`;\n    }\n\n    if (entitiesElement) {\n      const count = engine.getEntityManager().getActiveEntityCount();\n      entitiesElement.textContent = `Entities: ${count}`;\n    }\n\n    if (memoryElement && performance.memory) {\n      const mb = (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(1);\n      memoryElement.textContent = `Memory: ${mb} MB`;\n    }\n\n    if (frameTimeElement) {\n      const frameTime = (engine.getDeltaTime() * 1000).toFixed(1);\n      frameTimeElement.textContent = `Frame: ${frameTime} ms`;\n    }\n  }, 500);\n\n  // Start engine\n  engine.start();\n\n  console.log('The Memory Syndicate started successfully!');\n\n  // Cleanup on page unload\n  window.addEventListener('beforeunload', () => {\n    engine.cleanup();\n    game.cleanup();\n  });\n});\n"],"names":["EventBus","constructor","this","listeners","Map","eventQueue","isProcessing","wildcardListeners","on","eventType","callback","context","priority","includes","listener","pattern","push","sort","a","b","index","indexOf","splice","has","set","listenerArray","get","array","off","findIndex","l","once","unsubscribe","data","call","emit","i","length","error","console","matchesPattern","enqueue","processQueue","queue","event","patternParts","split","eventParts","clear","delete","getListenerCount","getEventTypes","Array","from","keys","getTotalListenerCount","count","values","getQueuedEventCount","eventBus","GameLoop","systemManager","options","targetFPS","onFrame","targetFrameTime","running","paused","lastFrameTime","deltaTime","frameCount","fps","fpsFrameCount","fpsUpdateTime","frameTime","minFrameTime","Infinity","maxFrameTime","totalFrameTime","rafId","start","warn","performance","now","requestAnimationFrame","time","_loop","stop","cancelAnimationFrame","pause","resume","currentTime","Math","min","max","update","getFPS","getDeltaTime","getFrameCount","getFrameTime","getAverageFrameTime","getMinFrameTime","getMaxFrameTime","isRunning","isPaused","resetStats","AudioManager","audioContext","masterGain","sounds","music","initialized","init","window","AudioContext","webkitAudioContext","createGain","connect","destination","playSFX","soundId","volume","playMusic","trackId","setMasterVolume","gain","value","suspend","AssetLoader","maxRetries","retryDelay","timeout","progressCallbacks","loadedCount","totalCount","onProgress","_emitProgress","percentage","loadImage","url","retryCount","Promise","resolve","reject","img","Image","timedOut","timeoutId","setTimeout","Error","onload","clearTimeout","onerror","async","_delay","retryResult","src","loadJSON","controller","AbortController","abort","response","fetch","signal","ok","status","statusText","json","message","loadAudio","audio","Audio","addEventListener","load","loadBatch","assets","results","promises","asset","promise","_loadAssetByType","type","then","success","catch","all","toLowerCase","ms","resetProgress","getProgress","loaded","total","AssetPriority","AssetManager","loader","loading","manifest","groups","priorityQueues","AssetPriority_CRITICAL","AssetPriority_DISTRICT","AssetPriority_OPTIONAL","loadingStats","loadManifest","_buildGroups","group","Set","add","id","loadAsset","assetId","refCount","_loadAssetData","assetInfo","_getAssetInfo","getAsset","releaseAsset","_unloadAsset","HTMLImageElement","HTMLAudioElement","preloadGroup","groupName","assetIds","size","map","info","preloadAssets","critical","district","optional","criticalResults","_loadPriorityBatch","districtResults","_emitPriorityProgress","stats","unloadGroup","unloadUnused","toUnload","unloaded","getLoadingStats","getStats","memory","_estimateMemoryUsage","bytes","width","height","JSON","stringify","_Logger","level","LogLevel","INFO","logs","maxLogs","setLevel","getTimestamp","Date","String","getHours","padStart","getMinutes","getSeconds","getMilliseconds","format","store","timestamp","shift","debug","args","DEBUG","join","log","WARN","ERROR","getLogs","clearLogs","exportLogs","NONE","Logger","Engine","canvas","logger","entityManager","EntityManager","componentRegistry","ComponentRegistry","SystemManager","gameLoop","metrics","_onFrame","renderer","Renderer","audioManager","assetManager","registerSystem","system","name","render","getEntityManager","getComponentRegistry","getSystemManager","getEventBus","getRenderer","getAudioManager","getAssetManager","getGameLoop","cleanup","GameConfig","player","moveSpeed","acceleration","friction","observationRadius","detectiveVisionDuration","detectiveVisionCooldown","faction","cascadeMultiplier","attitudeThresholds","allied","fame","infamy","friendly","neutral","hostile","knowledge","gateCheckInterval","camera","followSpeed","lookAheadDistance","deadzone","getFactionAttitudeThresholds","factionId","police","criminals","PlayerMovementSystem","inputState","components","events","input","requiredComponents","subscribe","entities","playerEntities","filter","e","hasTag","entity","getComponent","transform","moveVector","getMovementVector","x","y","accel","velocityX","velocityY","direction","position","currentSpeed","sqrt","scale","abs","oldX","oldY","to","velocity","updateControllerInput","moveLeft","isPressed","moveRight","moveUp","moveDown","interact","deductionBoard","inventory","InvestigationSystem","playerKnowledge","playerAbilities","playerCasesSolved","collectedEvidence","discoveredClues","activeCase","detectiveVisionActive","detectiveVisionTimer","updateDetectiveVision","find","playerTransform","scanForEvidence","checkInteractionZones","deactivateDetectiveVision","radius","radiusSq","evidence","collected","dx","dy","distSq","hidden","entityId","evidenceId","distance","playerController","interactPressed","zone","active","isInRange","requiresInput","collectEvidence","text","prompt","canCollect","collect","caseId","category","checkClueDerivation","title","reason","required","requires","clueId","derivedClues","activateDetectiveVision","ability","remaining","duration","cooldown","unlockAbility","abilityId","learnKnowledge","knowledgeId","solveCase","accuracy","evidenceCollected","toFixed","getPlayerState","abilities","casesSolved","factionReputation","FactionReputationSystem","factionRelationships","initializeFactionRelationships","districtControl","playerFactionMember","relationships","allies","enemies","onEvidenceCollected","onCaseSolved","currentDisguise","checkDisguiseDetection","modifyReputation","fameDelta","infamyDelta","oldRep","getReputation","oldAttitude","getAttitude","newRep","newAttitude","oldFame","newFame","oldInfamy","newInfamy","cascadeReputation","sourceFactionId","multiplier","allyId","cascadeFame","floor","cascadeInfamy","enemyId","equipDisguise","removeDisguise","oldDisguise","getDistrictController","districtId","KnowledgeProgressionSystem","investigationSystem","investigation","gateCheckTimer","checkAllGates","playerState","gate","unlocked","checkRequirements","unlockGate","unlock","gateId","baseState","canAccessArea","areaId","DialogueSystem","activeDialogue","dialogueHistory","startDialogue","npcId","dialogueId","currentNode","choices","endDialogue","selectChoice","choiceIndex","choice","CameraFollowSystem","targetX","targetY","lookAhead","velocityMagnitude","lookAheadX","lookAheadY","round","shake","intensity","snapTo","Transform","rotation","scaleX","scaleY","setPosition","translate","distanceTo","other","clone","Sprite","image","layer","zIndex","visible","alpha","color","show","hide","setAlpha","PlayerController","resetInput","Object","forEach","key","isMoving","Collider","offsetX","offsetY","isTrigger","isStatic","tags","getBounds","minX","minY","maxX","maxY","tag","FactionMember","primaryFaction","reputation","knownBy","relationshipModifiers","entries","rep","isKnownBy","markKnownBy","Evidence","description","analyzed","analyze","InteractionZone","oneShot","used","zoneTransform","activate","deactivate","reset","createEvidenceEntity","evidenceData","createEntity","tagEntity","addComponent","sprite","getEvidenceColor","interactionZone","collider","physical","digital","testimony","forensic","Controls","detectiveVision","forensicAnalysis","attack","dodge","confirm","cancel","debugToggle","InputState","actions","action","bindEvents","handleKeyDown","handleKeyUp","isGameKey","code","preventDefault","updateActions","keyCodes","some","flat","_","Game","engine","gameSystems","playerMovement","knowledgeProgression","dialogue","cameraFollow","registerComponentTypes","initializeGameSystems","loadTestScene","factionMember","neurosynch","resistance","modifier","createPlayerEntity","evidencePositions","replace","createBoundary","subscribeToGameEvents","togglePause","document","getElementById","game","loadingScreen","classList","debugOverlay","debugEnabled","toggle","setInterval","fpsElement","entitiesElement","memoryElement","frameTimeElement","textContent","getActiveEntityCount","mb","usedJSHeapSize"],"mappings":"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"}
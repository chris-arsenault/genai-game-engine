class t{constructor(t=0,s=0,e=1280,i=720){this.x=t,this.y=s,this.width=e,this.height=i,this.zoom=1,this.followTarget=null,this.followSpeed=.1,this.followOffsetX=0,this.followOffsetY=0,this.shakeIntensity=0,this.shakeDecay=.9,this.shakeOffsetX=0,this.shakeOffsetY=0}follow(t,s=.1,e=0,i=0){this.followTarget=t,this.followSpeed=Math.max(0,Math.min(1,s)),this.followOffsetX=e,this.followOffsetY=i}stopFollowing(){this.followTarget=null}update(t,s){if(this.followTarget&&s){const e=s(this.followTarget);if(e){const s=e.x-this.width/(2*this.zoom)+this.followOffsetX,i=e.y-this.height/(2*this.zoom)+this.followOffsetY,h=1-Math.pow(1-this.followSpeed,60*t);this.x+=(s-this.x)*h,this.y+=(i-this.y)*h}}this.shakeIntensity>.1?(this.shakeOffsetX=(Math.random()-.5)*this.shakeIntensity,this.shakeOffsetY=(Math.random()-.5)*this.shakeIntensity,this.shakeIntensity*=this.shakeDecay):(this.shakeIntensity=0,this.shakeOffsetX=0,this.shakeOffsetY=0)}shake(t=10,s=.9){this.shakeIntensity=Math.max(this.shakeIntensity,t),this.shakeDecay=s}worldToScreen(t,s){return{x:(t-this.x)*this.zoom+this.shakeOffsetX,y:(s-this.y)*this.zoom+this.shakeOffsetY}}screenToWorld(t,s){return{x:(t-this.shakeOffsetX)/this.zoom+this.x,y:(s-this.shakeOffsetY)/this.zoom+this.y}}contains(t,s,e=0){return t>=this.x-e&&t<=this.x+this.width/this.zoom+e&&s>=this.y-e&&s<=this.y+this.height/this.zoom+e}containsRect(t,s,e,i){const h=this.x+this.width/this.zoom,o=this.y+this.height/this.zoom,a=s+i;return!(t+e<this.x||t>h||a<this.y||s>o)}setPosition(t,s){this.x=t,this.y=s}move(t,s){this.x+=t,this.y+=s}setZoom(t){this.zoom=Math.max(.1,Math.min(10,t))}getBounds(){return{x:this.x,y:this.y,width:this.width/this.zoom,height:this.height/this.zoom}}getCenter(){return{x:this.x+this.width/(2*this.zoom),y:this.y+this.height/(2*this.zoom)}}}class s{constructor(s){this.canvas=s,this.ctx=s.getContext("2d",{alpha:!1}),this.width=s.width,this.height=s.height,this.camera=new t(0,0,this.width,this.height),this.frameTime=0,this.renderTime=0,this.lastFrameStart=0,this.clearColor="#000000",this.imageSmoothing=!1,this.ctx.imageSmoothingEnabled=this.imageSmoothing,this._setupResizeObserver()}_setupResizeObserver(){"undefined"!=typeof ResizeObserver&&(this.resizeObserver=new ResizeObserver(t=>{for(const s of t)s.target===this.canvas&&this.handleResize()}),this.resizeObserver.observe(this.canvas))}handleResize(){this.width=this.canvas.width,this.height=this.canvas.height,this.camera.width=this.width,this.camera.height=this.height}clear(){this.ctx.fillStyle=this.clearColor,this.ctx.fillRect(0,0,this.width,this.height)}beginFrame(){return this.lastFrameStart=performance.now(),this.lastFrameStart}endFrame(){const t=performance.now();this.renderTime=t-this.lastFrameStart,this.frameTime=this.renderTime}getCamera(){return this.camera}setClearColor(t){this.clearColor=t}setImageSmoothing(t){this.imageSmoothing=t,this.ctx.imageSmoothingEnabled=t}getRenderTime(){return this.renderTime}worldToScreen(t,s){return this.camera.worldToScreen(t,s)}screenToWorld(t,s){return this.camera.screenToWorld(t,s)}isVisible(t,s,e=0){return this.camera.contains(t,s,e)}isRectVisible(t,s,e,i){const h=this.camera;return!(t+e<h.x||t>h.x+h.width||s+i<h.y||s>h.y+h.height)}updateCamera(t,s){this.camera.update(t,s)}cleanup(){this.resizeObserver&&this.resizeObserver.disconnect()}}export{s as R};
//# sourceMappingURL=renderer-aVtcfGsw.js.map

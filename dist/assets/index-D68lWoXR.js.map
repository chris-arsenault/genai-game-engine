{"version":3,"file":"index-D68lWoXR.js","sources":["../../src/engine/events/EventBus.js","../../src/engine/audio/AudioManager.js","../../src/engine/assets/AssetManager.js","../../src/utils/Logger.js","../../src/engine/Engine.js","../../src/game/config/GameConfig.js","../../src/game/systems/PlayerMovementSystem.js","../../src/game/systems/InvestigationSystem.js","../../src/game/systems/FactionReputationSystem.js","../../src/game/systems/KnowledgeProgressionSystem.js","../../src/game/systems/DialogueSystem.js","../../src/game/systems/CameraFollowSystem.js","../../src/game/components/Transform.js","../../src/game/components/Sprite.js","../../src/game/components/PlayerController.js","../../src/game/components/Collider.js","../../src/game/components/FactionMember.js","../../src/game/components/Evidence.js","../../src/game/components/InteractionZone.js","../../src/game/entities/EvidenceEntity.js","../../src/game/config/Controls.js","../../src/game/Game.js","../../src/game/entities/PlayerEntity.js","../../src/main.js"],"sourcesContent":["/**\n * EventBus - central pub/sub event system for decoupled communication.\n * Enables systems to communicate without direct dependencies.\n *\n * Event naming convention: domain:action (e.g., 'entity:damaged', 'quest:completed')\n * Performance target: <0.1ms per event dispatch, <1ms per frame for 100 events.\n *\n * @class EventBus\n * @example\n * // Subscribe to event\n * eventBus.on('entity:damaged', (data) => {\n *   console.log(`Entity ${data.entityId} took ${data.damage} damage`);\n * });\n *\n * // Emit event\n * eventBus.emit('entity:damaged', { entityId: 5, damage: 10 });\n */\nexport class EventBus {\n  constructor() {\n    this.listeners = new Map(); // eventType -> Array<{callback, context, priority}>\n    this.eventQueue = []; // Deferred events processed at end of frame\n    this.isProcessing = false;\n    this.wildcardListeners = []; // Wildcard subscriptions (e.g., 'entity:*')\n  }\n\n  /**\n   * Subscribes to an event.\n   * @param {string} eventType - Event type (e.g., 'entity:damaged', 'entity:*' for wildcard)\n   * @param {Function} callback - Callback function(data)\n   * @param {object|null} context - Context for callback (this binding)\n   * @param {number} priority - Priority (lower = runs earlier, default 50)\n   * @returns {Function} Unsubscribe function\n   */\n  on(eventType, callback, context = null, priority = 50) {\n    // Handle wildcard subscriptions\n    if (eventType.includes('*')) {\n      const listener = { pattern: eventType, callback, context, priority };\n      this.wildcardListeners.push(listener);\n      this.wildcardListeners.sort((a, b) => a.priority - b.priority);\n\n      return () => {\n        const index = this.wildcardListeners.indexOf(listener);\n        if (index !== -1) {\n          this.wildcardListeners.splice(index, 1);\n        }\n      };\n    }\n\n    // Regular subscription\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, []);\n    }\n\n    const listener = { callback, context, priority };\n    const listenerArray = this.listeners.get(eventType);\n    listenerArray.push(listener);\n\n    // Sort by priority\n    listenerArray.sort((a, b) => a.priority - b.priority);\n\n    // Return unsubscribe function\n    return () => {\n      const array = this.listeners.get(eventType);\n      if (array) {\n        const index = array.indexOf(listener);\n        if (index !== -1) {\n          array.splice(index, 1);\n        }\n      }\n    };\n  }\n\n  /**\n   * Unsubscribes from an event.\n   * @param {string} eventType - Event type\n   * @param {Function} callback - Callback to remove\n   */\n  off(eventType, callback) {\n    const listeners = this.listeners.get(eventType);\n    if (!listeners) {\n      return;\n    }\n\n    const index = listeners.findIndex((l) => l.callback === callback);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Subscribes to an event for one-time execution.\n   * @param {string} eventType - Event type\n   * @param {Function} callback - Callback function\n   * @param {object|null} context - Context for callback\n   * @param {number} priority - Priority\n   * @returns {Function} Unsubscribe function\n   */\n  once(eventType, callback, context = null, priority = 50) {\n    const unsubscribe = this.on(\n      eventType,\n      (data) => {\n        unsubscribe();\n        callback.call(context, data);\n      },\n      context,\n      priority\n    );\n    return unsubscribe;\n  }\n\n  /**\n   * Emits an event immediately.\n   * @param {string} eventType - Event type\n   * @param {object} data - Event data\n   */\n  emit(eventType, data = {}) {\n    // Call regular listeners\n    const listeners = this.listeners.get(eventType);\n    if (listeners) {\n      for (let i = 0; i < listeners.length; i++) {\n        const listener = listeners[i];\n        try {\n          listener.callback.call(listener.context, data);\n        } catch (error) {\n          console.error(`Error in event handler for ${eventType}:`, error);\n        }\n      }\n    }\n\n    // Call wildcard listeners\n    for (let i = 0; i < this.wildcardListeners.length; i++) {\n      const listener = this.wildcardListeners[i];\n      if (this.matchesPattern(eventType, listener.pattern)) {\n        try {\n          listener.callback.call(listener.context, { eventType, ...data });\n        } catch (error) {\n          console.error(`Error in wildcard handler for ${listener.pattern}:`, error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Queues an event for deferred execution (processed at end of frame).\n   * Use this to avoid mid-frame state inconsistencies.\n   *\n   * @param {string} eventType - Event type\n   * @param {object} data - Event data\n   */\n  enqueue(eventType, data = {}) {\n    this.eventQueue.push({ eventType, data });\n  }\n\n  /**\n   * Processes all queued events.\n   * Call this once at the end of each frame.\n   */\n  processQueue() {\n    if (this.isProcessing) {\n      return;\n    }\n\n    this.isProcessing = true;\n\n    // Make a copy of the queue and clear it\n    const queue = [...this.eventQueue];\n    this.eventQueue = [];\n\n    // Process all queued events\n    for (let i = 0; i < queue.length; i++) {\n      const event = queue[i];\n      this.emit(event.eventType, event.data);\n    }\n\n    this.isProcessing = false;\n  }\n\n  /**\n   * Checks if event type matches wildcard pattern.\n   * @param {string} eventType - Event type (e.g., 'entity:damaged')\n   * @param {string} pattern - Pattern (e.g., 'entity:*')\n   * @returns {boolean} True if matches\n   */\n  matchesPattern(eventType, pattern) {\n    const patternParts = pattern.split(':');\n    const eventParts = eventType.split(':');\n\n    if (patternParts.length !== eventParts.length) {\n      return false;\n    }\n\n    for (let i = 0; i < patternParts.length; i++) {\n      if (patternParts[i] === '*') {\n        continue;\n      }\n      if (patternParts[i] !== eventParts[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Removes all listeners for an event type.\n   * @param {string} eventType - Event type (optional, clears all if not provided)\n   */\n  clear(eventType = null) {\n    if (eventType) {\n      this.listeners.delete(eventType);\n    } else {\n      this.listeners.clear();\n      this.wildcardListeners = [];\n      this.eventQueue = [];\n    }\n  }\n\n  /**\n   * Gets listener count for an event type.\n   * @param {string} eventType - Event type\n   * @returns {number} Listener count\n   */\n  getListenerCount(eventType) {\n    const listeners = this.listeners.get(eventType);\n    return listeners ? listeners.length : 0;\n  }\n\n  /**\n   * Gets all registered event types.\n   * @returns {string[]} Event types\n   */\n  getEventTypes() {\n    return Array.from(this.listeners.keys());\n  }\n\n  /**\n   * Gets total listener count across all events.\n   * @returns {number} Total listener count\n   */\n  getTotalListenerCount() {\n    let count = this.wildcardListeners.length;\n    for (const listeners of this.listeners.values()) {\n      count += listeners.length;\n    }\n    return count;\n  }\n\n  /**\n   * Gets queued event count.\n   * @returns {number} Queued event count\n   */\n  getQueuedEventCount() {\n    return this.eventQueue.length;\n  }\n}\n\n// Global event bus instance\nexport const eventBus = new EventBus();\n","/**\n * AudioManager - Web Audio API wrapper for music and SFX.\n * TODO: Implement adaptive music and 3D positional audio.\n */\nexport class AudioManager {\n  constructor() {\n    this.audioContext = null;\n    this.masterGain = null;\n    this.sounds = new Map();\n    this.music = new Map();\n    this.initialized = false;\n  }\n\n  async init() {\n    this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    this.masterGain = this.audioContext.createGain();\n    this.masterGain.connect(this.audioContext.destination);\n    this.initialized = true;\n  }\n\n  playSFX(soundId, volume = 1.0) {\n    if (!this.initialized) {\n      return;\n    }\n    // TODO: Implement SFX playback with object pool\n  }\n\n  playMusic(trackId) {\n    if (!this.initialized) {\n      return;\n    }\n    // TODO: Implement music playback with looping\n  }\n\n  setMasterVolume(volume) {\n    if (this.masterGain) {\n      this.masterGain.gain.value = Math.max(0, Math.min(1, volume));\n    }\n  }\n\n  pause() {\n    if (this.audioContext) {\n      this.audioContext.suspend();\n    }\n  }\n\n  resume() {\n    if (this.audioContext) {\n      this.audioContext.resume();\n    }\n  }\n}\n","/**\n * AssetManager - lazy loading with reference counting.\n * Performance: <3s initial load, <1s per level.\n */\nexport class AssetManager {\n  constructor() {\n    this.assets = new Map();\n    this.loading = new Map();\n    this.manifest = null;\n  }\n\n  async loadManifest(url) {\n    const response = await fetch(url);\n    this.manifest = await response.json();\n  }\n\n  async loadAsset(assetId) {\n    if (this.assets.has(assetId)) {\n      const asset = this.assets.get(assetId);\n      asset.refCount++;\n      return asset.data;\n    }\n\n    if (this.loading.has(assetId)) {\n      return this.loading.get(assetId);\n    }\n\n    const promise = this._loadAssetData(assetId);\n    this.loading.set(assetId, promise);\n\n    const data = await promise;\n    this.loading.delete(assetId);\n\n    this.assets.set(assetId, { data, refCount: 1 });\n    return data;\n  }\n\n  async _loadAssetData(assetId) {\n    // TODO: Implement actual asset loading based on type\n    return null;\n  }\n\n  unloadAsset(assetId) {\n    const asset = this.assets.get(assetId);\n    if (asset) {\n      asset.refCount--;\n      if (asset.refCount <= 0) {\n        this.assets.delete(assetId);\n      }\n    }\n  }\n\n  getAsset(assetId) {\n    const asset = this.assets.get(assetId);\n    return asset ? asset.data : null;\n  }\n}\n","/**\n * Logger - debug logging utility with log levels and formatting.\n * Provides structured logging with timestamps and context.\n *\n * @class Logger\n */\nexport class Logger {\n  static LogLevel = {\n    DEBUG: 0,\n    INFO: 1,\n    WARN: 2,\n    ERROR: 3,\n    NONE: 4,\n  };\n\n  /**\n   * Creates a new logger instance.\n   * @param {string} context - Logger context name (e.g., 'Engine', 'Renderer')\n   * @param {number} level - Minimum log level to display\n   */\n  constructor(context = 'Global', level = Logger.LogLevel.INFO) {\n    this.context = context;\n    this.level = level;\n    this.logs = []; // Store logs for debugging\n    this.maxLogs = 100; // Max stored logs\n  }\n\n  /**\n   * Sets the logging level.\n   * @param {number} level - Log level\n   */\n  setLevel(level) {\n    this.level = level;\n  }\n\n  /**\n   * Gets timestamp string.\n   * @returns {string} Formatted timestamp\n   */\n  getTimestamp() {\n    const now = new Date();\n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    const seconds = String(now.getSeconds()).padStart(2, '0');\n    const ms = String(now.getMilliseconds()).padStart(3, '0');\n    return `${hours}:${minutes}:${seconds}.${ms}`;\n  }\n\n  /**\n   * Formats log message.\n   * @param {string} level - Log level name\n   * @param {string} message - Log message\n   * @returns {string} Formatted log message\n   */\n  format(level, message) {\n    return `[${this.getTimestamp()}] [${level}] [${this.context}] ${message}`;\n  }\n\n  /**\n   * Stores log entry.\n   * @param {string} level - Log level\n   * @param {string} message - Log message\n   */\n  store(level, message) {\n    this.logs.push({\n      timestamp: Date.now(),\n      level,\n      context: this.context,\n      message,\n    });\n\n    // Trim logs if exceeds max\n    if (this.logs.length > this.maxLogs) {\n      this.logs.shift();\n    }\n  }\n\n  /**\n   * Logs debug message.\n   * @param {...any} args - Arguments to log\n   */\n  debug(...args) {\n    if (this.level <= Logger.LogLevel.DEBUG) {\n      const message = args.join(' ');\n      console.log(this.format('DEBUG', message));\n      this.store('DEBUG', message);\n    }\n  }\n\n  /**\n   * Logs info message.\n   * @param {...any} args - Arguments to log\n   */\n  info(...args) {\n    if (this.level <= Logger.LogLevel.INFO) {\n      const message = args.join(' ');\n      console.log(this.format('INFO', message));\n      this.store('INFO', message);\n    }\n  }\n\n  /**\n   * Logs warning message.\n   * @param {...any} args - Arguments to log\n   */\n  warn(...args) {\n    if (this.level <= Logger.LogLevel.WARN) {\n      const message = args.join(' ');\n      console.warn(this.format('WARN', message));\n      this.store('WARN', message);\n    }\n  }\n\n  /**\n   * Logs error message.\n   * @param {...any} args - Arguments to log\n   */\n  error(...args) {\n    if (this.level <= Logger.LogLevel.ERROR) {\n      const message = args.join(' ');\n      console.error(this.format('ERROR', message));\n      this.store('ERROR', message);\n    }\n  }\n\n  /**\n   * Gets stored logs.\n   * @returns {Array} Log entries\n   */\n  getLogs() {\n    return this.logs;\n  }\n\n  /**\n   * Clears stored logs.\n   */\n  clearLogs() {\n    this.logs = [];\n  }\n\n  /**\n   * Exports logs as JSON string.\n   * @returns {string} JSON string of logs\n   */\n  exportLogs() {\n    return JSON.stringify(this.logs, null, 2);\n  }\n}\n\n// Global logger instance\nexport const logger = new Logger('Engine', Logger.LogLevel.INFO);\n","/**\n * Engine - main game engine coordinator.\n * Orchestrates ECS, rendering, physics, audio, and asset management.\n * Performance target: 60 FPS (16ms frame budget).\n */\nimport { EntityManager } from './ecs/EntityManager.js';\nimport { ComponentRegistry } from './ecs/ComponentRegistry.js';\nimport { SystemManager } from './ecs/SystemManager.js';\nimport { EventBus } from './events/EventBus.js';\nimport { Renderer } from './renderer/Renderer.js';\nimport { AudioManager } from './audio/AudioManager.js';\nimport { AssetManager } from './assets/AssetManager.js';\nimport { Logger } from '../utils/Logger.js';\n\nexport class Engine {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.logger = new Logger('Engine', Logger.LogLevel.INFO);\n    this.running = false;\n    this.lastTime = 0;\n    this.deltaTime = 0;\n    this.fps = 60;\n    this.frameCount = 0;\n    this.fpsUpdateTime = 0;\n\n    // Initialize core systems\n    this.eventBus = new EventBus();\n    this.entityManager = new EntityManager();\n    this.componentRegistry = new ComponentRegistry(this.entityManager);\n    this.systemManager = new SystemManager(\n      this.entityManager,\n      this.componentRegistry,\n      this.eventBus\n    );\n\n    // Initialize subsystems\n    this.renderer = new Renderer(canvas);\n    this.audioManager = new AudioManager();\n    this.assetManager = new AssetManager();\n\n    this.logger.info('Engine initialized');\n  }\n\n  async init() {\n    this.logger.info('Initializing engine...');\n\n    // Initialize audio (requires user gesture)\n    await this.audioManager.init();\n\n    // Initialize systems\n    this.systemManager.init();\n\n    this.logger.info('Engine ready');\n  }\n\n  registerSystem(system, name) {\n    this.systemManager.registerSystem(system, name);\n    this.logger.debug(`Registered system: ${name}`);\n  }\n\n  start() {\n    if (this.running) {\n      this.logger.warn('Engine already running');\n      return;\n    }\n\n    this.running = true;\n    this.lastTime = performance.now();\n    this.logger.info('Engine started');\n\n    // Start game loop\n    requestAnimationFrame((time) => this.gameLoop(time));\n  }\n\n  stop() {\n    this.running = false;\n    this.logger.info('Engine stopped');\n  }\n\n  gameLoop(currentTime) {\n    if (!this.running) {\n      return;\n    }\n\n    // Calculate delta time\n    this.deltaTime = (currentTime - this.lastTime) / 1000;\n    this.lastTime = currentTime;\n\n    // Update FPS counter\n    this.frameCount++;\n    if (currentTime - this.fpsUpdateTime >= 1000) {\n      this.fps = this.frameCount;\n      this.frameCount = 0;\n      this.fpsUpdateTime = currentTime;\n    }\n\n    // Update systems\n    this.systemManager.update(this.deltaTime);\n\n    // Render\n    this.renderer.render(this.componentRegistry);\n\n    // Process event queue\n    this.eventBus.processQueue();\n\n    // Continue loop\n    requestAnimationFrame((time) => this.gameLoop(time));\n  }\n\n  getEntityManager() {\n    return this.entityManager;\n  }\n\n  getComponentRegistry() {\n    return this.componentRegistry;\n  }\n\n  getSystemManager() {\n    return this.systemManager;\n  }\n\n  getEventBus() {\n    return this.eventBus;\n  }\n\n  getRenderer() {\n    return this.renderer;\n  }\n\n  getAudioManager() {\n    return this.audioManager;\n  }\n\n  getAssetManager() {\n    return this.assetManager;\n  }\n\n  getFPS() {\n    return this.fps;\n  }\n\n  getDeltaTime() {\n    return this.deltaTime;\n  }\n\n  cleanup() {\n    this.logger.info('Cleaning up engine...');\n    this.stop();\n    this.systemManager.cleanup();\n    this.eventBus.clear();\n    this.logger.info('Engine cleaned up');\n  }\n}\n","/**\n * GameConfig\n *\n * Tunable gameplay parameters for The Memory Syndicate.\n * Adjust these values to tune gameplay feel.\n */\nexport const GameConfig = {\n  player: {\n    // Movement\n    moveSpeed: 200, // pixels/second\n    acceleration: 1200, // pixels/second²\n    friction: 0.85, // deceleration multiplier (0.0-1.0)\n\n    // Investigation\n    observationRadius: 96, // evidence detection radius\n    interactionRadius: 64, // interaction zone radius\n    detectiveVisionDuration: 5000, // milliseconds\n    detectiveVisionCooldown: 10000, // milliseconds\n    detectiveVisionEnergyCost: 1, // energy per second\n\n    // Combat (future implementation)\n    maxHealth: 100,\n    baseAttackDamage: 10,\n    attackSpeed: 0.5, // seconds between attacks\n  },\n\n  investigation: {\n    // Evidence collection\n    evidenceCollectionTime: 500, // milliseconds to collect\n    forensicAnalysisTime: 2000, // milliseconds to analyze\n    clueRevealDelay: 300, // milliseconds between clue reveals\n\n    // Deduction board\n    theoryValidationTime: 1000, // milliseconds to validate theory\n    minConnectionsForTheory: 3, // minimum clue connections needed\n    accuracyThresholdForUnlock: 0.7, // 70% accuracy needed for progression\n\n    // Detective vision\n    visionHighlightColor: '#00FFFF',\n    visionPulseSpeed: 2.0, // pulses per second\n  },\n\n  faction: {\n    // Reputation\n    fameMax: 100,\n    infamyMax: 100,\n    cascadeMultiplier: 0.5, // reputation cascade to allies/enemies\n    disguiseBaseEffectiveness: 0.8, // 80% chance to fool NPCs\n    disguiseDetectionInterval: 1000, // check every second\n    recognitionMemoryDuration: 300000, // 5 minutes\n\n    // Attitude thresholds (default for most factions)\n    attitudeThresholds: {\n      allied: { fame: 80, infamy: 0 },\n      friendly: { fame: 40, infamy: 0 },\n      neutral: { fame: 0, infamy: 0 },\n      hostile: { fame: 0, infamy: 30 }\n    }\n  },\n\n  knowledge: {\n    // Progression gates\n    gateCheckInterval: 500, // check gates every 500ms\n    abilityUnlockDelay: 1000, // delay before showing unlock notification\n\n    // Knowledge categories and their progression\n    forensicSkillMax: 3,\n    technicalSkillMax: 3,\n    socialSkillMax: 3\n  },\n\n  npc: {\n    // AI behavior\n    chaseRange: 300,\n    attackRange: 50,\n    moveSpeed: 100,\n    aggroTime: 2000, // milliseconds before attacking\n    patrolSpeed: 60,\n    sightRange: 200,\n    sightAngle: Math.PI / 2, // 90 degree cone\n\n    // Dialogue\n    dialogueRange: 80,\n    dialogueTimeout: 30000 // auto-close after 30 seconds\n  },\n\n  camera: {\n    // Follow behavior\n    followSpeed: 0.1, // lerp factor (0.0-1.0), lower = smoother\n    lookAheadDistance: 100, // pixels ahead of player movement\n    deadzone: 32, // pixels player can move before camera follows\n\n    // Screen shake\n    shakeDecay: 0.8, // decay per frame\n    minShakeThreshold: 0.1 // stop shaking below this intensity\n  },\n\n  world: {\n    // Physics\n    gravity: 0, // top-down game, no gravity\n    maxVelocity: 500, // pixels/second\n\n    // Spatial partitioning\n    spatialHashCellSize: 128, // pixels per grid cell\n\n    // Performance\n    maxEntitiesPerFrame: 1000,\n    cullMargin: 100 // pixels outside viewport to still render\n  },\n\n  ui: {\n    // HUD\n    hudFadeTime: 300, // milliseconds\n    notificationDuration: 3000, // milliseconds\n    tooltipDelay: 500, // milliseconds before showing tooltip\n\n    // Menus\n    menuTransitionTime: 200, // milliseconds\n    pauseBlurAmount: 5 // pixels\n  },\n\n  audio: {\n    // Volume (0.0 to 1.0)\n    masterVolume: 0.8,\n    musicVolume: 0.7,\n    sfxVolume: 0.9,\n    ambienceVolume: 0.5,\n\n    // Adaptive music\n    layerTransitionTime: 1.5, // seconds\n    musicStates: {\n      exploration: { ambient: 1.0, tension: 0.0, combat: 0.0 },\n      investigation: { ambient: 0.6, tension: 0.4, combat: 0.0 },\n      stealth: { ambient: 0.3, tension: 0.7, combat: 0.0 },\n      combat: { ambient: 0.2, tension: 0.3, combat: 1.0 }\n    }\n  },\n\n  debug: {\n    showColliders: false,\n    showSpatialHash: false,\n    showFPS: true,\n    showEntityCount: true,\n    godMode: false\n  }\n};\n\n/**\n * Get faction-specific attitude thresholds\n * @param {string} factionId - Faction identifier\n * @returns {Object} Attitude thresholds\n */\nexport function getFactionAttitudeThresholds(factionId) {\n  // Override thresholds for specific factions\n  const overrides = {\n    police: {\n      allied: { fame: 75, infamy: 0 },\n      friendly: { fame: 35, infamy: 5 },\n      neutral: { fame: 0, infamy: 0 },\n      hostile: { fame: 0, infamy: 25 }\n    },\n    criminals: {\n      allied: { fame: 80, infamy: 20 },\n      friendly: { fame: 40, infamy: 0 },\n      neutral: { fame: 0, infamy: 0 },\n      hostile: { fame: 0, infamy: 40 }\n    }\n  };\n\n  return overrides[factionId] || GameConfig.faction.attitudeThresholds;\n}\n","/**\n * PlayerMovementSystem\n *\n * Handles player WASD input and smooth movement.\n * Applies acceleration, friction, and velocity clamping.\n *\n * Priority: 10 (early in update loop)\n * Queries: [PlayerController, Transform]\n */\n\nimport { GameConfig } from '../config/GameConfig.js';\n\nexport class PlayerMovementSystem {\n  constructor(componentRegistry, eventBus, inputState) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.input = inputState;\n    this.requiredComponents = ['PlayerController', 'Transform'];\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    // Subscribe to relevant events\n    this.events.subscribe('game:pause', () => {\n      this.paused = true;\n    });\n\n    this.events.subscribe('game:resume', () => {\n      this.paused = false;\n    });\n\n    this.paused = false;\n  }\n\n  /**\n   * Update player movement each frame\n   * @param {number} deltaTime - Time since last frame (seconds)\n   * @param {Array} entities - Entities with required components\n   */\n  update(deltaTime, entities) {\n    if (this.paused) return;\n\n    // Find player entity (should only be one)\n    const playerEntities = entities.filter(e => e.hasTag && e.hasTag('player'));\n    if (playerEntities.length === 0) return;\n\n    const entity = playerEntities[0];\n    const controller = this.components.getComponent(entity.id, 'PlayerController');\n    const transform = this.components.getComponent(entity.id, 'Transform');\n\n    if (!controller || !transform) return;\n\n    // Get movement input\n    const moveVector = this.input.getMovementVector();\n\n    // Apply acceleration based on input\n    if (moveVector.x !== 0 || moveVector.y !== 0) {\n      const accel = controller.acceleration * deltaTime;\n      controller.velocityX += moveVector.x * accel;\n      controller.velocityY += moveVector.y * accel;\n\n      // Emit movement event\n      this.events.emit('player:moving', {\n        direction: { x: moveVector.x, y: moveVector.y },\n        position: { x: transform.x, y: transform.y }\n      });\n    }\n\n    // Apply friction\n    controller.velocityX *= controller.friction;\n    controller.velocityY *= controller.friction;\n\n    // Clamp to max speed\n    const currentSpeed = Math.sqrt(\n      controller.velocityX * controller.velocityX +\n      controller.velocityY * controller.velocityY\n    );\n\n    if (currentSpeed > controller.moveSpeed) {\n      const scale = controller.moveSpeed / currentSpeed;\n      controller.velocityX *= scale;\n      controller.velocityY *= scale;\n    }\n\n    // Stop if velocity very low (prevents jittering)\n    if (Math.abs(controller.velocityX) < 0.1) controller.velocityX = 0;\n    if (Math.abs(controller.velocityY) < 0.1) controller.velocityY = 0;\n\n    // Update position\n    const oldX = transform.x;\n    const oldY = transform.y;\n\n    transform.x += controller.velocityX * deltaTime;\n    transform.y += controller.velocityY * deltaTime;\n\n    // Emit position change event if moved significantly\n    const distMoved = Math.sqrt(\n      (transform.x - oldX) ** 2 + (transform.y - oldY) ** 2\n    );\n\n    if (distMoved > 1) {\n      this.events.emit('player:moved', {\n        from: { x: oldX, y: oldY },\n        to: { x: transform.x, y: transform.y },\n        velocity: { x: controller.velocityX, y: controller.velocityY }\n      });\n    }\n\n    // Update controller input state (sync with InputState)\n    this.updateControllerInput(controller);\n  }\n\n  /**\n   * Update controller input state from InputState\n   * @param {PlayerController} controller\n   */\n  updateControllerInput(controller) {\n    controller.input.moveLeft = this.input.isPressed('moveLeft');\n    controller.input.moveRight = this.input.isPressed('moveRight');\n    controller.input.moveUp = this.input.isPressed('moveUp');\n    controller.input.moveDown = this.input.isPressed('moveDown');\n    controller.input.interact = this.input.isPressed('interact');\n    controller.input.deductionBoard = this.input.isPressed('deductionBoard');\n    controller.input.inventory = this.input.isPressed('inventory');\n    controller.input.pause = this.input.isPressed('pause');\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.events.unsubscribe('game:pause');\n    this.events.unsubscribe('game:resume');\n  }\n}\n","/**\n * InvestigationSystem\n *\n * Handles evidence collection, clue derivation, and deduction mechanics.\n * Core system for knowledge-gated progression.\n *\n * Priority: 30\n * Queries: [Transform, Evidence], [Transform, InteractionZone]\n */\n\nimport { GameConfig } from '../config/GameConfig.js';\n\nexport class InvestigationSystem {\n  constructor(componentRegistry, eventBus) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.requiredComponents = ['Transform'];\n\n    // Investigation state\n    this.playerKnowledge = new Set(); // Known knowledge IDs\n    this.playerAbilities = new Set(); // Unlocked ability IDs\n    this.playerCasesSolved = new Set(); // Solved case IDs\n    this.collectedEvidence = new Map(); // caseId -> Set<evidenceId>\n    this.discoveredClues = new Map(); // clueId -> ClueData\n    this.activeCase = null;\n\n    // Detective vision state\n    this.detectiveVisionActive = false;\n    this.detectiveVisionTimer = 0;\n    this.detectiveVisionCooldown = 0;\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    // Default starting ability\n    this.playerAbilities.add('basic_observation');\n\n    console.log('[InvestigationSystem] Initialized');\n  }\n\n  /**\n   * Update investigation mechanics\n   * @param {number} deltaTime - Time since last frame (seconds)\n   * @param {Array} entities - All entities\n   */\n  update(deltaTime, entities) {\n    // Update detective vision timer\n    this.updateDetectiveVision(deltaTime);\n\n    // Find player\n    const player = entities.find(e => e.hasTag && e.hasTag('player'));\n    if (!player) return;\n\n    const playerTransform = this.components.getComponent(player.id, 'Transform');\n    if (!playerTransform) return;\n\n    // Scan for evidence in observation radius\n    this.scanForEvidence(playerTransform, entities);\n\n    // Check for interaction zones\n    this.checkInteractionZones(player, playerTransform, entities);\n  }\n\n  /**\n   * Update detective vision state\n   * @param {number} deltaTime\n   */\n  updateDetectiveVision(deltaTime) {\n    if (this.detectiveVisionActive) {\n      this.detectiveVisionTimer -= deltaTime;\n      if (this.detectiveVisionTimer <= 0) {\n        this.deactivateDetectiveVision();\n      }\n    }\n\n    if (this.detectiveVisionCooldown > 0) {\n      this.detectiveVisionCooldown -= deltaTime;\n    }\n  }\n\n  /**\n   * Scan for evidence in player's observation radius\n   * @param {Transform} playerTransform\n   * @param {Array} entities\n   */\n  scanForEvidence(playerTransform, entities) {\n    const radius = GameConfig.player.observationRadius;\n    const radiusSq = radius * radius;\n\n    for (const entity of entities) {\n      const evidence = this.components.getComponent(entity.id, 'Evidence');\n      if (!evidence || evidence.collected) continue;\n\n      const transform = this.components.getComponent(entity.id, 'Transform');\n      if (!transform) continue;\n\n      // Check if evidence is in range\n      const dx = transform.x - playerTransform.x;\n      const dy = transform.y - playerTransform.y;\n      const distSq = dx * dx + dy * dy;\n\n      if (distSq <= radiusSq) {\n        // Check if evidence is visible (not hidden or detective vision active)\n        const isVisible = !evidence.hidden || this.detectiveVisionActive;\n\n        if (isVisible) {\n          this.events.emit('evidence:detected', {\n            entityId: entity.id,\n            evidenceId: evidence.id,\n            distance: Math.sqrt(distSq),\n            position: { x: transform.x, y: transform.y }\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Check interaction zones for evidence collection\n   * @param {Object} player - Player entity\n   * @param {Transform} playerTransform\n   * @param {Array} entities\n   */\n  checkInteractionZones(player, playerTransform, entities) {\n    const playerController = this.components.getComponent(player.id, 'PlayerController');\n    if (!playerController) return;\n\n    const interactPressed = playerController.input.interact;\n\n    for (const entity of entities) {\n      const zone = this.components.getComponent(entity.id, 'InteractionZone');\n      if (!zone || !zone.active) continue;\n\n      const transform = this.components.getComponent(entity.id, 'Transform');\n      if (!transform) continue;\n\n      // Check if in range\n      if (!zone.isInRange(playerTransform, transform)) continue;\n\n      // Handle interaction based on type\n      if (zone.type === 'evidence') {\n        if (interactPressed || !zone.requiresInput) {\n          this.collectEvidence(entity.id, zone.data.evidenceId);\n        } else {\n          // Show prompt\n          this.events.emit('ui:show_prompt', {\n            text: zone.prompt,\n            position: { x: transform.x, y: transform.y }\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Collect evidence\n   * @param {string} entityId - Evidence entity ID\n   * @param {string} evidenceId - Evidence data ID\n   */\n  collectEvidence(entityId, evidenceId) {\n    const evidence = this.components.getComponent(entityId, 'Evidence');\n    if (!evidence || evidence.collected) return;\n\n    // Check if player has required ability\n    if (!evidence.canCollect(this.playerAbilities)) {\n      this.events.emit('evidence:collection_failed', {\n        evidenceId,\n        reason: 'missing_ability',\n        required: evidence.requires\n      });\n      return;\n    }\n\n    // Collect evidence\n    evidence.collect();\n\n    // Track by case\n    if (!this.collectedEvidence.has(evidence.caseId)) {\n      this.collectedEvidence.set(evidence.caseId, new Set());\n    }\n    this.collectedEvidence.get(evidence.caseId).add(evidenceId);\n\n    // Emit collection event\n    this.events.emit('evidence:collected', {\n      evidenceId,\n      caseId: evidence.caseId,\n      type: evidence.type,\n      category: evidence.category,\n      entityId\n    });\n\n    // Check if this evidence derives any clues\n    this.checkClueDerivation(evidence);\n\n    console.log(`[InvestigationSystem] Collected evidence: ${evidence.title}`);\n  }\n\n  /**\n   * Check if collecting evidence reveals new clues\n   * @param {Evidence} evidence\n   */\n  checkClueDerivation(evidence) {\n    for (const clueId of evidence.derivedClues) {\n      if (!this.discoveredClues.has(clueId)) {\n        this.events.emit('clue:derived', {\n          clueId,\n          evidenceId: evidence.id,\n          caseId: evidence.caseId\n        });\n\n        console.log(`[InvestigationSystem] New clue derived: ${clueId}`);\n      }\n    }\n  }\n\n  /**\n   * Activate detective vision ability\n   */\n  activateDetectiveVision() {\n    if (this.detectiveVisionCooldown > 0) {\n      this.events.emit('ability:cooldown', {\n        ability: 'detective_vision',\n        remaining: this.detectiveVisionCooldown\n      });\n      return;\n    }\n\n    if (!this.playerAbilities.has('detective_vision')) {\n      this.events.emit('ability:locked', {\n        ability: 'detective_vision'\n      });\n      return;\n    }\n\n    this.detectiveVisionActive = true;\n    this.detectiveVisionTimer = GameConfig.player.detectiveVisionDuration / 1000;\n\n    this.events.emit('detective_vision:activated', {\n      duration: this.detectiveVisionTimer\n    });\n\n    console.log('[InvestigationSystem] Detective vision activated');\n  }\n\n  /**\n   * Deactivate detective vision\n   */\n  deactivateDetectiveVision() {\n    this.detectiveVisionActive = false;\n    this.detectiveVisionCooldown = GameConfig.player.detectiveVisionCooldown / 1000;\n\n    this.events.emit('detective_vision:deactivated', {\n      cooldown: this.detectiveVisionCooldown\n    });\n\n    console.log('[InvestigationSystem] Detective vision deactivated');\n  }\n\n  /**\n   * Unlock new ability\n   * @param {string} abilityId\n   */\n  unlockAbility(abilityId) {\n    if (this.playerAbilities.has(abilityId)) return;\n\n    this.playerAbilities.add(abilityId);\n\n    this.events.emit('ability:unlocked', {\n      abilityId\n    });\n\n    console.log(`[InvestigationSystem] Ability unlocked: ${abilityId}`);\n  }\n\n  /**\n   * Learn new knowledge\n   * @param {string} knowledgeId\n   */\n  learnKnowledge(knowledgeId) {\n    if (this.playerKnowledge.has(knowledgeId)) return;\n\n    this.playerKnowledge.add(knowledgeId);\n\n    this.events.emit('knowledge:learned', {\n      knowledgeId\n    });\n\n    console.log(`[InvestigationSystem] Knowledge learned: ${knowledgeId}`);\n  }\n\n  /**\n   * Mark case as solved\n   * @param {string} caseId\n   * @param {number} accuracy - Solution accuracy (0.0 to 1.0)\n   */\n  solveCase(caseId, accuracy = 1.0) {\n    if (this.playerCasesSolved.has(caseId)) return;\n\n    this.playerCasesSolved.add(caseId);\n\n    this.events.emit('case:solved', {\n      caseId,\n      accuracy,\n      evidenceCollected: this.collectedEvidence.get(caseId)?.size || 0\n    });\n\n    console.log(`[InvestigationSystem] Case solved: ${caseId} (${(accuracy * 100).toFixed(0)}% accuracy)`);\n  }\n\n  /**\n   * Get current player state for gate checking\n   * @returns {Object}\n   */\n  getPlayerState() {\n    return {\n      knowledge: this.playerKnowledge,\n      abilities: this.playerAbilities,\n      casesSolved: this.playerCasesSolved,\n      factionReputation: new Map() // Managed by FactionReputationSystem\n    };\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.collectedEvidence.clear();\n    this.discoveredClues.clear();\n  }\n}\n","/**\n * FactionReputationSystem\n *\n * Manages faction reputation, disguises, and cascading reputation changes.\n * Core system for social stealth and branching narrative paths.\n *\n * Priority: 25\n * Queries: [FactionMember]\n */\n\nimport { GameConfig, getFactionAttitudeThresholds } from '../config/GameConfig.js';\n\nexport class FactionReputationSystem {\n  constructor(componentRegistry, eventBus) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.requiredComponents = ['FactionMember'];\n\n    // Faction relationships (which factions are allies/enemies)\n    this.factionRelationships = this.initializeFactionRelationships();\n\n    // District control\n    this.districtControl = new Map();\n\n    // Player faction member (cached for performance)\n    this.playerFactionMember = null;\n  }\n\n  /**\n   * Initialize faction relationship web\n   * @returns {Map}\n   */\n  initializeFactionRelationships() {\n    const relationships = new Map();\n\n    // Police faction\n    relationships.set('police', {\n      allies: ['neurosynch'],\n      enemies: ['criminals', 'resistance']\n    });\n\n    // Criminals faction\n    relationships.set('criminals', {\n      allies: [],\n      enemies: ['police', 'neurosynch']\n    });\n\n    // NeuroSync Corporation\n    relationships.set('neurosynch', {\n      allies: ['police'],\n      enemies: ['resistance', 'criminals']\n    });\n\n    // Resistance faction\n    relationships.set('resistance', {\n      allies: [],\n      enemies: ['police', 'neurosynch']\n    });\n\n    // Civilian (neutral)\n    relationships.set('civilian', {\n      allies: [],\n      enemies: []\n    });\n\n    return relationships;\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    // Subscribe to reputation-affecting events\n    this.events.subscribe('evidence:collected', (data) => {\n      this.onEvidenceCollected(data);\n    });\n\n    this.events.subscribe('case:solved', (data) => {\n      this.onCaseSolved(data);\n    });\n\n    // Initialize district control\n    this.districtControl.set('downtown', 'police');\n    this.districtControl.set('industrial', 'criminals');\n    this.districtControl.set('corporate_spires', 'neurosynch');\n    this.districtControl.set('archive_undercity', 'resistance');\n\n    console.log('[FactionReputationSystem] Initialized');\n  }\n\n  /**\n   * Update faction system\n   * @param {number} deltaTime\n   * @param {Array} entities\n   */\n  update(deltaTime, entities) {\n    // Cache player faction member\n    if (!this.playerFactionMember) {\n      const player = entities.find(e => e.hasTag && e.hasTag('player'));\n      if (player) {\n        this.playerFactionMember = this.components.getComponent(player.id, 'FactionMember');\n      }\n    }\n\n    // Check disguise detection for player\n    if (this.playerFactionMember && this.playerFactionMember.currentDisguise) {\n      this.checkDisguiseDetection(entities, deltaTime);\n    }\n  }\n\n  /**\n   * Handle evidence collected event\n   * @param {Object} data\n   */\n  onEvidenceCollected(data) {\n    // Evidence collection can affect reputation based on case\n    // This is a hook for case-specific reputation changes\n    // For now, just log\n    console.log(`[FactionReputationSystem] Evidence collected for case: ${data.caseId}`);\n  }\n\n  /**\n   * Handle case solved event\n   * @param {Object} data\n   */\n  onCaseSolved(data) {\n    // Cases have faction impacts defined in their data\n    // For tutorial implementation, give small police reputation boost\n    if (this.playerFactionMember) {\n      this.modifyReputation('police', 10, 0, 'Case solved');\n    }\n  }\n\n  /**\n   * Modify player reputation with faction\n   * @param {string} factionId\n   * @param {number} fameDelta\n   * @param {number} infamyDelta\n   * @param {string} reason\n   */\n  modifyReputation(factionId, fameDelta, infamyDelta, reason = '') {\n    if (!this.playerFactionMember) return;\n\n    const oldRep = this.playerFactionMember.getReputation(factionId);\n    const oldAttitude = this.playerFactionMember.getAttitude(\n      factionId,\n      getFactionAttitudeThresholds(factionId)\n    );\n\n    // Modify reputation\n    this.playerFactionMember.modifyReputation(factionId, fameDelta, infamyDelta);\n\n    const newRep = this.playerFactionMember.getReputation(factionId);\n    const newAttitude = this.playerFactionMember.getAttitude(\n      factionId,\n      getFactionAttitudeThresholds(factionId)\n    );\n\n    // Emit reputation change event\n    this.events.emit('reputation:changed', {\n      factionId,\n      oldFame: oldRep.fame,\n      newFame: newRep.fame,\n      oldInfamy: oldRep.infamy,\n      newInfamy: newRep.infamy,\n      reason\n    });\n\n    // Check for attitude change\n    if (oldAttitude !== newAttitude) {\n      this.events.emit('faction:attitude_changed', {\n        factionId,\n        oldAttitude,\n        newAttitude\n      });\n\n      console.log(`[FactionReputationSystem] ${factionId} attitude: ${oldAttitude} → ${newAttitude}`);\n    }\n\n    // Cascade reputation to allies and enemies\n    this.cascadeReputation(factionId, fameDelta, infamyDelta);\n\n    console.log(`[FactionReputationSystem] ${factionId} reputation: ${newRep.fame} fame, ${newRep.infamy} infamy (${reason})`);\n  }\n\n  /**\n   * Cascade reputation change to allied and enemy factions\n   * @param {string} sourceFactionId\n   * @param {number} fameDelta\n   * @param {number} infamyDelta\n   */\n  cascadeReputation(sourceFactionId, fameDelta, infamyDelta) {\n    const relationships = this.factionRelationships.get(sourceFactionId);\n    if (!relationships) return;\n\n    const multiplier = GameConfig.faction.cascadeMultiplier;\n\n    // Allies gain proportional fame/infamy\n    for (const allyId of relationships.allies) {\n      const cascadeFame = Math.floor(fameDelta * multiplier);\n      const cascadeInfamy = Math.floor(infamyDelta * multiplier);\n\n      if (cascadeFame !== 0 || cascadeInfamy !== 0) {\n        this.playerFactionMember.modifyReputation(allyId, cascadeFame, cascadeInfamy);\n\n        console.log(`[FactionReputationSystem] Cascade to ${allyId} (ally): ${cascadeFame > 0 ? '+' : ''}${cascadeFame} fame`);\n      }\n    }\n\n    // Enemies lose fame / gain infamy\n    for (const enemyId of relationships.enemies) {\n      const cascadeFame = -Math.floor(fameDelta * multiplier);\n      const cascadeInfamy = Math.floor(infamyDelta * multiplier);\n\n      if (cascadeFame !== 0 || cascadeInfamy !== 0) {\n        this.playerFactionMember.modifyReputation(enemyId, cascadeFame, cascadeInfamy);\n\n        console.log(`[FactionReputationSystem] Cascade to ${enemyId} (enemy): ${cascadeFame} fame`);\n      }\n    }\n  }\n\n  /**\n   * Check for disguise detection\n   * @param {Array} entities\n   * @param {number} deltaTime\n   */\n  checkDisguiseDetection(entities, deltaTime) {\n    // Simplified detection for initial implementation\n    // Full implementation would check NPC sight lines and known status\n  }\n\n  /**\n   * Equip disguise\n   * @param {string} factionId\n   */\n  equipDisguise(factionId) {\n    if (!this.playerFactionMember) return;\n\n    this.playerFactionMember.equipDisguise(factionId);\n\n    this.events.emit('disguise:equipped', {\n      factionId\n    });\n\n    console.log(`[FactionReputationSystem] Disguise equipped: ${factionId}`);\n  }\n\n  /**\n   * Remove disguise\n   */\n  removeDisguise() {\n    if (!this.playerFactionMember) return;\n\n    const oldDisguise = this.playerFactionMember.currentDisguise;\n    this.playerFactionMember.removeDisguise();\n\n    this.events.emit('disguise:removed', {\n      factionId: oldDisguise\n    });\n\n    console.log('[FactionReputationSystem] Disguise removed');\n  }\n\n  /**\n   * Get district controlling faction\n   * @param {string} districtId\n   * @returns {string}\n   */\n  getDistrictController(districtId) {\n    return this.districtControl.get(districtId) || 'civilian';\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.events.unsubscribe('evidence:collected');\n    this.events.unsubscribe('case:solved');\n  }\n}\n","/**\n * KnowledgeProgressionSystem\n *\n * Manages knowledge-gated progression: evaluates gates, unlocks areas/abilities.\n * Core metroidvania progression system.\n *\n * Priority: 35\n * Queries: [KnowledgeGate, Transform]\n */\n\nimport { GameConfig } from '../config/GameConfig.js';\n\nexport class KnowledgeProgressionSystem {\n  constructor(componentRegistry, eventBus, investigationSystem) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.investigation = investigationSystem; // Access to player knowledge state\n    this.requiredComponents = ['KnowledgeGate'];\n\n    // Gate check timing (avoid checking every frame)\n    this.gateCheckTimer = 0;\n    this.gateCheckInterval = GameConfig.knowledge.gateCheckInterval / 1000; // to seconds\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    // Subscribe to progression events\n    this.events.subscribe('knowledge:learned', () => {\n      this.checkAllGates();\n    });\n\n    this.events.subscribe('ability:unlocked', () => {\n      this.checkAllGates();\n    });\n\n    this.events.subscribe('case:solved', () => {\n      this.checkAllGates();\n    });\n\n    console.log('[KnowledgeProgressionSystem] Initialized');\n  }\n\n  /**\n   * Update progression system\n   * @param {number} deltaTime\n   * @param {Array} entities\n   */\n  update(deltaTime, entities) {\n    // Periodic gate check (not every frame for performance)\n    this.gateCheckTimer -= deltaTime;\n    if (this.gateCheckTimer <= 0) {\n      this.checkAllGates(entities);\n      this.gateCheckTimer = this.gateCheckInterval;\n    }\n  }\n\n  /**\n   * Check all knowledge gates\n   * @param {Array} entities\n   */\n  checkAllGates(entities) {\n    if (!entities) return;\n\n    const playerState = this.getPlayerState();\n\n    for (const entity of entities) {\n      const gate = this.components.getComponent(entity.id, 'KnowledgeGate');\n      if (!gate || gate.unlocked) continue;\n\n      // Check if requirements are met\n      if (gate.checkRequirements(playerState)) {\n        this.unlockGate(entity.id, gate);\n      }\n    }\n  }\n\n  /**\n   * Unlock a knowledge gate\n   * @param {string} entityId\n   * @param {KnowledgeGate} gate\n   */\n  unlockGate(entityId, gate) {\n    gate.unlock();\n\n    const transform = this.components.getComponent(entityId, 'Transform');\n\n    this.events.emit('gate:unlocked', {\n      gateId: gate.id,\n      type: gate.type,\n      entityId,\n      position: transform ? { x: transform.x, y: transform.y } : null\n    });\n\n    console.log(`[KnowledgeProgressionSystem] Gate unlocked: ${gate.id} (${gate.type})`);\n  }\n\n  /**\n   * Get player state for gate checking\n   * @returns {Object}\n   */\n  getPlayerState() {\n    // Get state from InvestigationSystem\n    const baseState = this.investigation.getPlayerState();\n\n    // Add faction reputation from cached player FactionMember\n    // (This would ideally come from FactionReputationSystem)\n    baseState.factionReputation = new Map();\n\n    return baseState;\n  }\n\n  /**\n   * Check if player can access area\n   * @param {string} areaId\n   * @returns {boolean}\n   */\n  canAccessArea(areaId) {\n    // Check if any gates blocking this area are unlocked\n    // This is a simplified check; full implementation would track area gates\n    return true;\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.events.unsubscribe('knowledge:learned');\n    this.events.unsubscribe('ability:unlocked');\n    this.events.unsubscribe('case:solved');\n  }\n}\n","/**\n * DialogueSystem\n *\n * Manages NPC dialogue interactions and conversation trees.\n * Stub implementation for initial gameplay loop.\n *\n * Priority: 40\n */\n\nexport class DialogueSystem {\n  constructor(componentRegistry, eventBus) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n\n    // Active dialogue state\n    this.activeDialogue = null;\n    this.dialogueHistory = new Map(); // npcId -> conversation history\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    console.log('[DialogueSystem] Initialized (stub)');\n  }\n\n  /**\n   * Update dialogue system\n   * @param {number} deltaTime\n   * @param {Array} entities\n   */\n  update(deltaTime, entities) {\n    // Stub: Full implementation will handle dialogue UI, choices, branching\n  }\n\n  /**\n   * Start dialogue with NPC\n   * @param {string} npcId - NPC entity ID\n   * @param {string} dialogueId - Dialogue tree ID\n   */\n  startDialogue(npcId, dialogueId) {\n    this.activeDialogue = {\n      npcId,\n      dialogueId,\n      currentNode: 'start',\n      choices: []\n    };\n\n    this.events.emit('dialogue:started', {\n      npcId,\n      dialogueId\n    });\n\n    console.log(`[DialogueSystem] Started dialogue: ${dialogueId} with NPC: ${npcId}`);\n  }\n\n  /**\n   * End active dialogue\n   */\n  endDialogue() {\n    if (!this.activeDialogue) return;\n\n    const { npcId, dialogueId } = this.activeDialogue;\n\n    this.events.emit('dialogue:ended', {\n      npcId,\n      dialogueId\n    });\n\n    this.activeDialogue = null;\n\n    console.log('[DialogueSystem] Dialogue ended');\n  }\n\n  /**\n   * Select dialogue choice\n   * @param {number} choiceIndex\n   */\n  selectChoice(choiceIndex) {\n    if (!this.activeDialogue) return;\n\n    this.events.emit('dialogue:choice_selected', {\n      dialogueId: this.activeDialogue.dialogueId,\n      choice: choiceIndex\n    });\n\n    // Stub: Full implementation will navigate dialogue tree\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    this.activeDialogue = null;\n  }\n}\n","/**\n * CameraFollowSystem\n *\n * Smooth camera following for player with look-ahead and deadzone.\n * Integrates with engine's camera/renderer.\n *\n * Priority: 90 (late, after movement)\n * Queries: [Transform, PlayerController]\n */\n\nimport { GameConfig } from '../config/GameConfig.js';\n\nexport class CameraFollowSystem {\n  constructor(componentRegistry, eventBus, camera) {\n    this.components = componentRegistry;\n    this.events = eventBus;\n    this.camera = camera; // Engine camera instance\n    this.requiredComponents = ['Transform', 'PlayerController'];\n\n    // Camera state\n    this.targetX = 0;\n    this.targetY = 0;\n    this.velocityX = 0;\n    this.velocityY = 0;\n  }\n\n  /**\n   * Initialize system\n   */\n  init() {\n    console.log('[CameraFollowSystem] Initialized');\n  }\n\n  /**\n   * Update camera to follow player\n   * @param {number} deltaTime\n   * @param {Array} entities\n   */\n  update(deltaTime, entities) {\n    // Find player\n    const player = entities.find(e => e.hasTag && e.hasTag('player'));\n    if (!player) return;\n\n    const transform = this.components.getComponent(player.id, 'Transform');\n    const controller = this.components.getComponent(player.id, 'PlayerController');\n\n    if (!transform || !controller) return;\n\n    // Calculate target position with look-ahead\n    const lookAhead = GameConfig.camera.lookAheadDistance;\n    const velocityMagnitude = Math.sqrt(\n      controller.velocityX ** 2 + controller.velocityY ** 2\n    );\n\n    let lookAheadX = 0;\n    let lookAheadY = 0;\n\n    if (velocityMagnitude > 0.1) {\n      lookAheadX = (controller.velocityX / velocityMagnitude) * lookAhead;\n      lookAheadY = (controller.velocityY / velocityMagnitude) * lookAhead;\n    }\n\n    this.targetX = transform.x + lookAheadX;\n    this.targetY = transform.y + lookAheadY;\n\n    // Apply deadzone\n    const deadzone = GameConfig.camera.deadzone;\n    const dx = this.targetX - this.camera.x;\n    const dy = this.targetY - this.camera.y;\n    const distanceFromCenter = Math.sqrt(dx * dx + dy * dy);\n\n    if (distanceFromCenter < deadzone) {\n      // Within deadzone, don't move camera\n      return;\n    }\n\n    // Smooth follow with lerp\n    const followSpeed = GameConfig.camera.followSpeed;\n    this.camera.x += (this.targetX - this.camera.x) * followSpeed;\n    this.camera.y += (this.targetY - this.camera.y) * followSpeed;\n\n    // Round to prevent subpixel jitter\n    this.camera.x = Math.round(this.camera.x);\n    this.camera.y = Math.round(this.camera.y);\n  }\n\n  /**\n   * Trigger camera shake\n   * @param {number} intensity - Shake strength\n   * @param {number} duration - Shake duration (seconds)\n   */\n  shake(intensity, duration) {\n    if (this.camera && this.camera.shake) {\n      this.camera.shake(intensity, duration);\n    }\n\n    this.events.emit('camera:shake', {\n      intensity,\n      duration\n    });\n  }\n\n  /**\n   * Instantly snap camera to position\n   * @param {number} x\n   * @param {number} y\n   */\n  snapTo(x, y) {\n    if (this.camera) {\n      this.camera.x = x;\n      this.camera.y = y;\n    }\n\n    this.targetX = x;\n    this.targetY = y;\n  }\n\n  /**\n   * Cleanup system\n   */\n  cleanup() {\n    // No cleanup needed\n  }\n}\n","/**\n * Transform Component\n *\n * Core spatial component defining position, rotation, and scale.\n * Required by virtually all visible entities.\n *\n * @property {number} x - World X coordinate (pixels)\n * @property {number} y - World Y coordinate (pixels)\n * @property {number} rotation - Rotation in radians (0 to 2π)\n * @property {number} scaleX - Horizontal scale multiplier (1.0 = normal)\n * @property {number} scaleY - Vertical scale multiplier (1.0 = normal)\n */\nexport class Transform {\n  constructor(x = 0, y = 0, rotation = 0, scaleX = 1, scaleY = 1) {\n    this.x = x;\n    this.y = y;\n    this.rotation = rotation;\n    this.scaleX = scaleX;\n    this.scaleY = scaleY;\n  }\n\n  /**\n   * Set position\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   */\n  setPosition(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Translate by offset\n   * @param {number} dx - X offset\n   * @param {number} dy - Y offset\n   */\n  translate(dx, dy) {\n    this.x += dx;\n    this.y += dy;\n  }\n\n  /**\n   * Calculate distance to another transform\n   * @param {Transform} other - Target transform\n   * @returns {number} Distance in pixels\n   */\n  distanceTo(other) {\n    const dx = other.x - this.x;\n    const dy = other.y - this.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  /**\n   * Clone this transform\n   * @returns {Transform} New transform with same values\n   */\n  clone() {\n    return new Transform(this.x, this.y, this.rotation, this.scaleX, this.scaleY);\n  }\n}\n","/**\n * Sprite Component\n *\n * Visual representation component for rendering entities.\n *\n * @property {string|HTMLImageElement} image - Image reference or placeholder color\n * @property {number} width - Sprite width in pixels\n * @property {number} height - Sprite height in pixels\n * @property {string} layer - Render layer (background, tiles, entities, effects, ui_world, ui_screen)\n * @property {number} zIndex - Sort order within layer (higher = drawn later)\n * @property {boolean} visible - Whether sprite should be rendered\n * @property {number} alpha - Opacity (0.0 to 1.0)\n * @property {string} color - Fallback color if no image (e.g., \"#FF0000\")\n */\nexport class Sprite {\n  constructor({\n    image = null,\n    width = 32,\n    height = 32,\n    layer = 'entities',\n    zIndex = 0,\n    visible = true,\n    alpha = 1.0,\n    color = '#FFFFFF'\n  } = {}) {\n    this.image = image;\n    this.width = width;\n    this.height = height;\n    this.layer = layer;\n    this.zIndex = zIndex;\n    this.visible = visible;\n    this.alpha = alpha;\n    this.color = color;\n  }\n\n  /**\n   * Show sprite\n   */\n  show() {\n    this.visible = true;\n  }\n\n  /**\n   * Hide sprite\n   */\n  hide() {\n    this.visible = false;\n  }\n\n  /**\n   * Set opacity\n   * @param {number} alpha - Opacity (0.0 to 1.0)\n   */\n  setAlpha(alpha) {\n    this.alpha = Math.max(0, Math.min(1, alpha));\n  }\n}\n","/**\n * PlayerController Component\n *\n * Stores player input state and movement parameters.\n * Read by PlayerMovementSystem to control player entity.\n *\n * @property {Object} input - Current input state\n * @property {boolean} input.moveLeft - W key pressed\n * @property {boolean} input.moveRight - S key pressed\n * @property {boolean} input.moveUp - A key pressed\n * @property {boolean} input.moveDown - D key pressed\n * @property {boolean} input.interact - E key pressed (evidence collection)\n * @property {boolean} input.deductionBoard - Tab key pressed\n * @property {boolean} input.inventory - I key pressed\n * @property {boolean} input.pause - ESC key pressed\n * @property {number} moveSpeed - Base movement speed (pixels/second)\n * @property {number} acceleration - How fast speed changes (pixels/second²)\n * @property {number} friction - Deceleration multiplier (0.0 to 1.0)\n */\nexport class PlayerController {\n  constructor({\n    moveSpeed = 200,\n    acceleration = 1200,\n    friction = 0.85\n  } = {}) {\n    this.input = {\n      moveLeft: false,\n      moveRight: false,\n      moveUp: false,\n      moveDown: false,\n      interact: false,\n      deductionBoard: false,\n      inventory: false,\n      pause: false\n    };\n\n    this.moveSpeed = moveSpeed;\n    this.acceleration = acceleration;\n    this.friction = friction;\n\n    // Internal velocity tracking (managed by PlayerMovementSystem)\n    this.velocityX = 0;\n    this.velocityY = 0;\n  }\n\n  /**\n   * Reset all input states\n   */\n  resetInput() {\n    Object.keys(this.input).forEach(key => {\n      this.input[key] = false;\n    });\n  }\n\n  /**\n   * Check if any movement input is active\n   * @returns {boolean}\n   */\n  isMoving() {\n    return this.input.moveLeft || this.input.moveRight ||\n           this.input.moveUp || this.input.moveDown;\n  }\n}\n","/**\n * Collider Component\n *\n * Physics collision component for spatial queries and collision detection.\n * Used by physics system for collision resolution.\n *\n * @property {string} type - Collision shape type ('AABB', 'circle')\n * @property {number} width - Width for AABB colliders\n * @property {number} height - Height for AABB colliders\n * @property {number} radius - Radius for circle colliders\n * @property {number} offsetX - X offset from transform position\n * @property {number} offsetY - Y offset from transform position\n * @property {boolean} isTrigger - If true, no physics response (events only)\n * @property {boolean} isStatic - If true, collider doesn't move\n * @property {Array<string>} tags - Collision tags for filtering\n */\nexport class Collider {\n  constructor({\n    type = 'AABB',\n    width = 32,\n    height = 32,\n    radius = 16,\n    offsetX = 0,\n    offsetY = 0,\n    isTrigger = false,\n    isStatic = false,\n    tags = []\n  } = {}) {\n    this.type = type;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n    this.isTrigger = isTrigger;\n    this.isStatic = isStatic;\n    this.tags = tags;\n  }\n\n  /**\n   * Get AABB bounds\n   * @param {Transform} transform - Entity transform\n   * @returns {Object} Bounds {minX, minY, maxX, maxY}\n   */\n  getBounds(transform) {\n    if (this.type === 'AABB') {\n      const x = transform.x + this.offsetX;\n      const y = transform.y + this.offsetY;\n      return {\n        minX: x - this.width / 2,\n        minY: y - this.height / 2,\n        maxX: x + this.width / 2,\n        maxY: y + this.height / 2\n      };\n    } else if (this.type === 'circle') {\n      const x = transform.x + this.offsetX;\n      const y = transform.y + this.offsetY;\n      return {\n        minX: x - this.radius,\n        minY: y - this.radius,\n        maxX: x + this.radius,\n        maxY: y + this.radius\n      };\n    }\n    return { minX: 0, minY: 0, maxX: 0, maxY: 0 };\n  }\n\n  /**\n   * Check if collider has tag\n   * @param {string} tag - Tag to check\n   * @returns {boolean}\n   */\n  hasTag(tag) {\n    return this.tags.includes(tag);\n  }\n}\n","/**\n * FactionMember Component\n *\n * Faction affiliation and reputation tracking.\n * Used by NPCs and player for faction relationship mechanics.\n *\n * @property {string} primaryFaction - Main faction affiliation\n * @property {Map<string, Object>} reputation - Reputation with each faction\n * @property {number} reputation[factionId].fame - Heroic reputation (0-100)\n * @property {number} reputation[factionId].infamy - Antihero reputation (0-100)\n * @property {string|null} currentDisguise - Active disguise faction (null if not disguised)\n * @property {Set<string>} knownBy - Entity IDs of NPCs who recognize player\n * @property {Array<Object>} relationshipModifiers - Temporary reputation modifiers\n */\nexport class FactionMember {\n  constructor({\n    primaryFaction = 'civilian',\n    reputation = {},\n    currentDisguise = null,\n    knownBy = new Set(),\n    relationshipModifiers = []\n  } = {}) {\n    this.primaryFaction = primaryFaction;\n    this.reputation = new Map(Object.entries(reputation));\n    this.currentDisguise = currentDisguise;\n    this.knownBy = knownBy;\n    this.relationshipModifiers = relationshipModifiers;\n  }\n\n  /**\n   * Get reputation with faction\n   * @param {string} factionId - Faction identifier\n   * @returns {Object} {fame, infamy}\n   */\n  getReputation(factionId) {\n    if (!this.reputation.has(factionId)) {\n      this.reputation.set(factionId, { fame: 0, infamy: 0 });\n    }\n    return this.reputation.get(factionId);\n  }\n\n  /**\n   * Modify reputation with faction\n   * @param {string} factionId - Faction identifier\n   * @param {number} fameDelta - Fame change\n   * @param {number} infamyDelta - Infamy change\n   */\n  modifyReputation(factionId, fameDelta = 0, infamyDelta = 0) {\n    const rep = this.getReputation(factionId);\n    rep.fame = Math.max(0, Math.min(100, rep.fame + fameDelta));\n    rep.infamy = Math.max(0, Math.min(100, rep.infamy + infamyDelta));\n  }\n\n  /**\n   * Get faction attitude based on reputation\n   * @param {string} factionId - Faction identifier\n   * @param {Object} attitudeThresholds - Faction's attitude thresholds\n   * @returns {string} 'allied', 'friendly', 'neutral', or 'hostile'\n   */\n  getAttitude(factionId, attitudeThresholds) {\n    const rep = this.getReputation(factionId);\n\n    if (rep.fame >= attitudeThresholds.allied.fame && rep.infamy <= attitudeThresholds.allied.infamy) {\n      return 'allied';\n    } else if (rep.fame >= attitudeThresholds.friendly.fame && rep.infamy <= attitudeThresholds.friendly.infamy) {\n      return 'friendly';\n    } else if (rep.infamy >= attitudeThresholds.hostile.infamy) {\n      return 'hostile';\n    }\n    return 'neutral';\n  }\n\n  /**\n   * Equip disguise\n   * @param {string} factionId - Faction to disguise as\n   */\n  equipDisguise(factionId) {\n    this.currentDisguise = factionId;\n  }\n\n  /**\n   * Remove disguise\n   */\n  removeDisguise() {\n    this.currentDisguise = null;\n  }\n\n  /**\n   * Check if entity is known by an NPC\n   * @param {string} npcId - NPC entity ID\n   * @returns {boolean}\n   */\n  isKnownBy(npcId) {\n    return this.knownBy.has(npcId);\n  }\n\n  /**\n   * Mark as known by NPC\n   * @param {string} npcId - NPC entity ID\n   */\n  markKnownBy(npcId) {\n    this.knownBy.add(npcId);\n  }\n}\n","/**\n * Evidence Component\n *\n * Investigation evidence that can be collected by player.\n * Core to knowledge-gated progression system.\n *\n * @property {string} id - Unique evidence identifier\n * @property {string} type - Evidence type ('physical', 'digital', 'testimony', 'forensic')\n * @property {string} category - Specific category (fingerprint, document, weapon, etc)\n * @property {string} title - Display name\n * @property {string} description - Evidence description\n * @property {string} caseId - Associated case ID\n * @property {boolean} collected - Whether player has collected this\n * @property {boolean} analyzed - Whether evidence has been forensically examined\n * @property {boolean} hidden - Requires detective vision to reveal\n * @property {string|null} requires - Required ability to collect (e.g., 'forensic_kit_level_1')\n * @property {Array<string>} derivedClues - Clue IDs that can be derived from this evidence\n */\nexport class Evidence {\n  constructor({\n    id = '',\n    type = 'physical',\n    category = 'generic',\n    title = 'Evidence',\n    description = 'A piece of evidence',\n    caseId = '',\n    collected = false,\n    analyzed = false,\n    hidden = false,\n    requires = null,\n    derivedClues = []\n  } = {}) {\n    this.id = id;\n    this.type = type;\n    this.category = category;\n    this.title = title;\n    this.description = description;\n    this.caseId = caseId;\n    this.collected = collected;\n    this.analyzed = analyzed;\n    this.hidden = hidden;\n    this.requires = requires;\n    this.derivedClues = derivedClues;\n  }\n\n  /**\n   * Check if player can collect this evidence\n   * @param {Set<string>} playerAbilities - Player's current abilities\n   * @returns {boolean}\n   */\n  canCollect(playerAbilities) {\n    if (this.collected) return false;\n    if (!this.requires) return true;\n    return playerAbilities.has(this.requires);\n  }\n\n  /**\n   * Mark evidence as collected\n   */\n  collect() {\n    this.collected = true;\n  }\n\n  /**\n   * Mark evidence as analyzed\n   */\n  analyze() {\n    this.analyzed = true;\n  }\n}\n","/**\n * InteractionZone Component\n *\n * Interactable area that triggers when player enters/presses interact key.\n * Used for evidence collection, NPC dialogue, area transitions.\n *\n * @property {string} id - Interaction identifier\n * @property {string} type - Interaction type ('evidence', 'dialogue', 'transition', 'trigger')\n * @property {number} radius - Interaction radius in pixels\n * @property {boolean} requiresInput - Whether interaction needs E key press or is automatic\n * @property {string} prompt - Prompt text shown to player (e.g., \"Press E to examine\")\n * @property {boolean} active - Whether zone is currently active\n * @property {boolean} oneShot - If true, can only interact once\n * @property {boolean} used - Whether one-shot interaction has been used\n * @property {Object} data - Type-specific interaction data\n */\nexport class InteractionZone {\n  constructor({\n    id = '',\n    type = 'trigger',\n    radius = 64,\n    requiresInput = true,\n    prompt = 'Press E to interact',\n    active = true,\n    oneShot = false,\n    used = false,\n    data = {}\n  } = {}) {\n    this.id = id;\n    this.type = type;\n    this.radius = radius;\n    this.requiresInput = requiresInput;\n    this.prompt = prompt;\n    this.active = active;\n    this.oneShot = oneShot;\n    this.used = used;\n    this.data = data;\n  }\n\n  /**\n   * Check if player is in range\n   * @param {Transform} playerTransform - Player transform\n   * @param {Transform} zoneTransform - Zone transform\n   * @returns {boolean}\n   */\n  isInRange(playerTransform, zoneTransform) {\n    const distance = playerTransform.distanceTo(zoneTransform);\n    return distance <= this.radius;\n  }\n\n  /**\n   * Attempt interaction\n   * @returns {boolean} True if interaction occurred\n   */\n  interact() {\n    if (!this.active || (this.oneShot && this.used)) {\n      return false;\n    }\n\n    if (this.oneShot) {\n      this.used = true;\n    }\n\n    return true;\n  }\n\n  /**\n   * Activate zone\n   */\n  activate() {\n    this.active = true;\n  }\n\n  /**\n   * Deactivate zone\n   */\n  deactivate() {\n    this.active = false;\n  }\n\n  /**\n   * Reset one-shot interaction\n   */\n  reset() {\n    this.used = false;\n  }\n}\n","/**\n * EvidenceEntity Factory\n *\n * Creates evidence entities that can be collected by player.\n * Evidence drives investigation and knowledge-gated progression.\n */\n\nimport { Transform } from '../components/Transform.js';\nimport { Sprite } from '../components/Sprite.js';\nimport { Evidence } from '../components/Evidence.js';\nimport { InteractionZone } from '../components/InteractionZone.js';\nimport { Collider } from '../components/Collider.js';\n\n/**\n * Create evidence entity\n * @param {Object} entityManager - Entity manager instance\n * @param {Object} componentRegistry - Component registry instance\n * @param {Object} evidenceData - Evidence configuration\n * @returns {string} Entity ID\n */\nexport function createEvidenceEntity(entityManager, componentRegistry, evidenceData) {\n  const {\n    x = 0,\n    y = 0,\n    id = `evidence_${Date.now()}`,\n    type = 'physical',\n    category = 'generic',\n    title = 'Evidence',\n    description = 'A piece of evidence',\n    caseId = 'case_tutorial',\n    hidden = false,\n    requires = null,\n    derivedClues = []\n  } = evidenceData;\n\n  // Create entity\n  const entityId = entityManager.createEntity();\n  entityManager.tagEntity(entityId, 'evidence');\n\n  // Add Transform component\n  const transform = new Transform(x, y, 0, 1, 1);\n  componentRegistry.addComponent(entityId, 'Transform', transform);\n\n  // Add Sprite component\n  const sprite = new Sprite({\n    image: null,\n    width: 24,\n    height: 24,\n    layer: 'entities',\n    zIndex: 5,\n    color: getEvidenceColor(type),\n    visible: !hidden, // Hidden evidence not visible until detective vision\n    alpha: hidden ? 0.3 : 1.0\n  });\n  componentRegistry.addComponent(entityId, 'Sprite', sprite);\n\n  // Add Evidence component\n  const evidence = new Evidence({\n    id,\n    type,\n    category,\n    title,\n    description,\n    caseId,\n    collected: false,\n    analyzed: false,\n    hidden,\n    requires,\n    derivedClues\n  });\n  componentRegistry.addComponent(entityId, 'Evidence', evidence);\n\n  // Add InteractionZone component\n  const interactionZone = new InteractionZone({\n    id: `interaction_${id}`,\n    type: 'evidence',\n    radius: 48,\n    requiresInput: true,\n    prompt: `Press E to collect: ${title}`,\n    active: true,\n    oneShot: true,\n    data: {\n      evidenceId: id,\n      caseId\n    }\n  });\n  componentRegistry.addComponent(entityId, 'InteractionZone', interactionZone);\n\n  // Add trigger collider for detection\n  const collider = new Collider({\n    type: 'circle',\n    radius: 12,\n    isTrigger: true,\n    isStatic: true,\n    tags: ['evidence']\n  });\n  componentRegistry.addComponent(entityId, 'Collider', collider);\n\n  console.log(`[EvidenceEntity] Created evidence: ${title} at (${x}, ${y})`);\n\n  return entityId;\n}\n\n/**\n * Get visual color based on evidence type\n * @param {string} type\n * @returns {string}\n */\nfunction getEvidenceColor(type) {\n  const colors = {\n    physical: '#FFAA00', // Orange\n    digital: '#00FFFF', // Cyan\n    testimony: '#FF00FF', // Magenta\n    forensic: '#00FF00' // Green\n  };\n  return colors[type] || '#FFFFFF';\n}\n","/**\n * Controls\n *\n * Input mapping configuration for The Memory Syndicate.\n * Maps keyboard keys to game actions.\n */\n\nexport const Controls = {\n  // Movement (WASD)\n  moveUp: ['KeyW', 'ArrowUp'],\n  moveDown: ['KeyS', 'ArrowDown'],\n  moveLeft: ['KeyA', 'ArrowLeft'],\n  moveRight: ['KeyD', 'ArrowRight'],\n\n  // Actions\n  interact: ['KeyE'], // Evidence collection, dialogue, interaction\n  deductionBoard: ['Tab'], // Open deduction board\n  inventory: ['KeyI'], // Open inventory\n  pause: ['Escape'], // Pause menu\n\n  // Detective abilities\n  detectiveVision: ['KeyV'], // Activate detective vision\n  forensicAnalysis: ['KeyF'], // Analyze evidence\n\n  // Combat (future)\n  attack: ['Space'],\n  dodge: ['Shift'],\n\n  // UI navigation\n  confirm: ['Enter', 'Space'],\n  cancel: ['Escape'],\n\n  // Debug\n  debugToggle: ['Backquote'], // Toggle debug overlay (`)\n};\n\n/**\n * Input state manager\n * Tracks which keys are currently pressed\n */\nexport class InputState {\n  constructor() {\n    this.keys = new Map();\n    this.actions = new Map();\n\n    // Initialize action states\n    Object.keys(Controls).forEach(action => {\n      this.actions.set(action, false);\n    });\n\n    // Bind keyboard events\n    this.bindEvents();\n  }\n\n  /**\n   * Bind keyboard event listeners\n   */\n  bindEvents() {\n    window.addEventListener('keydown', (e) => this.handleKeyDown(e));\n    window.addEventListener('keyup', (e) => this.handleKeyUp(e));\n  }\n\n  /**\n   * Handle key down event\n   * @param {KeyboardEvent} event\n   */\n  handleKeyDown(event) {\n    // Prevent default for game keys\n    if (this.isGameKey(event.code)) {\n      event.preventDefault();\n    }\n\n    this.keys.set(event.code, true);\n    this.updateActions();\n  }\n\n  /**\n   * Handle key up event\n   * @param {KeyboardEvent} event\n   */\n  handleKeyUp(event) {\n    this.keys.set(event.code, false);\n    this.updateActions();\n  }\n\n  /**\n   * Update action states based on key mappings\n   */\n  updateActions() {\n    for (const [action, keyCodes] of Object.entries(Controls)) {\n      const isPressed = keyCodes.some(code => this.keys.get(code));\n      this.actions.set(action, isPressed);\n    }\n  }\n\n  /**\n   * Check if action is currently pressed\n   * @param {string} action - Action name\n   * @returns {boolean}\n   */\n  isPressed(action) {\n    return this.actions.get(action) || false;\n  }\n\n  /**\n   * Check if key is a game control key\n   * @param {string} code - Key code\n   * @returns {boolean}\n   */\n  isGameKey(code) {\n    return Object.values(Controls).flat().includes(code);\n  }\n\n  /**\n   * Reset all input states\n   */\n  reset() {\n    this.keys.clear();\n    this.actions.forEach((_, action) => {\n      this.actions.set(action, false);\n    });\n  }\n\n  /**\n   * Get movement vector from input\n   * @returns {Object} {x, y} normalized direction vector\n   */\n  getMovementVector() {\n    let x = 0;\n    let y = 0;\n\n    if (this.isPressed('moveLeft')) x -= 1;\n    if (this.isPressed('moveRight')) x += 1;\n    if (this.isPressed('moveUp')) y -= 1;\n    if (this.isPressed('moveDown')) y += 1;\n\n    // Normalize diagonal movement\n    if (x !== 0 && y !== 0) {\n      const length = Math.sqrt(x * x + y * y);\n      x /= length;\n      y /= length;\n    }\n\n    return { x, y };\n  }\n}\n","/**\n * Game.js\n *\n * Main game coordinator for The Memory Syndicate.\n * Initializes engine systems, loads game-specific systems, and creates initial scene.\n *\n * This file serves as the bridge between engine core and gameplay logic.\n */\n\n// Engine imports (will be implemented by engine-dev)\n// import { EntityManager } from '../engine/ecs/EntityManager.js';\n// import { ComponentRegistry } from '../engine/ecs/ComponentRegistry.js';\n// import { SystemManager } from '../engine/ecs/SystemManager.js';\n// import { EventBus } from '../engine/EventBus.js';\n// import { Renderer } from '../engine/renderer/Renderer.js';\n// import { Camera } from '../engine/renderer/Camera.js';\n\n// Game systems\nimport { PlayerMovementSystem } from './systems/PlayerMovementSystem.js';\nimport { InvestigationSystem } from './systems/InvestigationSystem.js';\nimport { FactionReputationSystem } from './systems/FactionReputationSystem.js';\nimport { KnowledgeProgressionSystem } from './systems/KnowledgeProgressionSystem.js';\nimport { DialogueSystem } from './systems/DialogueSystem.js';\nimport { CameraFollowSystem } from './systems/CameraFollowSystem.js';\n\n// Entity factories\nimport { createPlayerEntity } from './entities/PlayerEntity.js';\nimport { createEvidenceEntity } from './entities/EvidenceEntity.js';\nimport { createNPCEntity } from './entities/NPCEntity.js';\n\n// Configuration\nimport { GameConfig } from './config/GameConfig.js';\nimport { InputState } from './config/Controls.js';\n\n// Components\nimport { Transform } from './components/Transform.js';\nimport { Collider } from './components/Collider.js';\nimport { Sprite } from './components/Sprite.js';\n\n/**\n * Game coordinator class\n */\nexport class Game {\n  constructor(engine) {\n    // Engine references (provided by engine initialization)\n    this.engine = engine;\n    this.entityManager = engine.entityManager;\n    this.componentRegistry = engine.componentRegistry;\n    this.systemManager = engine.systemManager;\n    this.eventBus = engine.eventBus;\n    this.renderer = engine.renderer;\n    this.camera = engine.camera;\n\n    // Game state\n    this.inputState = new InputState();\n    this.paused = false;\n    this.loaded = false;\n\n    // Game systems (game-specific, not engine)\n    this.gameSystems = {\n      playerMovement: null,\n      investigation: null,\n      factionReputation: null,\n      knowledgeProgression: null,\n      dialogue: null,\n      cameraFollow: null\n    };\n  }\n\n  /**\n   * Initialize game\n   */\n  async init() {\n    console.log('[Game] Initializing The Memory Syndicate...');\n\n    // Register game-specific component types\n    this.registerComponentTypes();\n\n    // Initialize game systems\n    this.initializeGameSystems();\n\n    // Load initial scene\n    await this.loadTestScene();\n\n    this.loaded = true;\n\n    console.log('[Game] Initialization complete');\n  }\n\n  /**\n   * Register game component types with engine\n   */\n  registerComponentTypes() {\n    // Component types are registered when first added\n    // This is handled by ComponentRegistry automatically\n    console.log('[Game] Component types will be registered on first use');\n  }\n\n  /**\n   * Initialize game-specific systems\n   */\n  initializeGameSystems() {\n    console.log('[Game] Initializing game systems...');\n\n    // Create investigation system (needed by other systems)\n    this.gameSystems.investigation = new InvestigationSystem(\n      this.componentRegistry,\n      this.eventBus\n    );\n    this.gameSystems.investigation.init();\n\n    // Create player movement system\n    this.gameSystems.playerMovement = new PlayerMovementSystem(\n      this.componentRegistry,\n      this.eventBus,\n      this.inputState\n    );\n    this.gameSystems.playerMovement.init();\n\n    // Create faction reputation system\n    this.gameSystems.factionReputation = new FactionReputationSystem(\n      this.componentRegistry,\n      this.eventBus\n    );\n    this.gameSystems.factionReputation.init();\n\n    // Create knowledge progression system\n    this.gameSystems.knowledgeProgression = new KnowledgeProgressionSystem(\n      this.componentRegistry,\n      this.eventBus,\n      this.gameSystems.investigation\n    );\n    this.gameSystems.knowledgeProgression.init();\n\n    // Create dialogue system\n    this.gameSystems.dialogue = new DialogueSystem(\n      this.componentRegistry,\n      this.eventBus\n    );\n    this.gameSystems.dialogue.init();\n\n    // Create camera follow system\n    this.gameSystems.cameraFollow = new CameraFollowSystem(\n      this.componentRegistry,\n      this.eventBus,\n      this.camera\n    );\n    this.gameSystems.cameraFollow.init();\n\n    // Register systems with engine SystemManager\n    // Priority order: PlayerMovement (10), Investigation (30), Faction (25), Knowledge (35), Dialogue (40), Camera (90)\n    this.systemManager.registerSystem(this.gameSystems.playerMovement, 10);\n    this.systemManager.registerSystem(this.gameSystems.investigation, 30);\n    this.systemManager.registerSystem(this.gameSystems.factionReputation, 25);\n    this.systemManager.registerSystem(this.gameSystems.knowledgeProgression, 35);\n    this.systemManager.registerSystem(this.gameSystems.dialogue, 40);\n    this.systemManager.registerSystem(this.gameSystems.cameraFollow, 90);\n\n    console.log('[Game] Game systems initialized');\n  }\n\n  /**\n   * Load test scene for initial playtesting\n   */\n  async loadTestScene() {\n    console.log('[Game] Loading test scene...');\n\n    // Create player at center\n    const playerId = createPlayerEntity(\n      this.entityManager,\n      this.componentRegistry,\n      400, // x\n      300  // y\n    );\n\n    // Snap camera to player position\n    this.gameSystems.cameraFollow.snapTo(400, 300);\n\n    // Create evidence items around player\n    const evidencePositions = [\n      { x: 300, y: 200, title: 'Fingerprint', type: 'forensic', category: 'fingerprint' },\n      { x: 500, y: 250, title: 'Security Log', type: 'digital', category: 'document' },\n      { x: 350, y: 400, title: 'Witness Statement', type: 'testimony', category: 'testimony' },\n      { x: 450, y: 350, title: 'Memory Fragment', type: 'physical', category: 'memory_chip' }\n    ];\n\n    for (const evidenceData of evidencePositions) {\n      createEvidenceEntity(\n        this.entityManager,\n        this.componentRegistry,\n        {\n          ...evidenceData,\n          id: `evidence_${evidenceData.title.toLowerCase().replace(/\\s+/g, '_')}`,\n          description: `A piece of evidence: ${evidenceData.title}`,\n          caseId: 'case_tutorial',\n          derivedClues: [`clue_${evidenceData.category}`]\n        }\n      );\n    }\n\n    // Create boundary walls (simple collision boxes)\n    this.createBoundary(0, 0, 800, 20); // Top\n    this.createBoundary(0, 580, 800, 20); // Bottom\n    this.createBoundary(0, 0, 20, 600); // Left\n    this.createBoundary(780, 0, 20, 600); // Right\n\n    // Subscribe to game events for logging\n    this.subscribeToGameEvents();\n\n    console.log('[Game] Test scene loaded');\n  }\n\n  /**\n   * Create collision boundary\n   * @param {number} x\n   * @param {number} y\n   * @param {number} width\n   * @param {number} height\n   */\n  createBoundary(x, y, width, height) {\n    const entityId = this.entityManager.createEntity();\n    this.entityManager.tagEntity(entityId, 'wall');\n\n    // Transform (center of boundary)\n    const transform = new Transform(x + width / 2, y + height / 2);\n    this.componentRegistry.addComponent(entityId, 'Transform', transform);\n\n    // Collider\n    const collider = new Collider({\n      type: 'AABB',\n      width,\n      height,\n      isStatic: true,\n      isTrigger: false,\n      tags: ['wall', 'solid']\n    });\n    this.componentRegistry.addComponent(entityId, 'Collider', collider);\n\n    // Optional sprite for visualization\n    const sprite = new Sprite({\n      width,\n      height,\n      color: '#333333',\n      layer: 'tiles',\n      visible: true\n    });\n    this.componentRegistry.addComponent(entityId, 'Sprite', sprite);\n  }\n\n  /**\n   * Subscribe to game events for logging and debugging\n   */\n  subscribeToGameEvents() {\n    // Evidence events\n    this.eventBus.subscribe('evidence:collected', (data) => {\n      console.log(`[Game] Evidence collected: ${data.evidenceId}`);\n    });\n\n    this.eventBus.subscribe('evidence:detected', (data) => {\n      // Visual feedback for detected evidence (could highlight sprite)\n    });\n\n    // Clue events\n    this.eventBus.subscribe('clue:derived', (data) => {\n      console.log(`[Game] New clue: ${data.clueId} from ${data.evidenceId}`);\n    });\n\n    // Reputation events\n    this.eventBus.subscribe('reputation:changed', (data) => {\n      console.log(`[Game] Reputation changed: ${data.factionId} - ${data.newFame} fame, ${data.newInfamy} infamy`);\n    });\n\n    // Gate events\n    this.eventBus.subscribe('gate:unlocked', (data) => {\n      console.log(`[Game] Gate unlocked: ${data.gateId}`);\n    });\n\n    // Ability events\n    this.eventBus.subscribe('ability:unlocked', (data) => {\n      console.log(`[Game] Ability unlocked: ${data.abilityId}`);\n    });\n\n    // Player movement\n    this.eventBus.subscribe('player:moved', (data) => {\n      // Could add footstep sounds here\n    });\n  }\n\n  /**\n   * Update game (called by engine each frame)\n   * @param {number} deltaTime - Time since last frame (seconds)\n   */\n  update(deltaTime) {\n    if (!this.loaded || this.paused) return;\n\n    // Game systems are updated by SystemManager automatically\n    // This method is for game-level logic only\n\n    // Check for pause input\n    if (this.inputState.isPressed('pause')) {\n      this.togglePause();\n    }\n  }\n\n  /**\n   * Toggle pause state\n   */\n  togglePause() {\n    this.paused = !this.paused;\n\n    if (this.paused) {\n      this.eventBus.emit('game:pause');\n      console.log('[Game] Paused');\n    } else {\n      this.eventBus.emit('game:resume');\n      console.log('[Game] Resumed');\n    }\n  }\n\n  /**\n   * Cleanup game\n   */\n  cleanup() {\n    console.log('[Game] Cleaning up...');\n\n    // Cleanup all game systems\n    Object.values(this.gameSystems).forEach(system => {\n      if (system && system.cleanup) {\n        system.cleanup();\n      }\n    });\n\n    // Reset input state\n    this.inputState.reset();\n\n    console.log('[Game] Cleanup complete');\n  }\n}\n\n/**\n * Initialize and start the game\n * @param {Object} engine - Engine instance\n * @returns {Game} Game instance\n */\nexport async function initGame(engine) {\n  const game = new Game(engine);\n  await game.init();\n  return game;\n}\n","/**\n * PlayerEntity Factory\n *\n * Creates the player detective entity with all required components.\n * Tags entity as 'player' for easy querying.\n */\n\nimport { Transform } from '../components/Transform.js';\nimport { Sprite } from '../components/Sprite.js';\nimport { PlayerController } from '../components/PlayerController.js';\nimport { Collider } from '../components/Collider.js';\nimport { FactionMember } from '../components/FactionMember.js';\nimport { GameConfig } from '../config/GameConfig.js';\n\n/**\n * Create player entity\n * @param {Object} entityManager - Entity manager instance\n * @param {Object} componentRegistry - Component registry instance\n * @param {number} x - Spawn X position\n * @param {number} y - Spawn Y position\n * @returns {string} Entity ID\n */\nexport function createPlayerEntity(entityManager, componentRegistry, x = 0, y = 0) {\n  // Create entity\n  const entityId = entityManager.createEntity();\n  entityManager.tagEntity(entityId, 'player');\n\n  // Add Transform component\n  const transform = new Transform(x, y, 0, 1, 1);\n  componentRegistry.addComponent(entityId, 'Transform', transform);\n\n  // Add Sprite component (placeholder visual)\n  const sprite = new Sprite({\n    image: null, // Will be replaced with actual player sprite\n    width: 32,\n    height: 48,\n    layer: 'entities',\n    zIndex: 10,\n    color: '#00CCFF', // Detective blue placeholder\n    visible: true\n  });\n  componentRegistry.addComponent(entityId, 'Sprite', sprite);\n\n  // Add PlayerController component\n  const controller = new PlayerController({\n    moveSpeed: GameConfig.player.moveSpeed,\n    acceleration: GameConfig.player.acceleration,\n    friction: GameConfig.player.friction\n  });\n  componentRegistry.addComponent(entityId, 'PlayerController', controller);\n\n  // Add Collider component\n  const collider = new Collider({\n    type: 'AABB',\n    width: 28,\n    height: 40,\n    offsetX: 0,\n    offsetY: 4, // Offset down slightly for feet\n    isTrigger: false,\n    isStatic: false,\n    tags: ['player', 'solid']\n  });\n  componentRegistry.addComponent(entityId, 'Collider', collider);\n\n  // Add FactionMember component (player starts as civilian detective)\n  const factionMember = new FactionMember({\n    primaryFaction: 'civilian',\n    reputation: {\n      police: { fame: 10, infamy: 0 }, // Former officer\n      criminals: { fame: 0, infamy: 0 },\n      neurosynch: { fame: 5, infamy: 0 },\n      resistance: { fame: 0, infamy: 0 }\n    },\n    currentDisguise: null,\n    knownBy: new Set(),\n    relationshipModifiers: [\n      { factionId: 'police', modifier: 1.1, reason: 'former_officer' }\n    ]\n  });\n  componentRegistry.addComponent(entityId, 'FactionMember', factionMember);\n\n  console.log(`[PlayerEntity] Created player entity at (${x}, ${y})`);\n\n  return entityId;\n}\n","/**\n * Main entry point for The Memory Syndicate.\n */\nimport { Engine } from './engine/Engine.js';\nimport { Game } from './game/Game.js';\n\n// Wait for DOM to load\nwindow.addEventListener('DOMContentLoaded', async () => {\n  console.log('Starting The Memory Syndicate...');\n\n  // Get canvas element\n  const canvas = document.getElementById('game-canvas');\n  if (!canvas) {\n    console.error('Canvas element not found!');\n    return;\n  }\n\n  // Create engine\n  const engine = new Engine(canvas);\n\n  // Initialize engine\n  await engine.init();\n\n  // Create game\n  const game = new Game(engine);\n  await game.init();\n\n  // Hide loading screen\n  const loadingScreen = document.getElementById('loading-screen');\n  if (loadingScreen) {\n    loadingScreen.classList.add('hidden');\n  }\n\n  // Enable debug overlay (toggle with F3)\n  const debugOverlay = document.getElementById('debug-overlay');\n  let debugEnabled = false;\n\n  window.addEventListener('keydown', (e) => {\n    if (e.key === 'F3') {\n      e.preventDefault();\n      debugEnabled = !debugEnabled;\n      if (debugOverlay) {\n        debugOverlay.classList.toggle('visible', debugEnabled);\n      }\n    }\n  });\n\n  // Update debug overlay\n  setInterval(() => {\n    if (!debugEnabled || !debugOverlay) {\n      return;\n    }\n\n    const fpsElement = document.getElementById('debug-fps');\n    const entitiesElement = document.getElementById('debug-entities');\n    const memoryElement = document.getElementById('debug-memory');\n    const frameTimeElement = document.getElementById('debug-frame-time');\n\n    if (fpsElement) {\n      fpsElement.textContent = `FPS: ${engine.getFPS()}`;\n    }\n\n    if (entitiesElement) {\n      const count = engine.getEntityManager().getActiveEntityCount();\n      entitiesElement.textContent = `Entities: ${count}`;\n    }\n\n    if (memoryElement && performance.memory) {\n      const mb = (performance.memory.usedJSHeapSize / 1024 / 1024).toFixed(1);\n      memoryElement.textContent = `Memory: ${mb} MB`;\n    }\n\n    if (frameTimeElement) {\n      const frameTime = (engine.getDeltaTime() * 1000).toFixed(1);\n      frameTimeElement.textContent = `Frame: ${frameTime} ms`;\n    }\n  }, 500);\n\n  // Start engine\n  engine.start();\n\n  console.log('The Memory Syndicate started successfully!');\n\n  // Cleanup on page unload\n  window.addEventListener('beforeunload', () => {\n    engine.cleanup();\n    game.cleanup();\n  });\n});\n"],"names":["EventBus","constructor","this","listeners","Map","eventQueue","isProcessing","wildcardListeners","on","eventType","callback","context","priority","includes","listener","pattern","push","sort","a","b","index","indexOf","splice","has","set","listenerArray","get","array","off","findIndex","l","once","unsubscribe","data","call","emit","i","length","error","console","matchesPattern","enqueue","processQueue","queue","event","patternParts","split","eventParts","clear","delete","getListenerCount","getEventTypes","Array","from","keys","getTotalListenerCount","count","values","getQueuedEventCount","AudioManager","audioContext","masterGain","sounds","music","initialized","init","window","AudioContext","webkitAudioContext","createGain","connect","destination","playSFX","soundId","volume","playMusic","trackId","setMasterVolume","gain","value","Math","max","min","pause","suspend","resume","AssetManager","assets","loading","manifest","loadManifest","url","response","fetch","json","loadAsset","assetId","asset","refCount","promise","_loadAssetData","unloadAsset","getAsset","_Logger","level","LogLevel","INFO","logs","maxLogs","setLevel","getTimestamp","now","Date","String","getHours","padStart","getMinutes","getSeconds","getMilliseconds","format","message","store","timestamp","shift","debug","args","DEBUG","join","log","info","warn","WARN","ERROR","getLogs","clearLogs","exportLogs","JSON","stringify","NONE","Logger","Engine","canvas","logger","running","lastTime","deltaTime","fps","frameCount","fpsUpdateTime","eventBus","entityManager","EntityManager","componentRegistry","ComponentRegistry","systemManager","SystemManager","renderer","Renderer","audioManager","assetManager","registerSystem","system","name","start","performance","requestAnimationFrame","time","gameLoop","stop","currentTime","update","render","getEntityManager","getComponentRegistry","getSystemManager","getEventBus","getRenderer","getAudioManager","getAssetManager","getFPS","getDeltaTime","cleanup","GameConfig","player","moveSpeed","acceleration","friction","observationRadius","detectiveVisionDuration","detectiveVisionCooldown","faction","cascadeMultiplier","attitudeThresholds","allied","fame","infamy","friendly","neutral","hostile","knowledge","gateCheckInterval","camera","followSpeed","lookAheadDistance","deadzone","getFactionAttitudeThresholds","factionId","police","criminals","PlayerMovementSystem","inputState","components","events","input","requiredComponents","subscribe","paused","entities","playerEntities","filter","e","hasTag","entity","controller","getComponent","id","transform","moveVector","getMovementVector","x","y","accel","velocityX","velocityY","direction","position","currentSpeed","sqrt","scale","abs","oldX","oldY","to","velocity","updateControllerInput","moveLeft","isPressed","moveRight","moveUp","moveDown","interact","deductionBoard","inventory","InvestigationSystem","playerKnowledge","Set","playerAbilities","playerCasesSolved","collectedEvidence","discoveredClues","activeCase","detectiveVisionActive","detectiveVisionTimer","add","updateDetectiveVision","find","playerTransform","scanForEvidence","checkInteractionZones","deactivateDetectiveVision","radius","radiusSq","evidence","collected","dx","dy","distSq","hidden","entityId","evidenceId","distance","playerController","interactPressed","zone","active","isInRange","type","requiresInput","collectEvidence","text","prompt","canCollect","collect","caseId","category","checkClueDerivation","title","reason","required","requires","clueId","derivedClues","activateDetectiveVision","ability","remaining","duration","cooldown","unlockAbility","abilityId","learnKnowledge","knowledgeId","solveCase","accuracy","evidenceCollected","size","toFixed","getPlayerState","abilities","casesSolved","factionReputation","FactionReputationSystem","factionRelationships","initializeFactionRelationships","districtControl","playerFactionMember","relationships","allies","enemies","onEvidenceCollected","onCaseSolved","currentDisguise","checkDisguiseDetection","modifyReputation","fameDelta","infamyDelta","oldRep","getReputation","oldAttitude","getAttitude","newRep","newAttitude","oldFame","newFame","oldInfamy","newInfamy","cascadeReputation","sourceFactionId","multiplier","allyId","cascadeFame","floor","cascadeInfamy","enemyId","equipDisguise","removeDisguise","oldDisguise","getDistrictController","districtId","KnowledgeProgressionSystem","investigationSystem","investigation","gateCheckTimer","checkAllGates","playerState","gate","unlocked","checkRequirements","unlockGate","unlock","gateId","baseState","canAccessArea","areaId","DialogueSystem","activeDialogue","dialogueHistory","startDialogue","npcId","dialogueId","currentNode","choices","endDialogue","selectChoice","choiceIndex","choice","CameraFollowSystem","targetX","targetY","lookAhead","velocityMagnitude","lookAheadX","lookAheadY","round","shake","intensity","snapTo","Transform","rotation","scaleX","scaleY","setPosition","translate","distanceTo","other","clone","Sprite","image","width","height","layer","zIndex","visible","alpha","color","show","hide","setAlpha","PlayerController","resetInput","Object","forEach","key","isMoving","Collider","offsetX","offsetY","isTrigger","isStatic","tags","getBounds","minX","minY","maxX","maxY","tag","FactionMember","primaryFaction","reputation","knownBy","relationshipModifiers","entries","rep","isKnownBy","markKnownBy","Evidence","description","analyzed","analyze","InteractionZone","oneShot","used","zoneTransform","activate","deactivate","reset","createEvidenceEntity","evidenceData","createEntity","tagEntity","addComponent","sprite","getEvidenceColor","interactionZone","collider","physical","digital","testimony","forensic","Controls","detectiveVision","forensicAnalysis","attack","dodge","confirm","cancel","debugToggle","InputState","actions","action","bindEvents","addEventListener","handleKeyDown","handleKeyUp","isGameKey","code","preventDefault","updateActions","keyCodes","some","flat","_","Game","engine","loaded","gameSystems","playerMovement","knowledgeProgression","dialogue","cameraFollow","registerComponentTypes","initializeGameSystems","loadTestScene","factionMember","neurosynch","resistance","modifier","createPlayerEntity","evidencePositions","toLowerCase","replace","createBoundary","subscribeToGameEvents","togglePause","async","document","getElementById","game","loadingScreen","classList","debugOverlay","debugEnabled","toggle","setInterval","fpsElement","entitiesElement","memoryElement","frameTimeElement","textContent","getActiveEntityCount","memory","mb","usedJSHeapSize","frameTime"],"mappings":"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"}
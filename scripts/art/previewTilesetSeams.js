#!/usr/bin/env node
/**
 * Produce a preview summary for tileset seam metadata.
 *
 * Loads a seam manifest generated by promoteTilesetSeams.js and emits an
 * aggregated report highlighting orientation, tag, and corridor coverage so
 * art/level teams can verify door seams before enabling preview pipelines.
 */

import path from 'node:path';
import process from 'node:process';
import fs from 'node:fs/promises';

import {
  buildTilesetSeamPreview,
  loadTilesetSeamManifest,
  serializePreview,
} from './lib/tilesetSeamPreview.js';

function parseArgs(argv) {
  const options = {
    manifest: null,
    out: null,
    sampleSize: null,
    maxClusters: null,
    help: false,
  };

  for (const arg of argv) {
    if (arg === '--help' || arg === '-h') {
      options.help = true;
      continue;
    }

    if (arg.startsWith('--manifest=')) {
      options.manifest = arg.slice('--manifest='.length);
      continue;
    }

    if (arg.startsWith('--out=')) {
      options.out = arg.slice('--out='.length);
      continue;
    }

    if (arg.startsWith('--sample=')) {
      options.sampleSize = Number.parseInt(arg.slice('--sample='.length), 10);
      continue;
    }

    if (arg.startsWith('--clusters=')) {
      options.maxClusters = Number.parseInt(arg.slice('--clusters='.length), 10);
      continue;
    }
  }

  return options;
}

function printUsage() {
  console.log(`Usage: node scripts/art/previewTilesetSeams.js --manifest=<path> [options]

Options:
  --manifest=<path>   Tileset seam metadata JSON (required)
  --out=<path>        Output preview report (defaults to reports/art/tileset-previews/<tilesetId>-preview.json)
  --sample=<count>    Number of seam samples to include in the report (default: 5)
  --clusters=<count>  Maximum number of seam clusters to surface (default: 12)
  --help              Show this message
`);
}

async function writePreview(filePath, preview) {
  const serialized = serializePreview(preview);
  await fs.mkdir(path.dirname(filePath), { recursive: true });
  await fs.writeFile(filePath, serialized, 'utf8');
}

function ensureOutputPath(manifestPath, manifest, explicitOut) {
  if (explicitOut) {
    return path.resolve(process.cwd(), explicitOut);
  }

  const tilesetId = manifest.tilesetId ?? path.basename(manifestPath, '.json');
  return path.resolve(
    process.cwd(),
    'reports',
    'art',
    'tileset-previews',
    `${tilesetId}-seams-preview.json`
  );
}

async function main() {
  const args = parseArgs(process.argv.slice(2));

  if (args.help || !args.manifest) {
    printUsage();
    process.exit(args.help ? 0 : 1);
  }

  const manifestPath = path.resolve(process.cwd(), args.manifest);
  const manifest = await loadTilesetSeamManifest(manifestPath);

  const preview = buildTilesetSeamPreview(manifest, {
    sampleSize: args.sampleSize ?? undefined,
    maxClusters: args.maxClusters ?? undefined,
  });

  const outputPath = ensureOutputPath(manifestPath, manifest, args.out);
  await writePreview(outputPath, preview);

  // eslint-disable-next-line no-console
  console.log(
    `[previewTilesetSeams] Preview for ${preview.tilesetId ?? 'unknown tileset'} written to ${path.relative(process.cwd(), outputPath)}`
  );
  // eslint-disable-next-line no-console
  console.log(
    `[previewTilesetSeams] Door seam clusters: ${preview.stats.clusterCount} | Longest span: ${preview.stats.longestClusterLength} tiles`
  );
}

main().catch((error) => {
  // eslint-disable-next-line no-console
  console.error(error instanceof Error ? error.message : error);
  process.exit(1);
});

export { buildTilesetSeamPreview };
